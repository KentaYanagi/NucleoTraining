
xMove.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004310  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c8  080044c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080044c8  080044c8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044c8  080044c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c8  080044c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044cc  080044cc  000144cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080044d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000144  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b893  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001931  00000000  00000000  0002b8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  0002d208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a40  00000000  00000000  0002dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af1f  00000000  00000000  0002e740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bcf9  00000000  00000000  0004965f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a24e6  00000000  00000000  00055358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f783e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e28  00000000  00000000  000f7890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004480 	.word	0x08004480

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004480 	.word	0x08004480

080001c8 <HAL_TIM_PeriodElapsedCallback>:
long precnt = 0;
long overflowcnt = 0;
const long CntPeriod = 65535;
long Location;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80001d8:	d116      	bne.n	8000208 <HAL_TIM_PeriodElapsedCallback+0x40>
		__HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f06f 0201 	mvn.w	r2, #1
 80001e2:	611a      	str	r2, [r3, #16]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 80001e4:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f003 0310 	and.w	r3, r3, #16
 80001ee:	2b10      	cmp	r3, #16
 80001f0:	d105      	bne.n	80001fe <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			overflowcnt --;
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	3b01      	subs	r3, #1
 80001f8:	4a07      	ldr	r2, [pc, #28]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80001fa:	6013      	str	r3, [r2, #0]
		else
		{
			overflowcnt ++;
		}
	}
}
 80001fc:	e004      	b.n	8000208 <HAL_TIM_PeriodElapsedCallback+0x40>
			overflowcnt ++;
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	3301      	adds	r3, #1
 8000204:	4a04      	ldr	r2, [pc, #16]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	20000054 	.word	0x20000054
 8000218:	20000104 	.word	0x20000104

0800021c <Rotate_Init>:
int movingFlag = 0;
int Rotate_Init(int target){
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if(movingFlag == 1)return -1;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <Rotate_Init+0x40>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d102      	bne.n	8000232 <Rotate_Init+0x16>
 800022c:	f04f 33ff 	mov.w	r3, #4294967295
 8000230:	e00d      	b.n	800024e <Rotate_Init+0x32>
	SumValueDif=0;
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <Rotate_Init+0x44>)
 8000234:	f04f 0200 	mov.w	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
	movingFlag = 1;
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <Rotate_Init+0x40>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
	//初期化す
	Location = 0;//現在地
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <Rotate_Init+0x48>)
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
	goal = target;
 8000246:	4a08      	ldr	r2, [pc, #32]	; (8000268 <Rotate_Init+0x4c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	6013      	str	r3, [r2, #0]
	return 0;
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	2000010c 	.word	0x2000010c
 8000260:	200000f0 	.word	0x200000f0
 8000264:	20000108 	.word	0x20000108
 8000268:	200000f4 	.word	0x200000f4

0800026c <Rotate_PID>:
float Rotate_PID(float _now, float _goal){
 800026c:	b480      	push	{r7}
 800026e:	b087      	sub	sp, #28
 8000270:	af00      	add	r7, sp, #0
 8000272:	ed87 0a01 	vstr	s0, [r7, #4]
 8000276:	edc7 0a00 	vstr	s1, [r7]
	  float ValueDif = _goal - _now;
 800027a:	ed97 7a00 	vldr	s14, [r7]
 800027e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000286:	edc7 7a05 	vstr	s15, [r7, #20]
	  if(SumValueDif / 10000 * ValueDif < 0)SumValueDif += ValueDif;
 800028a:	4b2c      	ldr	r3, [pc, #176]	; (800033c <Rotate_PID+0xd0>)
 800028c:	edd3 7a00 	vldr	s15, [r3]
 8000290:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8000340 <Rotate_PID+0xd4>
 8000294:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000298:	edd7 7a05 	vldr	s15, [r7, #20]
 800029c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002a8:	d50a      	bpl.n	80002c0 <Rotate_PID+0x54>
 80002aa:	4b24      	ldr	r3, [pc, #144]	; (800033c <Rotate_PID+0xd0>)
 80002ac:	ed93 7a00 	vldr	s14, [r3]
 80002b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80002b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002b8:	4b20      	ldr	r3, [pc, #128]	; (800033c <Rotate_PID+0xd0>)
 80002ba:	edc3 7a00 	vstr	s15, [r3]
 80002be:	e00d      	b.n	80002dc <Rotate_PID+0x70>
	  else SumValueDif += ValueDif/10000;
 80002c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80002c4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000340 <Rotate_PID+0xd4>
 80002c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <Rotate_PID+0xd0>)
 80002ce:	edd3 7a00 	vldr	s15, [r3]
 80002d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002d6:	4b19      	ldr	r3, [pc, #100]	; (800033c <Rotate_PID+0xd0>)
 80002d8:	edc3 7a00 	vstr	s15, [r3]
	  float DValueDif = ValueDif - PreValueDif;
 80002dc:	4b19      	ldr	r3, [pc, #100]	; (8000344 <Rotate_PID+0xd8>)
 80002de:	edd3 7a00 	vldr	s15, [r3]
 80002e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80002e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80002ea:	edc7 7a04 	vstr	s15, [r7, #16]
	  float output = Kp * ValueDif + Ki * SumValueDif + Kd * DValueDif;
 80002ee:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000348 <Rotate_PID+0xdc>
 80002f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80002f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80002fa:	eddf 6a14 	vldr	s13, [pc, #80]	; 800034c <Rotate_PID+0xe0>
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <Rotate_PID+0xd0>)
 8000300:	edd3 7a00 	vldr	s15, [r3]
 8000304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800030c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000350 <Rotate_PID+0xe4>
 8000310:	edd7 7a04 	vldr	s15, [r7, #16]
 8000314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800031c:	edc7 7a03 	vstr	s15, [r7, #12]
	  PreValueDif = ValueDif;
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <Rotate_PID+0xd8>)
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	6013      	str	r3, [r2, #0]
	  return output;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	ee07 3a90 	vmov	s15, r3
}
 800032c:	eeb0 0a67 	vmov.f32	s0, s15
 8000330:	371c      	adds	r7, #28
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	200000f0 	.word	0x200000f0
 8000340:	461c4000 	.word	0x461c4000
 8000344:	200000ec 	.word	0x200000ec
 8000348:	3d8f5c29 	.word	0x3d8f5c29
 800034c:	39d1b717 	.word	0x39d1b717
 8000350:	00000000 	.word	0x00000000

08000354 <Abs>:

long stopError = 2;
long stopCount = 0;
long Abs(long x){
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	if(x<0)return -1*x;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2b00      	cmp	r3, #0
 8000360:	da02      	bge.n	8000368 <Abs+0x14>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	425b      	negs	r3, r3
 8000366:	e000      	b.n	800036a <Abs+0x16>
	return x;
 8000368:	687b      	ldr	r3, [r7, #4]
}
 800036a:	4618      	mov	r0, r3
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
	...

08000378 <MorterReset>:

void MorterReset(){
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
	movingFlag = 0;
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <MorterReset+0x30>)
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
	Location = 0;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <MorterReset+0x34>)
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
	SumValueDif=0;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MorterReset+0x38>)
 800038a:	f04f 0200 	mov.w	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
	stopCount=0;
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MorterReset+0x3c>)
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MorterReset+0x40>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2200      	movs	r2, #0
 800039c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	2000010c 	.word	0x2000010c
 80003ac:	20000108 	.word	0x20000108
 80003b0:	200000f0 	.word	0x200000f0
 80003b4:	20000110 	.word	0x20000110
 80003b8:	200000a0 	.word	0x200000a0

080003bc <Motor_End>:

int Motor_End(){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	if(  Abs(Location - goal) < stopError){
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <Motor_End+0x44>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <Motor_End+0x48>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	1ad3      	subs	r3, r2, r3
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ffc2 	bl	8000354 <Abs>
 80003d0:	4602      	mov	r2, r0
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <Motor_End+0x4c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	429a      	cmp	r2, r3
 80003d8:	da0b      	bge.n	80003f2 <Motor_End+0x36>
		stopCount++;
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <Motor_End+0x50>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	3301      	adds	r3, #1
 80003e0:	4a0a      	ldr	r2, [pc, #40]	; (800040c <Motor_End+0x50>)
 80003e2:	6013      	str	r3, [r2, #0]
		if(stopCount >= 200){
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <Motor_End+0x50>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2bc7      	cmp	r3, #199	; 0xc7
 80003ea:	dd05      	ble.n	80003f8 <Motor_End+0x3c>
			MorterReset();
 80003ec:	f7ff ffc4 	bl	8000378 <MorterReset>
 80003f0:	e002      	b.n	80003f8 <Motor_End+0x3c>
		}
	}
	else stopCount = 0;
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <Motor_End+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
}
 80003f8:	bf00      	nop
 80003fa:	4618      	mov	r0, r3
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000108 	.word	0x20000108
 8000404:	200000f4 	.word	0x200000f4
 8000408:	20000000 	.word	0x20000000
 800040c:	20000110 	.word	0x20000110

08000410 <Filter_Init>:

int autoFlag = 0;
int stopFlag = 0;

CAN_FilterTypeDef filter;
void Filter_Init(){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	filter.FilterIdHigh         = 0;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <Filter_Init+0x4c>)
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
	filter.FilterIdLow          = 0;
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <Filter_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
	filter.FilterMaskIdHigh     = 0;
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <Filter_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow      = 0;
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <Filter_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	60da      	str	r2, [r3, #12]
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <Filter_Init+0x4c>)
 800042e:	2201      	movs	r2, #1
 8000430:	61da      	str	r2, [r3, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <Filter_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
	filter.FilterBank           = 0;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <Filter_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
	filter.FilterMode           = CAN_FILTERMODE_IDMASK;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <Filter_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
	filter.SlaveStartFilterBank = 14;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <Filter_Init+0x4c>)
 8000446:	220e      	movs	r2, #14
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
	filter.FilterActivation     = ENABLE;
 800044a:	4b04      	ldr	r3, [pc, #16]	; (800045c <Filter_Init+0x4c>)
 800044c:	2201      	movs	r2, #1
 800044e:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan, &filter);
 8000450:	4902      	ldr	r1, [pc, #8]	; (800045c <Filter_Init+0x4c>)
 8000452:	4803      	ldr	r0, [pc, #12]	; (8000460 <Filter_Init+0x50>)
 8000454:	f000 fdb3 	bl	8000fbe <HAL_CAN_ConfigFilter>
}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000118 	.word	0x20000118
 8000460:	2000002c 	.word	0x2000002c

08000464 <HAL_CAN_RxFifo0MsgPendingCallback>:

const long rotateVal= 76500;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08c      	sub	sp, #48	; 0x30
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 800046c:	f107 030c 	add.w	r3, r7, #12
 8000470:	f107 0214 	add.w	r2, r7, #20
 8000474:	2100      	movs	r1, #0
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 feaf 	bl	80011da <HAL_CAN_GetRxMessage>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d16c      	bne.n	800055c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
	{
		if(RxHeader.StdId==0x552){
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	f240 5252 	movw	r2, #1362	; 0x552
 8000488:	4293      	cmp	r3, r2
 800048a:	d167      	bne.n	800055c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
			id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d101      	bne.n	8000496 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	e000      	b.n	8000498 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 8000496:	69bb      	ldr	r3, [r7, #24]
 8000498:	4a32      	ldr	r2, [pc, #200]	; (8000564 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 800049a:	6013      	str	r3, [r2, #0]
			dlc = RxHeader.DLC;
 800049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049e:	4a32      	ldr	r2, [pc, #200]	; (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80004a0:	6013      	str	r3, [r2, #0]
			if(RxData[5]=='T'){
 80004a2:	7c7b      	ldrb	r3, [r7, #17]
 80004a4:	2b54      	cmp	r3, #84	; 0x54
 80004a6:	d103      	bne.n	80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
				autoFlag=1;
 80004a8:	4b30      	ldr	r3, [pc, #192]	; (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	e004      	b.n	80004ba <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
			}
			else{
				autoFlag=0;
 80004b0:	4b2e      	ldr	r3, [pc, #184]	; (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
				MorterReset();
 80004b6:	f7ff ff5f 	bl	8000378 <MorterReset>
			}

			if(RxData[0]=='L'){
 80004ba:	7b3b      	ldrb	r3, [r7, #12]
 80004bc:	2b4c      	cmp	r3, #76	; 0x4c
 80004be:	d113      	bne.n	80004e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
				if(autoFlag == 1){
 80004c0:	4b2a      	ldr	r3, [pc, #168]	; (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d104      	bne.n	80004d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
					Rotate_Init(rotateVal);
 80004c8:	4b29      	ldr	r3, [pc, #164]	; (8000570 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fea6 	bl	800021c <Rotate_Init>
 80004d0:	e02c      	b.n	800052c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
				}
				else {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2110      	movs	r1, #16
 80004d6:	4827      	ldr	r0, [pc, #156]	; (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80004d8:	f001 fc6a 	bl	8001db0 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 80004dc:	4b26      	ldr	r3, [pc, #152]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004e4:	639a      	str	r2, [r3, #56]	; 0x38
 80004e6:	e021      	b.n	800052c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
				}

				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
				//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 300);
			}
			else if(RxData[0]=='N'){
 80004e8:	7b3b      	ldrb	r3, [r7, #12]
 80004ea:	2b4e      	cmp	r3, #78	; 0x4e
 80004ec:	d107      	bne.n	80004fe <HAL_CAN_RxFifo0MsgPendingCallback+0x9a>
//				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
				if(autoFlag = 1)__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 80004ee:	4b1f      	ldr	r3, [pc, #124]	; (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2200      	movs	r2, #0
 80004fa:	639a      	str	r2, [r3, #56]	; 0x38
 80004fc:	e016      	b.n	800052c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
			}
			else if(RxData[0]=='R'){
 80004fe:	7b3b      	ldrb	r3, [r7, #12]
 8000500:	2b52      	cmp	r3, #82	; 0x52
 8000502:	d113      	bne.n	800052c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>

				if(autoFlag == 1){
 8000504:	4b19      	ldr	r3, [pc, #100]	; (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d105      	bne.n	8000518 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
					//Rotate_Init(_target);
					Rotate_Init(-1* rotateVal);
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800050e:	425b      	negs	r3, r3
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe83 	bl	800021c <Rotate_Init>
 8000516:	e009      	b.n	800052c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
				}
				else{
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2110      	movs	r1, #16
 800051c:	4815      	ldr	r0, [pc, #84]	; (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800051e:	f001 fc47 	bl	8001db0 <HAL_GPIO_WritePin>
					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800052a:	639a      	str	r2, [r3, #56]	; 0x38
				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
				//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 300);

			}

			data[0] = RxData[0];
 800052c:	7b3a      	ldrb	r2, [r7, #12]
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000530:	701a      	strb	r2, [r3, #0]
			data[1] = RxData[1];
 8000532:	7b7a      	ldrb	r2, [r7, #13]
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000536:	705a      	strb	r2, [r3, #1]
			data[2] = RxData[2];
 8000538:	7bba      	ldrb	r2, [r7, #14]
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800053c:	709a      	strb	r2, [r3, #2]
			data[3] = RxData[3];
 800053e:	7bfa      	ldrb	r2, [r7, #15]
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000542:	70da      	strb	r2, [r3, #3]
			data[4] = RxData[4];
 8000544:	7c3a      	ldrb	r2, [r7, #16]
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000548:	711a      	strb	r2, [r3, #4]
			data[5] = RxData[5];
 800054a:	7c7a      	ldrb	r2, [r7, #17]
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800054e:	715a      	strb	r2, [r3, #5]
			data[6] = RxData[6];
 8000550:	7cba      	ldrb	r2, [r7, #18]
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000554:	719a      	strb	r2, [r3, #6]
			data[7] = RxData[7];
 8000556:	7cfa      	ldrb	r2, [r7, #19]
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800055a:	71da      	strb	r2, [r3, #7]
		}
	}
}
 800055c:	bf00      	nop
 800055e:	3730      	adds	r7, #48	; 0x30
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000140 	.word	0x20000140
 8000568:	20000144 	.word	0x20000144
 800056c:	20000114 	.word	0x20000114
 8000570:	00012ad4 	.word	0x00012ad4
 8000574:	48000400 	.word	0x48000400
 8000578:	200000a0 	.word	0x200000a0
 800057c:	20000148 	.word	0x20000148

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fbba 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f8a4 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f9d4 	bl	8000938 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000590:	f000 f918 	bl	80007c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000594:	f000 f96a 	bl	800086c <MX_TIM3_Init>
  MX_CAN_Init();
 8000598:	f000 f8de 	bl	8000758 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  //char scnt[100];
  overflowcnt = 0;
 800059c:	4b41      	ldr	r3, [pc, #260]	; (80006a4 <main+0x124>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80005a2:	213c      	movs	r1, #60	; 0x3c
 80005a4:	4840      	ldr	r0, [pc, #256]	; (80006a8 <main+0x128>)
 80005a6:	f003 f885 	bl	80036b4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80005aa:	483f      	ldr	r0, [pc, #252]	; (80006a8 <main+0x128>)
 80005ac:	f002 fe3c 	bl	8003228 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan);
 80005b0:	483e      	ldr	r0, [pc, #248]	; (80006ac <main+0x12c>)
 80005b2:	f000 fdce 	bl	8001152 <HAL_CAN_Start>
  Filter_Init();
 80005b6:	f7ff ff2b 	bl	8000410 <Filter_Init>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005ba:	2102      	movs	r1, #2
 80005bc:	483b      	ldr	r0, [pc, #236]	; (80006ac <main+0x12c>)
 80005be:	f000 ff1e 	bl	80013fe <HAL_CAN_ActivateNotification>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005c2:	2104      	movs	r1, #4
 80005c4:	483a      	ldr	r0, [pc, #232]	; (80006b0 <main+0x130>)
 80005c6:	f002 fee3 	bl	8003390 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80005ca:	210c      	movs	r1, #12
 80005cc:	4838      	ldr	r0, [pc, #224]	; (80006b0 <main+0x130>)
 80005ce:	f002 fedf 	bl	8003390 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cnt = (long)(overflowcnt) * CntPeriod + (long)TIM2 -> CNT;//現在のcntを更新する
 80005d2:	4b34      	ldr	r3, [pc, #208]	; (80006a4 <main+0x124>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005da:	fb02 f303 	mul.w	r3, r2, r3
 80005de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80005e4:	4413      	add	r3, r2
 80005e6:	4a33      	ldr	r2, [pc, #204]	; (80006b4 <main+0x134>)
 80005e8:	6013      	str	r3, [r2, #0]
	  if(movingFlag == 1){
 80005ea:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <main+0x138>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d142      	bne.n	8000678 <main+0xf8>
		  Location +=  -1 * (cnt - precnt);
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <main+0x13c>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <main+0x134>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	1ad2      	subs	r2, r2, r3
 80005fc:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <main+0x140>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4413      	add	r3, r2
 8000602:	4a2f      	ldr	r2, [pc, #188]	; (80006c0 <main+0x140>)
 8000604:	6013      	str	r3, [r2, #0]
		  output = (long)Rotate_PID(Location, goal);//目標と現在地でPID制御
 8000606:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <main+0x140>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	ee07 3a90 	vmov	s15, r3
 800060e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000612:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <main+0x144>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	ee07 3a10 	vmov	s14, r3
 800061a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800061e:	eef0 0a47 	vmov.f32	s1, s14
 8000622:	eeb0 0a67 	vmov.f32	s0, s15
 8000626:	f7ff fe21 	bl	800026c <Rotate_PID>
 800062a:	eef0 7a40 	vmov.f32	s15, s0
 800062e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000632:	ee17 2a90 	vmov	r2, s15
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <main+0x148>)
 8000638:	601a      	str	r2, [r3, #0]
		  if(output<0){
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <main+0x148>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	da0a      	bge.n	8000658 <main+0xd8>
			  output*=-1;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <main+0x148>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	425b      	negs	r3, r3
 8000648:	4a1f      	ldr	r2, [pc, #124]	; (80006c8 <main+0x148>)
 800064a:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	481e      	ldr	r0, [pc, #120]	; (80006cc <main+0x14c>)
 8000652:	f001 fbad 	bl	8001db0 <HAL_GPIO_WritePin>
 8000656:	e004      	b.n	8000662 <main+0xe2>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	481b      	ldr	r0, [pc, #108]	; (80006cc <main+0x14c>)
 800065e:	f001 fba7 	bl	8001db0 <HAL_GPIO_WritePin>
		  }
		  if(output > 500) output = 500;
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <main+0x148>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800066a:	dd03      	ble.n	8000674 <main+0xf4>
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <main+0x148>)
 800066e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000672:	601a      	str	r2, [r3, #0]
		  Motor_End();
 8000674:	f7ff fea2 	bl	80003bc <Motor_End>
	  }
	  if(movingFlag == 0){
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <main+0x138>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <main+0x106>
		  output = 0;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <main+0x148>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
	  }
	  if(autoFlag == 1)__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, output);
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <main+0x150>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d104      	bne.n	8000698 <main+0x118>
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <main+0x148>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <main+0x130>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	639a      	str	r2, [r3, #56]	; 0x38

	  precnt = cnt;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <main+0x134>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <main+0x13c>)
 800069e:	6013      	str	r3, [r2, #0]
	  cnt = (long)(overflowcnt) * CntPeriod + (long)TIM2 -> CNT;//現在のcntを更新する
 80006a0:	e797      	b.n	80005d2 <main+0x52>
 80006a2:	bf00      	nop
 80006a4:	20000104 	.word	0x20000104
 80006a8:	20000054 	.word	0x20000054
 80006ac:	2000002c 	.word	0x2000002c
 80006b0:	200000a0 	.word	0x200000a0
 80006b4:	200000fc 	.word	0x200000fc
 80006b8:	2000010c 	.word	0x2000010c
 80006bc:	20000100 	.word	0x20000100
 80006c0:	20000108 	.word	0x20000108
 80006c4:	200000f4 	.word	0x200000f4
 80006c8:	200000f8 	.word	0x200000f8
 80006cc:	48000400 	.word	0x48000400
 80006d0:	20000114 	.word	0x20000114

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b090      	sub	sp, #64	; 0x40
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	2228      	movs	r2, #40	; 0x28
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fec4 	bl	8004470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fa:	2301      	movs	r3, #1
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fe:	2310      	movs	r3, #16
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000706:	2300      	movs	r3, #0
 8000708:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800070a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fb63 	bl	8001de0 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000720:	f000 f960 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2102      	movs	r1, #2
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fb8c 	bl	8002e5c <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800074a:	f000 f94b 	bl	80009e4 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3740      	adds	r7, #64	; 0x40
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_CAN_Init+0x64>)
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <MX_CAN_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_CAN_Init+0x64>)
 8000764:	2204      	movs	r2, #4
 8000766:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_CAN_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_CAN_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_CAN_Init+0x64>)
 8000776:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800077a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_CAN_Init+0x64>)
 800077e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000782:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_CAN_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_CAN_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_CAN_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_CAN_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_CAN_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_CAN_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_CAN_Init+0x64>)
 80007aa:	f000 fb0d 	bl	8000dc8 <HAL_CAN_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 f916 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000002c 	.word	0x2000002c
 80007c0:	40006400 	.word	0x40006400

080007c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2224      	movs	r2, #36	; 0x24
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 fe4c 	bl	8004470 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800080a:	2303      	movs	r3, #3
 800080c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000812:	2301      	movs	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000822:	2301      	movs	r3, #1
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000836:	f002 fe97 	bl	8003568 <HAL_TIM_Encoder_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000840:	f000 f8d0 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000852:	f003 fd5d 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800085c:	f000 f8c2 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3730      	adds	r7, #48	; 0x30
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000054 	.word	0x20000054

0800086c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_TIM3_Init+0xc4>)
 8000892:	4a28      	ldr	r2, [pc, #160]	; (8000934 <MX_TIM3_Init+0xc8>)
 8000894:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_TIM3_Init+0xc4>)
 8000898:	221f      	movs	r2, #31
 800089a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_TIM3_Init+0xc4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_TIM3_Init+0xc4>)
 80008a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_TIM3_Init+0xc4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_TIM3_Init+0xc4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008b6:	481e      	ldr	r0, [pc, #120]	; (8000930 <MX_TIM3_Init+0xc4>)
 80008b8:	f002 fd12 	bl	80032e0 <HAL_TIM_PWM_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80008c2:	f000 f88f 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4816      	ldr	r0, [pc, #88]	; (8000930 <MX_TIM3_Init+0xc4>)
 80008d6:	f003 fd1b 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008e0:	f000 f880 	bl	80009e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e4:	2360      	movs	r3, #96	; 0x60
 80008e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2204      	movs	r2, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_TIM3_Init+0xc4>)
 80008fc:	f003 f888 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000906:	f000 f86d 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	220c      	movs	r2, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_TIM3_Init+0xc4>)
 8000912:	f003 f87d 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800091c:	f000 f862 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_TIM3_Init+0xc4>)
 8000922:	f000 f93d 	bl	8000ba0 <HAL_TIM_MspPostInit>

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000a0 	.word	0x200000a0
 8000934:	40000400 	.word	0x40000400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <MX_GPIO_Init+0xa4>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a22      	ldr	r2, [pc, #136]	; (80009dc <MX_GPIO_Init+0xa4>)
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_GPIO_Init+0xa4>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_GPIO_Init+0xa4>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a1c      	ldr	r2, [pc, #112]	; (80009dc <MX_GPIO_Init+0xa4>)
 800096c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_GPIO_Init+0xa4>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f001 fa12 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2110      	movs	r1, #16
 8000990:	4813      	ldr	r0, [pc, #76]	; (80009e0 <MX_GPIO_Init+0xa8>)
 8000992:	f001 fa0d 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f001 f88b 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009b6:	2310      	movs	r3, #16
 80009b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	4619      	mov	r1, r3
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_GPIO_Init+0xa8>)
 80009ce:	f001 f87d 	bl	8001acc <HAL_GPIO_Init>

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000400 	.word	0x48000400

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_MspInit+0x44>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <HAL_MspInit+0x44>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6193      	str	r3, [r2, #24]
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_MspInit+0x44>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x44>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x44>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x44>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <HAL_CAN_MspInit+0x90>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d131      	bne.n	8000abe <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a15      	ldr	r2, [pc, #84]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a9c:	2309      	movs	r3, #9
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f001 f80f 	bl	8001acc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2014      	movs	r0, #20
 8000ab4:	f000 ffd3 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000ab8:	2014      	movs	r0, #20
 8000aba:	f000 ffec 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40006400 	.word	0x40006400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af0:	d130      	bne.n	8000b54 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	6153      	str	r3, [r2, #20]
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b22:	2303      	movs	r3, #3
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b32:	2301      	movs	r3, #1
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f000 ffc4 	bl	8001acc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	201c      	movs	r0, #28
 8000b4a:	f000 ff88 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b4e:	201c      	movs	r0, #28
 8000b50:	f000 ffa1 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_TIM_PWM_MspInit+0x38>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10b      	bne.n	8000b8a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40000400 	.word	0x40000400
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <HAL_TIM_MspPostInit+0x64>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d11b      	bne.n	8000bfa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_TIM_MspPostInit+0x68>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_TIM_MspPostInit+0x68>)
 8000bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_TIM_MspPostInit+0x68>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000bda:	2322      	movs	r3, #34	; 0x22
 8000bdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_TIM_MspPostInit+0x6c>)
 8000bf6:	f000 ff69 	bl	8001acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40000400 	.word	0x40000400
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000400 	.word	0x48000400

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f894 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <CAN_RX0_IRQHandler+0x10>)
 8000c6a:	f000 fbee 	bl	800144a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000002c 	.word	0x2000002c

08000c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <TIM2_IRQHandler+0x10>)
 8000c7e:	f002 fda7 	bl	80037d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000054 	.word	0x20000054

08000c8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:
	.type	Reset_Handler, %function
Reset_Handler:
//112  ldr   sp, =_estack    /* Atollic update: set stack pointer */

/* Copy the data segment initializers from flash to SRAM */
	  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <LoopForever+0x2>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	; (8000ce8 <LoopForever+0x6>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <LoopForever+0xa>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <LoopForever+0xe>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	; (8000cf4 <LoopForever+0x12>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cd6:	f7ff ffd9 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f003 fba5 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cde:	f7ff fc4f 	bl	8000580 <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
	  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cec:	080044d0 	.word	0x080044d0
  ldr r2, =_sbss
 8000cf0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cf4:	20000154 	.word	0x20000154

08000cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC1_2_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x28>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x28>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 fe9b 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	200f      	movs	r0, #15
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fe6a 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40022000 	.word	0x40022000

08000d28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 feb3 	bl	8001ab2 <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 fe7b 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000004 	.word	0x20000004
 8000d80:	2000000c 	.word	0x2000000c
 8000d84:	20000008 	.word	0x20000008

08000d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	20000150 	.word	0x20000150

08000db0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000150 	.word	0x20000150

08000dc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e0ed      	b.n	8000fb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fe26 	bl	8000a38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f042 0201 	orr.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dfc:	f7ff ffd8 	bl	8000db0 <HAL_GetTick>
 8000e00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e02:	e012      	b.n	8000e2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e04:	f7ff ffd4 	bl	8000db0 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b0a      	cmp	r3, #10
 8000e10:	d90b      	bls.n	8000e2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2205      	movs	r2, #5
 8000e22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e0c5      	b.n	8000fb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0e5      	beq.n	8000e04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0202 	bic.w	r2, r2, #2
 8000e46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e48:	f7ff ffb2 	bl	8000db0 <HAL_GetTick>
 8000e4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e4e:	e012      	b.n	8000e76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e50:	f7ff ffae 	bl	8000db0 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d90b      	bls.n	8000e76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e09f      	b.n	8000fb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1e5      	bne.n	8000e50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7e1b      	ldrb	r3, [r3, #24]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d108      	bne.n	8000e9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e007      	b.n	8000eae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7e5b      	ldrb	r3, [r3, #25]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e007      	b.n	8000ed8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7e9b      	ldrb	r3, [r3, #26]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d108      	bne.n	8000ef2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0220 	orr.w	r2, r2, #32
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e007      	b.n	8000f02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0220 	bic.w	r2, r2, #32
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7edb      	ldrb	r3, [r3, #27]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0210 	bic.w	r2, r2, #16
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e007      	b.n	8000f2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0210 	orr.w	r2, r2, #16
 8000f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7f1b      	ldrb	r3, [r3, #28]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d108      	bne.n	8000f46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0208 	orr.w	r2, r2, #8
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e007      	b.n	8000f56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0208 	bic.w	r2, r2, #8
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7f5b      	ldrb	r3, [r3, #29]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d108      	bne.n	8000f70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0204 	orr.w	r2, r2, #4
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e007      	b.n	8000f80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0204 	bic.w	r2, r2, #4
 8000f7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	ea42 0103 	orr.w	r1, r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	1e5a      	subs	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b087      	sub	sp, #28
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fd4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fd6:	7cfb      	ldrb	r3, [r7, #19]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d003      	beq.n	8000fe4 <HAL_CAN_ConfigFilter+0x26>
 8000fdc:	7cfb      	ldrb	r3, [r7, #19]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	f040 80aa 	bne.w	8001138 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fea:	f043 0201 	orr.w	r2, r3, #1
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d123      	bne.n	8001066 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	401a      	ands	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001040:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3248      	adds	r2, #72	; 0x48
 8001046:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800105a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800105c:	6979      	ldr	r1, [r7, #20]
 800105e:	3348      	adds	r3, #72	; 0x48
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d122      	bne.n	80010b4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	431a      	orrs	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800108e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3248      	adds	r2, #72	; 0x48
 8001094:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010aa:	6979      	ldr	r1, [r7, #20]
 80010ac:	3348      	adds	r3, #72	; 0x48
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	440b      	add	r3, r1
 80010b2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d109      	bne.n	80010d0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010ce:	e007      	b.n	80010e0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	431a      	orrs	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d109      	bne.n	80010fc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010fa:	e007      	b.n	800110c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	431a      	orrs	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d107      	bne.n	8001124 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	431a      	orrs	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800112a:	f023 0201 	bic.w	r2, r3, #1
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	e006      	b.n	8001146 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
  }
}
 8001146:	4618      	mov	r0, r3
 8001148:	371c      	adds	r7, #28
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d12e      	bne.n	80011c4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2202      	movs	r2, #2
 800116a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0201 	bic.w	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800117e:	f7ff fe17 	bl	8000db0 <HAL_GetTick>
 8001182:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001184:	e012      	b.n	80011ac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001186:	f7ff fe13 	bl	8000db0 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b0a      	cmp	r3, #10
 8001192:	d90b      	bls.n	80011ac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2205      	movs	r2, #5
 80011a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e012      	b.n	80011d2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1e5      	bne.n	8001186 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e006      	b.n	80011d2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
  }
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011da:	b480      	push	{r7}
 80011dc:	b087      	sub	sp, #28
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d003      	beq.n	80011fe <HAL_CAN_GetRxMessage+0x24>
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	f040 80f3 	bne.w	80013e4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10e      	bne.n	8001222 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d116      	bne.n	8001240 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e0e7      	b.n	80013f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d107      	bne.n	8001240 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0d8      	b.n	80013f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	331b      	adds	r3, #27
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0204 	and.w	r2, r3, #4
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	331b      	adds	r3, #27
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4413      	add	r3, r2
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	0d5b      	lsrs	r3, r3, #21
 800126e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e00b      	b.n	8001290 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	331b      	adds	r3, #27
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	331b      	adds	r3, #27
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0202 	and.w	r2, r3, #2
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	331b      	adds	r3, #27
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	4413      	add	r3, r2
 80012b2:	3304      	adds	r3, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 020f 	and.w	r2, r3, #15
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	331b      	adds	r3, #27
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	4413      	add	r3, r2
 80012ca:	3304      	adds	r3, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	331b      	adds	r3, #27
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	3304      	adds	r3, #4
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	0c1b      	lsrs	r3, r3, #16
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4413      	add	r3, r2
 80012f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	4413      	add	r3, r2
 800130e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	0a1a      	lsrs	r2, r3, #8
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	4413      	add	r3, r2
 8001328:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0c1a      	lsrs	r2, r3, #16
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3302      	adds	r3, #2
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	4413      	add	r3, r2
 8001342:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	0e1a      	lsrs	r2, r3, #24
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3303      	adds	r3, #3
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	3304      	adds	r3, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4413      	add	r3, r2
 8001374:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	0a1a      	lsrs	r2, r3, #8
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	3305      	adds	r3, #5
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	4413      	add	r3, r2
 800138e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	0c1a      	lsrs	r2, r3, #16
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3306      	adds	r3, #6
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4413      	add	r3, r2
 80013a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	0e1a      	lsrs	r2, r3, #24
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	3307      	adds	r3, #7
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d108      	bne.n	80013d0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f042 0220 	orr.w	r2, r2, #32
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	e007      	b.n	80013e0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691a      	ldr	r2, [r3, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0220 	orr.w	r2, r2, #32
 80013de:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e006      	b.n	80013f2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
  }
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d002      	beq.n	800141c <HAL_CAN_ActivateNotification+0x1e>
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d109      	bne.n	8001430 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6959      	ldr	r1, [r3, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	e006      	b.n	800143e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
  }
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b08a      	sub	sp, #40	; 0x28
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d07c      	beq.n	800158a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d023      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2201      	movs	r2, #1
 80014a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f983 	bl	80017b8 <HAL_CAN_TxMailbox0CompleteCallback>
 80014b2:	e016      	b.n	80014e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
 80014c6:	e00c      	b.n	80014e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
 80014da:	e002      	b.n	80014e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f989 	bl	80017f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d024      	beq.n	8001536 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f963 	bl	80017cc <HAL_CAN_TxMailbox1CompleteCallback>
 8001506:	e016      	b.n	8001536 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
 800151a:	e00c      	b.n	8001536 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	e002      	b.n	8001536 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f969 	bl	8001808 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d024      	beq.n	800158a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001548:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f943 	bl	80017e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800155a:	e016      	b.n	800158a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	e00c      	b.n	800158a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
 8001582:	e002      	b.n	800158a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f949 	bl	800181c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00c      	beq.n	80015ae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	d007      	beq.n	80015ae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2210      	movs	r2, #16
 80015ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00b      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2208      	movs	r2, #8
 80015c8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f930 	bl	8001830 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7fe ff3b 	bl	8000464 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00c      	beq.n	8001612 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001608:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2210      	movs	r2, #16
 8001610:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00b      	beq.n	8001634 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2208      	movs	r2, #8
 800162c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f912 	bl	8001858 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	2b00      	cmp	r3, #0
 800163c:	d009      	beq.n	8001652 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f8f9 	bl	8001844 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00b      	beq.n	8001674 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2210      	movs	r2, #16
 800166c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f8fc 	bl	800186c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2208      	movs	r2, #8
 800168e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f8f5 	bl	8001880 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d07b      	beq.n	8001798 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d072      	beq.n	8001790 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001704:	2b00      	cmp	r3, #0
 8001706:	d043      	beq.n	8001790 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800170e:	2b00      	cmp	r3, #0
 8001710:	d03e      	beq.n	8001790 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001718:	2b60      	cmp	r3, #96	; 0x60
 800171a:	d02b      	beq.n	8001774 <HAL_CAN_IRQHandler+0x32a>
 800171c:	2b60      	cmp	r3, #96	; 0x60
 800171e:	d82e      	bhi.n	800177e <HAL_CAN_IRQHandler+0x334>
 8001720:	2b50      	cmp	r3, #80	; 0x50
 8001722:	d022      	beq.n	800176a <HAL_CAN_IRQHandler+0x320>
 8001724:	2b50      	cmp	r3, #80	; 0x50
 8001726:	d82a      	bhi.n	800177e <HAL_CAN_IRQHandler+0x334>
 8001728:	2b40      	cmp	r3, #64	; 0x40
 800172a:	d019      	beq.n	8001760 <HAL_CAN_IRQHandler+0x316>
 800172c:	2b40      	cmp	r3, #64	; 0x40
 800172e:	d826      	bhi.n	800177e <HAL_CAN_IRQHandler+0x334>
 8001730:	2b30      	cmp	r3, #48	; 0x30
 8001732:	d010      	beq.n	8001756 <HAL_CAN_IRQHandler+0x30c>
 8001734:	2b30      	cmp	r3, #48	; 0x30
 8001736:	d822      	bhi.n	800177e <HAL_CAN_IRQHandler+0x334>
 8001738:	2b10      	cmp	r3, #16
 800173a:	d002      	beq.n	8001742 <HAL_CAN_IRQHandler+0x2f8>
 800173c:	2b20      	cmp	r3, #32
 800173e:	d005      	beq.n	800174c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001740:	e01d      	b.n	800177e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800174a:	e019      	b.n	8001780 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	f043 0310 	orr.w	r3, r3, #16
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001754:	e014      	b.n	8001780 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	f043 0320 	orr.w	r3, r3, #32
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800175e:	e00f      	b.n	8001780 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001768:	e00a      	b.n	8001780 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001772:	e005      	b.n	8001780 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800177c:	e000      	b.n	8001780 <HAL_CAN_IRQHandler+0x336>
            break;
 800177e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800178e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2204      	movs	r2, #4
 8001796:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	2b00      	cmp	r3, #0
 800179c:	d008      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f872 	bl	8001894 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	; 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff29 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff3e 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff8e 	bl	800199c <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5d 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff31 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa2 	bl	8001a04 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ada:	e14e      	b.n	8001d7a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8140 	beq.w	8001d74 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d005      	beq.n	8001b0c <HAL_GPIO_Init+0x40>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d130      	bne.n	8001b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b42:	2201      	movs	r2, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 0201 	and.w	r2, r3, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d017      	beq.n	8001baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d123      	bne.n	8001bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	6939      	ldr	r1, [r7, #16]
 8001bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0203 	and.w	r2, r3, #3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 809a 	beq.w	8001d74 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c40:	4b55      	ldr	r3, [pc, #340]	; (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a54      	ldr	r2, [pc, #336]	; (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b52      	ldr	r3, [pc, #328]	; (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c58:	4a50      	ldr	r2, [pc, #320]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c82:	d013      	beq.n	8001cac <HAL_GPIO_Init+0x1e0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a46      	ldr	r2, [pc, #280]	; (8001da0 <HAL_GPIO_Init+0x2d4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_GPIO_Init+0x1dc>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a45      	ldr	r2, [pc, #276]	; (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0x1d8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a44      	ldr	r2, [pc, #272]	; (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_GPIO_Init+0x1d4>
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e006      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca0:	2305      	movs	r3, #5
 8001ca2:	e004      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001cac:	2300      	movs	r3, #0
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cbe:	4937      	ldr	r1, [pc, #220]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ccc:	4b37      	ldr	r3, [pc, #220]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cf0:	4a2e      	ldr	r2, [pc, #184]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d1a:	4a24      	ldr	r2, [pc, #144]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d6e:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f47f aea9 	bne.w	8001adc <HAL_GPIO_Init+0x10>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	48000400 	.word	0x48000400
 8001da4:	48000800 	.word	0x48000800
 8001da8:	48000c00 	.word	0x48000c00
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f001 b823 	b.w	8002e4c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 817d 	beq.w	8002116 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e1c:	4bbc      	ldr	r3, [pc, #752]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d00c      	beq.n	8001e42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e28:	4bb9      	ldr	r3, [pc, #740]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d15c      	bne.n	8001eee <HAL_RCC_OscConfig+0x10e>
 8001e34:	4bb6      	ldr	r3, [pc, #728]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e40:	d155      	bne.n	8001eee <HAL_RCC_OscConfig+0x10e>
 8001e42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_OscConfig+0x94>
 8001e6e:	4ba8      	ldr	r3, [pc, #672]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e015      	b.n	8001ea0 <HAL_RCC_OscConfig+0xc0>
 8001e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e90:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e9c:	4b9c      	ldr	r3, [pc, #624]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ea8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001eac:	fa92 f2a2 	rbit	r2, r2
 8001eb0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001eb4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001eb8:	fab2 f282 	clz	r2, r2
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f042 0220 	orr.w	r2, r2, #32
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f002 021f 	and.w	r2, r2, #31
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 811f 	beq.w	8002114 <HAL_RCC_OscConfig+0x334>
 8001ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 8116 	bne.w	8002114 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f000 bfaf 	b.w	8002e4c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12e>
 8001f00:	4b83      	ldr	r3, [pc, #524]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a82      	ldr	r2, [pc, #520]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	e036      	b.n	8001f7c <HAL_RCC_OscConfig+0x19c>
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x158>
 8001f1e:	4b7c      	ldr	r3, [pc, #496]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7b      	ldr	r2, [pc, #492]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b79      	ldr	r3, [pc, #484]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a78      	ldr	r2, [pc, #480]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e021      	b.n	8001f7c <HAL_RCC_OscConfig+0x19c>
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x184>
 8001f4a:	4b71      	ldr	r3, [pc, #452]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a70      	ldr	r2, [pc, #448]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b6e      	ldr	r3, [pc, #440]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a6d      	ldr	r2, [pc, #436]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0x19c>
 8001f64:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a69      	ldr	r2, [pc, #420]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b67      	ldr	r3, [pc, #412]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a66      	ldr	r2, [pc, #408]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f7c:	4b64      	ldr	r3, [pc, #400]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	f023 020f 	bic.w	r2, r3, #15
 8001f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	495f      	ldr	r1, [pc, #380]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d059      	beq.n	800205a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7fe ff03 	bl	8000db0 <HAL_GetTick>
 8001faa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7fe fefe 	bl	8000db0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b64      	cmp	r3, #100	; 0x64
 8001fbe:	d902      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	f000 bf43 	b.w	8002e4c <HAL_RCC_OscConfig+0x106c>
 8001fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001fda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d102      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x218>
 8001ff2:	4b47      	ldr	r3, [pc, #284]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	e015      	b.n	8002024 <HAL_RCC_OscConfig+0x244>
 8001ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800200c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002010:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002014:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002028:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800202c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002030:	fa92 f2a2 	rbit	r2, r2
 8002034:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002038:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f002 021f 	and.w	r2, r2, #31
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ab      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x1d0>
 8002058:	e05d      	b.n	8002116 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7fe fea9 	bl	8000db0 <HAL_GetTick>
 800205e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002062:	e00a      	b.n	800207a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002064:	f7fe fea4 	bl	8000db0 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b64      	cmp	r3, #100	; 0x64
 8002072:	d902      	bls.n	800207a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	f000 bee9 	b.w	8002e4c <HAL_RCC_OscConfig+0x106c>
 800207a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800208e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_OscConfig+0x2cc>
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	e015      	b.n	80020d8 <HAL_RCC_OscConfig+0x2f8>
 80020ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80020c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_RCC_OscConfig+0x330>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020dc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80020e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020e4:	fa92 f2a2 	rbit	r2, r2
 80020e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80020ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80020f0:	fab2 f282 	clz	r2, r2
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	f042 0220 	orr.w	r2, r2, #32
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f002 021f 	and.w	r2, r2, #31
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f202 	lsl.w	r2, r1, r2
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1ab      	bne.n	8002064 <HAL_RCC_OscConfig+0x284>
 800210c:	e003      	b.n	8002116 <HAL_RCC_OscConfig+0x336>
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 817d 	beq.w	8002426 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800212c:	4ba6      	ldr	r3, [pc, #664]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00b      	beq.n	8002150 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002138:	4ba3      	ldr	r3, [pc, #652]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d172      	bne.n	800222a <HAL_RCC_OscConfig+0x44a>
 8002144:	4ba0      	ldr	r3, [pc, #640]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d16c      	bne.n	800222a <HAL_RCC_OscConfig+0x44a>
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002162:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_RCC_OscConfig+0x3a0>
 800217a:	4b93      	ldr	r3, [pc, #588]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	e013      	b.n	80021a8 <HAL_RCC_OscConfig+0x3c8>
 8002180:	2302      	movs	r3, #2
 8002182:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002192:	2302      	movs	r3, #2
 8002194:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002198:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80021a4:	4b88      	ldr	r3, [pc, #544]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	2202      	movs	r2, #2
 80021aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80021ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80021b2:	fa92 f2a2 	rbit	r2, r2
 80021b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80021ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80021be:	fab2 f282 	clz	r2, r2
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	f042 0220 	orr.w	r2, r2, #32
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	f002 021f 	and.w	r2, r2, #31
 80021ce:	2101      	movs	r1, #1
 80021d0:	fa01 f202 	lsl.w	r2, r1, r2
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCC_OscConfig+0x410>
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f000 be2e 	b.w	8002e4c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b75      	ldr	r3, [pc, #468]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	21f8      	movs	r1, #248	; 0xf8
 8002206:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800220e:	fa91 f1a1 	rbit	r1, r1
 8002212:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002216:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800221a:	fab1 f181 	clz	r1, r1
 800221e:	b2c9      	uxtb	r1, r1
 8002220:	408b      	lsls	r3, r1
 8002222:	4969      	ldr	r1, [pc, #420]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002228:	e0fd      	b.n	8002426 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8088 	beq.w	800234c <HAL_RCC_OscConfig+0x56c>
 800223c:	2301      	movs	r3, #1
 800223e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800224e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800225c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	461a      	mov	r2, r3
 8002264:	2301      	movs	r3, #1
 8002266:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe fda2 	bl	8000db0 <HAL_GetTick>
 800226c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002272:	f7fe fd9d 	bl	8000db0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d902      	bls.n	8002288 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	f000 bde2 	b.w	8002e4c <HAL_RCC_OscConfig+0x106c>
 8002288:	2302      	movs	r3, #2
 800228a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800229a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4d8>
 80022b2:	4b45      	ldr	r3, [pc, #276]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	e013      	b.n	80022e0 <HAL_RCC_OscConfig+0x500>
 80022b8:	2302      	movs	r3, #2
 80022ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80022ca:	2302      	movs	r3, #2
 80022cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80022d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80022dc:	4b3a      	ldr	r3, [pc, #232]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	2202      	movs	r2, #2
 80022e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80022e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022ea:	fa92 f2a2 	rbit	r2, r2
 80022ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80022f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80022f6:	fab2 f282 	clz	r2, r2
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	f042 0220 	orr.w	r2, r2, #32
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	f002 021f 	and.w	r2, r2, #31
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f202 	lsl.w	r2, r1, r2
 800230c:	4013      	ands	r3, r2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0af      	beq.n	8002272 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	21f8      	movs	r1, #248	; 0xf8
 8002328:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002330:	fa91 f1a1 	rbit	r1, r1
 8002334:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002338:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800233c:	fab1 f181 	clz	r1, r1
 8002340:	b2c9      	uxtb	r1, r1
 8002342:	408b      	lsls	r3, r1
 8002344:	4920      	ldr	r1, [pc, #128]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
 800234a:	e06c      	b.n	8002426 <HAL_RCC_OscConfig+0x646>
 800234c:	2301      	movs	r3, #1
 800234e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800235e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800236c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	461a      	mov	r2, r3
 8002374:	2300      	movs	r3, #0
 8002376:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fd1a 	bl	8000db0 <HAL_GetTick>
 800237c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002382:	f7fe fd15 	bl	8000db0 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d902      	bls.n	8002398 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	f000 bd5a 	b.w	8002e4c <HAL_RCC_OscConfig+0x106c>
 8002398:	2302      	movs	r3, #2
 800239a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80023aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d104      	bne.n	80023cc <HAL_RCC_OscConfig+0x5ec>
 80023c2:	4b01      	ldr	r3, [pc, #4]	; (80023c8 <HAL_RCC_OscConfig+0x5e8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	e015      	b.n	80023f4 <HAL_RCC_OscConfig+0x614>
 80023c8:	40021000 	.word	0x40021000
 80023cc:	2302      	movs	r3, #2
 80023ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80023de:	2302      	movs	r3, #2
 80023e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80023f0:	4bc8      	ldr	r3, [pc, #800]	; (8002714 <HAL_RCC_OscConfig+0x934>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2202      	movs	r2, #2
 80023f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80023fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023fe:	fa92 f2a2 	rbit	r2, r2
 8002402:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002406:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800240a:	fab2 f282 	clz	r2, r2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f042 0220 	orr.w	r2, r2, #32
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	f002 021f 	and.w	r2, r2, #31
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ad      	bne.n	8002382 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8110 	beq.w	800265c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d079      	beq.n	8002540 <HAL_RCC_OscConfig+0x760>
 800244c:	2301      	movs	r3, #1
 800244e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800245e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	4bab      	ldr	r3, [pc, #684]	; (8002718 <HAL_RCC_OscConfig+0x938>)
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	461a      	mov	r2, r3
 8002472:	2301      	movs	r3, #1
 8002474:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7fe fc9b 	bl	8000db0 <HAL_GetTick>
 800247a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002480:	f7fe fc96 	bl	8000db0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d902      	bls.n	8002496 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	f000 bcdb 	b.w	8002e4c <HAL_RCC_OscConfig+0x106c>
 8002496:	2302      	movs	r3, #2
 8002498:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024b0:	2202      	movs	r2, #2
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024d4:	2202      	movs	r2, #2
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f0:	4b88      	ldr	r3, [pc, #544]	; (8002714 <HAL_RCC_OscConfig+0x934>)
 80024f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024fc:	2102      	movs	r1, #2
 80024fe:	6019      	str	r1, [r3, #0]
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f1a3 	rbit	r1, r3
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002516:	6019      	str	r1, [r3, #0]
  return result;
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2101      	movs	r1, #1
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0a0      	beq.n	8002480 <HAL_RCC_OscConfig+0x6a0>
 800253e:	e08d      	b.n	800265c <HAL_RCC_OscConfig+0x87c>
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002562:	601a      	str	r2, [r3, #0]
  return result;
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800256c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	4b68      	ldr	r3, [pc, #416]	; (8002718 <HAL_RCC_OscConfig+0x938>)
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	461a      	mov	r2, r3
 800257e:	2300      	movs	r3, #0
 8002580:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7fe fc15 	bl	8000db0 <HAL_GetTick>
 8002586:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258c:	f7fe fc10 	bl	8000db0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d902      	bls.n	80025a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	f000 bc55 	b.w	8002e4c <HAL_RCC_OscConfig+0x106c>
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025aa:	2202      	movs	r2, #2
 80025ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f2a3 	rbit	r2, r3
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80025ce:	2202      	movs	r2, #2
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f2a3 	rbit	r2, r3
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025f2:	2202      	movs	r2, #2
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	fa93 f2a3 	rbit	r2, r3
 8002604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002608:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800260c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCC_OscConfig+0x934>)
 8002610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800261a:	2102      	movs	r1, #2
 800261c:	6019      	str	r1, [r3, #0]
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	fa93 f1a3 	rbit	r1, r3
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002634:	6019      	str	r1, [r3, #0]
  return result;
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d197      	bne.n	800258c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 81a1 	beq.w	80029b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_RCC_OscConfig+0x934>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d116      	bne.n	80026b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_RCC_OscConfig+0x934>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4a22      	ldr	r2, [pc, #136]	; (8002714 <HAL_RCC_OscConfig+0x934>)
 800268a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268e:	61d3      	str	r3, [r2, #28]
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_RCC_OscConfig+0x934>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80026aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_RCC_OscConfig+0x93c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11a      	bne.n	80026f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_RCC_OscConfig+0x93c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a16      	ldr	r2, [pc, #88]	; (800271c <HAL_RCC_OscConfig+0x93c>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7fe fb71 	bl	8000db0 <HAL_GetTick>
 80026ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	e009      	b.n	80026e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d4:	f7fe fb6c 	bl	8000db0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b64      	cmp	r3, #100	; 0x64
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e3b1      	b.n	8002e4c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_RCC_OscConfig+0x93c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ef      	beq.n	80026d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d10d      	bne.n	8002720 <HAL_RCC_OscConfig+0x940>
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_RCC_OscConfig+0x934>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a02      	ldr	r2, [pc, #8]	; (8002714 <HAL_RCC_OscConfig+0x934>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e03c      	b.n	800278c <HAL_RCC_OscConfig+0x9ac>
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	10908120 	.word	0x10908120
 800271c:	40007000 	.word	0x40007000
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x96a>
 8002730:	4bc1      	ldr	r3, [pc, #772]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4ac0      	ldr	r2, [pc, #768]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	4bbe      	ldr	r3, [pc, #760]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4abd      	ldr	r2, [pc, #756]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 8002742:	f023 0304 	bic.w	r3, r3, #4
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	e020      	b.n	800278c <HAL_RCC_OscConfig+0x9ac>
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x994>
 800275a:	4bb7      	ldr	r3, [pc, #732]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4ab6      	ldr	r2, [pc, #728]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	6213      	str	r3, [r2, #32]
 8002766:	4bb4      	ldr	r3, [pc, #720]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4ab3      	ldr	r2, [pc, #716]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0x9ac>
 8002774:	4bb0      	ldr	r3, [pc, #704]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4aaf      	ldr	r2, [pc, #700]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	6213      	str	r3, [r2, #32]
 8002780:	4bad      	ldr	r3, [pc, #692]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4aac      	ldr	r2, [pc, #688]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 8002786:	f023 0304 	bic.w	r3, r3, #4
 800278a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8081 	beq.w	80028a0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7fe fb07 	bl	8000db0 <HAL_GetTick>
 80027a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe fb02 	bl	8000db0 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e345      	b.n	8002e4c <HAL_RCC_OscConfig+0x106c>
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027c8:	2202      	movs	r2, #2
 80027ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	fa93 f2a3 	rbit	r2, r3
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027ec:	2202      	movs	r2, #2
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	fa93 f2a3 	rbit	r2, r3
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002806:	601a      	str	r2, [r3, #0]
  return result;
 8002808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002810:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d102      	bne.n	800282c <HAL_RCC_OscConfig+0xa4c>
 8002826:	4b84      	ldr	r3, [pc, #528]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	e013      	b.n	8002854 <HAL_RCC_OscConfig+0xa74>
 800282c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002830:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002834:	2202      	movs	r2, #2
 8002836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	fa93 f2a3 	rbit	r2, r3
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	4b79      	ldr	r3, [pc, #484]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002858:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800285c:	2102      	movs	r1, #2
 800285e:	6011      	str	r1, [r2, #0]
 8002860:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002864:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	fa92 f1a2 	rbit	r1, r2
 800286e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002872:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002876:	6011      	str	r1, [r2, #0]
  return result;
 8002878:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	fab2 f282 	clz	r2, r2
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f002 021f 	and.w	r2, r2, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d084      	beq.n	80027a8 <HAL_RCC_OscConfig+0x9c8>
 800289e:	e07f      	b.n	80029a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a0:	f7fe fa86 	bl	8000db0 <HAL_GetTick>
 80028a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a8:	e00b      	b.n	80028c2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe fa81 	bl	8000db0 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e2c4      	b.n	8002e4c <HAL_RCC_OscConfig+0x106c>
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80028ca:	2202      	movs	r2, #2
 80028cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	fa93 f2a3 	rbit	r2, r3
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028ee:	2202      	movs	r2, #2
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	fa93 f2a3 	rbit	r2, r3
 8002900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002904:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002908:	601a      	str	r2, [r3, #0]
  return result;
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002912:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f043 0302 	orr.w	r3, r3, #2
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d102      	bne.n	800292e <HAL_RCC_OscConfig+0xb4e>
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	e013      	b.n	8002956 <HAL_RCC_OscConfig+0xb76>
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002936:	2202      	movs	r2, #2
 8002938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	fa93 f2a3 	rbit	r2, r3
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800295a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800295e:	2102      	movs	r1, #2
 8002960:	6011      	str	r1, [r2, #0]
 8002962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002966:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	fa92 f1a2 	rbit	r1, r2
 8002970:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002974:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002978:	6011      	str	r1, [r2, #0]
  return result;
 800297a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800297e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	fab2 f282 	clz	r2, r2
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	f002 021f 	and.w	r2, r2, #31
 8002994:	2101      	movs	r1, #1
 8002996:	fa01 f202 	lsl.w	r2, r1, r2
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d184      	bne.n	80028aa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a8:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	4a22      	ldr	r2, [pc, #136]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 80029ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8242 	beq.w	8002e4a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c6:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <HAL_RCC_OscConfig+0xc58>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	f000 8213 	beq.w	8002dfa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	f040 8162 	bne.w	8002caa <HAL_RCC_OscConfig+0xeca>
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80029ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f2a3 	rbit	r2, r3
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a0a:	601a      	str	r2, [r3, #0]
  return result;
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	461a      	mov	r2, r3
 8002a28:	2300      	movs	r3, #0
 8002a2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe f9c0 	bl	8000db0 <HAL_GetTick>
 8002a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a34:	e00c      	b.n	8002a50 <HAL_RCC_OscConfig+0xc70>
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe f9b8 	bl	8000db0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e1fd      	b.n	8002e4c <HAL_RCC_OscConfig+0x106c>
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fa93 f2a3 	rbit	r2, r3
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a74:	601a      	str	r2, [r3, #0]
  return result;
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d102      	bne.n	8002a9a <HAL_RCC_OscConfig+0xcba>
 8002a94:	4bb0      	ldr	r3, [pc, #704]	; (8002d58 <HAL_RCC_OscConfig+0xf78>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	e027      	b.n	8002aea <HAL_RCC_OscConfig+0xd0a>
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f2a3 	rbit	r2, r3
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ac8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	fa93 f2a3 	rbit	r2, r3
 8002adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	4b9c      	ldr	r3, [pc, #624]	; (8002d58 <HAL_RCC_OscConfig+0xf78>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002af2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002af6:	6011      	str	r1, [r2, #0]
 8002af8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002afc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	fa92 f1a2 	rbit	r1, r2
 8002b06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b0a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b0e:	6011      	str	r1, [r2, #0]
  return result;
 8002b10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b14:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	fab2 f282 	clz	r2, r2
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	f042 0220 	orr.w	r2, r2, #32
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	f002 021f 	and.w	r2, r2, #31
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d182      	bne.n	8002a3c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <HAL_RCC_OscConfig+0xf78>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	430b      	orrs	r3, r1
 8002b58:	497f      	ldr	r1, [pc, #508]	; (8002d58 <HAL_RCC_OscConfig+0xf78>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	fa93 f2a3 	rbit	r2, r3
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b82:	601a      	str	r2, [r3, #0]
  return result;
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b8c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe f904 	bl	8000db0 <HAL_GetTick>
 8002ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bac:	e009      	b.n	8002bc2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fe f8ff 	bl	8000db0 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e144      	b.n	8002e4c <HAL_RCC_OscConfig+0x106c>
 8002bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f2a3 	rbit	r2, r3
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002be6:	601a      	str	r2, [r3, #0]
  return result;
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002bf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d102      	bne.n	8002c0c <HAL_RCC_OscConfig+0xe2c>
 8002c06:	4b54      	ldr	r3, [pc, #336]	; (8002d58 <HAL_RCC_OscConfig+0xf78>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	e027      	b.n	8002c5c <HAL_RCC_OscConfig+0xe7c>
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	fa93 f2a3 	rbit	r2, r3
 8002c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c52:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	4b3f      	ldr	r3, [pc, #252]	; (8002d58 <HAL_RCC_OscConfig+0xf78>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c60:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c68:	6011      	str	r1, [r2, #0]
 8002c6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c6e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	fa92 f1a2 	rbit	r1, r2
 8002c78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c7c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c80:	6011      	str	r1, [r2, #0]
  return result;
 8002c82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c86:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	fab2 f282 	clz	r2, r2
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	f042 0220 	orr.w	r2, r2, #32
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f002 021f 	and.w	r2, r2, #31
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d082      	beq.n	8002bae <HAL_RCC_OscConfig+0xdce>
 8002ca8:	e0cf      	b.n	8002e4a <HAL_RCC_OscConfig+0x106a>
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002cb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002cce:	601a      	str	r2, [r3, #0]
  return result;
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002cd8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ce4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	461a      	mov	r2, r3
 8002cec:	2300      	movs	r3, #0
 8002cee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe f85e 	bl	8000db0 <HAL_GetTick>
 8002cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf8:	e009      	b.n	8002d0e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fe f859 	bl	8000db0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e09e      	b.n	8002e4c <HAL_RCC_OscConfig+0x106c>
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d20:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	fa93 f2a3 	rbit	r2, r3
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d32:	601a      	str	r2, [r3, #0]
  return result;
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d104      	bne.n	8002d5c <HAL_RCC_OscConfig+0xf7c>
 8002d52:	4b01      	ldr	r3, [pc, #4]	; (8002d58 <HAL_RCC_OscConfig+0xf78>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	e029      	b.n	8002dac <HAL_RCC_OscConfig+0xfcc>
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	fa93 f2a3 	rbit	r2, r3
 8002d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	fa93 f2a3 	rbit	r2, r3
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCC_OscConfig+0x1078>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002db0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002db4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002db8:	6011      	str	r1, [r2, #0]
 8002dba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dbe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	fa92 f1a2 	rbit	r1, r2
 8002dc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dcc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002dd0:	6011      	str	r1, [r2, #0]
  return result;
 8002dd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dd6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	fab2 f282 	clz	r2, r2
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	f042 0220 	orr.w	r2, r2, #32
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	f002 021f 	and.w	r2, r2, #31
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f202 	lsl.w	r2, r1, r2
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d180      	bne.n	8002cfa <HAL_RCC_OscConfig+0xf1a>
 8002df8:	e027      	b.n	8002e4a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e01e      	b.n	8002e4c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_RCC_OscConfig+0x1078>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e1a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d10b      	bne.n	8002e46 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000

08002e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b09e      	sub	sp, #120	; 0x78
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e162      	b.n	800313a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b90      	ldr	r3, [pc, #576]	; (80030b8 <HAL_RCC_ClockConfig+0x25c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d910      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b8d      	ldr	r3, [pc, #564]	; (80030b8 <HAL_RCC_ClockConfig+0x25c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 0207 	bic.w	r2, r3, #7
 8002e8a:	498b      	ldr	r1, [pc, #556]	; (80030b8 <HAL_RCC_ClockConfig+0x25c>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b89      	ldr	r3, [pc, #548]	; (80030b8 <HAL_RCC_ClockConfig+0x25c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e14a      	b.n	800313a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b82      	ldr	r3, [pc, #520]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	497f      	ldr	r1, [pc, #508]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80dc 	beq.w	8003088 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d13c      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xf6>
 8002ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002edc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xa6>
 8002efc:	4b6f      	ldr	r3, [pc, #444]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	e00f      	b.n	8002f22 <HAL_RCC_ClockConfig+0xc6>
 8002f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	667b      	str	r3, [r7, #100]	; 0x64
 8002f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f14:	663b      	str	r3, [r7, #96]	; 0x60
 8002f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f1e:	4b67      	ldr	r3, [pc, #412]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f26:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f2a:	fa92 f2a2 	rbit	r2, r2
 8002f2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f32:	fab2 f282 	clz	r2, r2
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f042 0220 	orr.w	r2, r2, #32
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	f002 021f 	and.w	r2, r2, #31
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f202 	lsl.w	r2, r1, r2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d17b      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e0f3      	b.n	800313a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d13c      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x178>
 8002f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d102      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x128>
 8002f7e:	4b4f      	ldr	r3, [pc, #316]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	e00f      	b.n	8002fa4 <HAL_RCC_ClockConfig+0x148>
 8002f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44
 8002f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f96:	643b      	str	r3, [r7, #64]	; 0x40
 8002f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa0:	4b46      	ldr	r3, [pc, #280]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fac:	fa92 f2a2 	rbit	r2, r2
 8002fb0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb4:	fab2 f282 	clz	r2, r2
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	f042 0220 	orr.w	r2, r2, #32
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	f002 021f 	and.w	r2, r2, #31
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d13a      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0b2      	b.n	800313a <HAL_RCC_ClockConfig+0x2de>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d102      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x1a0>
 8002ff6:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	e00d      	b.n	8003018 <HAL_RCC_ClockConfig+0x1bc>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
 8003008:	2302      	movs	r3, #2
 800300a:	623b      	str	r3, [r7, #32]
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	2202      	movs	r2, #2
 800301a:	61ba      	str	r2, [r7, #24]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	fa92 f2a2 	rbit	r2, r2
 8003022:	617a      	str	r2, [r7, #20]
  return result;
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	fab2 f282 	clz	r2, r2
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	f042 0220 	orr.w	r2, r2, #32
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	f002 021f 	and.w	r2, r2, #31
 8003036:	2101      	movs	r1, #1
 8003038:	fa01 f202 	lsl.w	r2, r1, r2
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e079      	b.n	800313a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f023 0203 	bic.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	491a      	ldr	r1, [pc, #104]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003058:	f7fd feaa 	bl	8000db0 <HAL_GetTick>
 800305c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	e00a      	b.n	8003076 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003060:	f7fd fea6 	bl	8000db0 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e061      	b.n	800313a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 020c 	and.w	r2, r3, #12
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d1eb      	bne.n	8003060 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_ClockConfig+0x25c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d214      	bcs.n	80030c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_RCC_ClockConfig+0x25c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 0207 	bic.w	r2, r3, #7
 800309e:	4906      	ldr	r1, [pc, #24]	; (80030b8 <HAL_RCC_ClockConfig+0x25c>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_RCC_ClockConfig+0x25c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e040      	b.n	800313a <HAL_RCC_ClockConfig+0x2de>
 80030b8:	40022000 	.word	0x40022000
 80030bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030cc:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_RCC_ClockConfig+0x2e8>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	491a      	ldr	r1, [pc, #104]	; (8003144 <HAL_RCC_ClockConfig+0x2e8>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_RCC_ClockConfig+0x2e8>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4912      	ldr	r1, [pc, #72]	; (8003144 <HAL_RCC_ClockConfig+0x2e8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030fe:	f000 f829 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003102:	4601      	mov	r1, r0
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <HAL_RCC_ClockConfig+0x2e8>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800310c:	22f0      	movs	r2, #240	; 0xf0
 800310e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	fa92 f2a2 	rbit	r2, r2
 8003116:	60fa      	str	r2, [r7, #12]
  return result;
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	fab2 f282 	clz	r2, r2
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	40d3      	lsrs	r3, r2
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x2ec>)
 8003124:	5cd3      	ldrb	r3, [r2, r3]
 8003126:	fa21 f303 	lsr.w	r3, r1, r3
 800312a:	4a08      	ldr	r2, [pc, #32]	; (800314c <HAL_RCC_ClockConfig+0x2f0>)
 800312c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_RCC_ClockConfig+0x2f4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fdf8 	bl	8000d28 <HAL_InitTick>
  
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3778      	adds	r7, #120	; 0x78
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
 8003148:	08004498 	.word	0x08004498
 800314c:	20000004 	.word	0x20000004
 8003150:	20000008 	.word	0x20000008

08003154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	b480      	push	{r7}
 8003156:	b08b      	sub	sp, #44	; 0x2c
 8003158:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800316e:	4b29      	ldr	r3, [pc, #164]	; (8003214 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b04      	cmp	r3, #4
 800317c:	d002      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x30>
 800317e:	2b08      	cmp	r3, #8
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x36>
 8003182:	e03c      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003184:	4b24      	ldr	r3, [pc, #144]	; (8003218 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003186:	623b      	str	r3, [r7, #32]
      break;
 8003188:	e03c      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003190:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003194:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	fa92 f2a2 	rbit	r2, r2
 800319c:	607a      	str	r2, [r7, #4]
  return result;
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	fab2 f282 	clz	r2, r2
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	40d3      	lsrs	r3, r2
 80031a8:	4a1c      	ldr	r2, [pc, #112]	; (800321c <HAL_RCC_GetSysClockFreq+0xc8>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80031ae:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	220f      	movs	r2, #15
 80031b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	fa92 f2a2 	rbit	r2, r2
 80031c0:	60fa      	str	r2, [r7, #12]
  return result;
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	fab2 f282 	clz	r2, r2
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	40d3      	lsrs	r3, r2
 80031cc:	4a14      	ldr	r2, [pc, #80]	; (8003220 <HAL_RCC_GetSysClockFreq+0xcc>)
 80031ce:	5cd3      	ldrb	r3, [r2, r3]
 80031d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031dc:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
 80031ec:	e004      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <HAL_RCC_GetSysClockFreq+0xd0>)
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	623b      	str	r3, [r7, #32]
      break;
 80031fc:	e002      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003200:	623b      	str	r3, [r7, #32]
      break;
 8003202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003204:	6a3b      	ldr	r3, [r7, #32]
}
 8003206:	4618      	mov	r0, r3
 8003208:	372c      	adds	r7, #44	; 0x2c
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	007a1200 	.word	0x007a1200
 800321c:	080044a8 	.word	0x080044a8
 8003220:	080044b8 	.word	0x080044b8
 8003224:	003d0900 	.word	0x003d0900

08003228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d001      	beq.n	8003240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e040      	b.n	80032c2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <HAL_TIM_Base_Start_IT+0xa8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00e      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x58>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d009      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x58>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <HAL_TIM_Base_Start_IT+0xac>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x58>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d115      	bne.n	80032ac <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_TIM_Base_Start_IT+0xb4>)
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b06      	cmp	r3, #6
 8003290:	d015      	beq.n	80032be <HAL_TIM_Base_Start_IT+0x96>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003298:	d011      	beq.n	80032be <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032aa:	e008      	b.n	80032be <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e000      	b.n	80032c0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40014000 	.word	0x40014000
 80032dc:	00010007 	.word	0x00010007

080032e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e049      	b.n	8003386 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fc2a 	bl	8000b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f000 fcb2 	bl	8003c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_TIM_PWM_Start+0x24>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e03c      	b.n	800342e <HAL_TIM_PWM_Start+0x9e>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d109      	bne.n	80033ce <HAL_TIM_PWM_Start+0x3e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	bf14      	ite	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	2300      	moveq	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	e02f      	b.n	800342e <HAL_TIM_PWM_Start+0x9e>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d109      	bne.n	80033e8 <HAL_TIM_PWM_Start+0x58>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e022      	b.n	800342e <HAL_TIM_PWM_Start+0x9e>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b0c      	cmp	r3, #12
 80033ec:	d109      	bne.n	8003402 <HAL_TIM_PWM_Start+0x72>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	bf14      	ite	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	2300      	moveq	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	e015      	b.n	800342e <HAL_TIM_PWM_Start+0x9e>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b10      	cmp	r3, #16
 8003406:	d109      	bne.n	800341c <HAL_TIM_PWM_Start+0x8c>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e008      	b.n	800342e <HAL_TIM_PWM_Start+0x9e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e088      	b.n	8003548 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <HAL_TIM_PWM_Start+0xb6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003444:	e023      	b.n	800348e <HAL_TIM_PWM_Start+0xfe>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d104      	bne.n	8003456 <HAL_TIM_PWM_Start+0xc6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003454:	e01b      	b.n	800348e <HAL_TIM_PWM_Start+0xfe>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d104      	bne.n	8003466 <HAL_TIM_PWM_Start+0xd6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003464:	e013      	b.n	800348e <HAL_TIM_PWM_Start+0xfe>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b0c      	cmp	r3, #12
 800346a:	d104      	bne.n	8003476 <HAL_TIM_PWM_Start+0xe6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003474:	e00b      	b.n	800348e <HAL_TIM_PWM_Start+0xfe>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b10      	cmp	r3, #16
 800347a:	d104      	bne.n	8003486 <HAL_TIM_PWM_Start+0xf6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003484:	e003      	b.n	800348e <HAL_TIM_PWM_Start+0xfe>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2201      	movs	r2, #1
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 ff14 	bl	80042c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <HAL_TIM_PWM_Start+0x1c0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00e      	beq.n	80034c4 <HAL_TIM_PWM_Start+0x134>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2a      	ldr	r2, [pc, #168]	; (8003554 <HAL_TIM_PWM_Start+0x1c4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_TIM_PWM_Start+0x134>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a28      	ldr	r2, [pc, #160]	; (8003558 <HAL_TIM_PWM_Start+0x1c8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_TIM_PWM_Start+0x134>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a27      	ldr	r2, [pc, #156]	; (800355c <HAL_TIM_PWM_Start+0x1cc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_TIM_PWM_Start+0x138>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_TIM_PWM_Start+0x13a>
 80034c8:	2300      	movs	r3, #0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_TIM_PWM_Start+0x1c0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_TIM_PWM_Start+0x176>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f0:	d009      	beq.n	8003506 <HAL_TIM_PWM_Start+0x176>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1a      	ldr	r2, [pc, #104]	; (8003560 <HAL_TIM_PWM_Start+0x1d0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_TIM_PWM_Start+0x176>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a14      	ldr	r2, [pc, #80]	; (8003554 <HAL_TIM_PWM_Start+0x1c4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d115      	bne.n	8003532 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	4b15      	ldr	r3, [pc, #84]	; (8003564 <HAL_TIM_PWM_Start+0x1d4>)
 800350e:	4013      	ands	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b06      	cmp	r3, #6
 8003516:	d015      	beq.n	8003544 <HAL_TIM_PWM_Start+0x1b4>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351e:	d011      	beq.n	8003544 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003530:	e008      	b.n	8003544 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e000      	b.n	8003546 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003544:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40014000 	.word	0x40014000
 8003558:	40014400 	.word	0x40014400
 800355c:	40014800 	.word	0x40014800
 8003560:	40000400 	.word	0x40000400
 8003564:	00010007 	.word	0x00010007

08003568 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e097      	b.n	80036ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7fd fa9d 	bl	8000ad0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80035ac:	f023 0307 	bic.w	r3, r3, #7
 80035b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f000 fb63 	bl	8003c88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	4313      	orrs	r3, r2
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003608:	f023 030c 	bic.w	r3, r3, #12
 800360c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	4313      	orrs	r3, r2
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	011a      	lsls	r2, r3, #4
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	031b      	lsls	r3, r3, #12
 8003638:	4313      	orrs	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003646:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800364e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	4313      	orrs	r3, r2
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d110      	bne.n	8003706 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d102      	bne.n	80036f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80036ea:	7b7b      	ldrb	r3, [r7, #13]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d001      	beq.n	80036f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e069      	b.n	80037c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003704:	e031      	b.n	800376a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d110      	bne.n	800372e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800370c:	7bbb      	ldrb	r3, [r7, #14]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d102      	bne.n	8003718 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003712:	7b3b      	ldrb	r3, [r7, #12]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d001      	beq.n	800371c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e055      	b.n	80037c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800372c:	e01d      	b.n	800376a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d108      	bne.n	8003746 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003734:	7bbb      	ldrb	r3, [r7, #14]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d105      	bne.n	8003746 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800373a:	7b7b      	ldrb	r3, [r7, #13]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d102      	bne.n	8003746 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003740:	7b3b      	ldrb	r3, [r7, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d001      	beq.n	800374a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e03e      	b.n	80037c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_TIM_Encoder_Start+0xc4>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b04      	cmp	r3, #4
 8003774:	d008      	beq.n	8003788 <HAL_TIM_Encoder_Start+0xd4>
 8003776:	e00f      	b.n	8003798 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2201      	movs	r2, #1
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fd9f 	bl	80042c4 <TIM_CCxChannelCmd>
      break;
 8003786:	e016      	b.n	80037b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2201      	movs	r2, #1
 800378e:	2104      	movs	r1, #4
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fd97 	bl	80042c4 <TIM_CCxChannelCmd>
      break;
 8003796:	e00e      	b.n	80037b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2201      	movs	r2, #1
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fd8f 	bl	80042c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	2104      	movs	r1, #4
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fd88 	bl	80042c4 <TIM_CCxChannelCmd>
      break;
 80037b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d122      	bne.n	800382c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d11b      	bne.n	800382c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0202 	mvn.w	r2, #2
 80037fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa1a 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa0c 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fa1d 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b04      	cmp	r3, #4
 8003838:	d122      	bne.n	8003880 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b04      	cmp	r3, #4
 8003846:	d11b      	bne.n	8003880 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0204 	mvn.w	r2, #4
 8003850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9f0 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9e2 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f9f3 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b08      	cmp	r3, #8
 800388c:	d122      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b08      	cmp	r3, #8
 800389a:	d11b      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0208 	mvn.w	r2, #8
 80038a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2204      	movs	r2, #4
 80038aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f9c6 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 80038c0:	e005      	b.n	80038ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f9b8 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f9c9 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d122      	bne.n	8003928 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d11b      	bne.n	8003928 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0210 	mvn.w	r2, #16
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2208      	movs	r2, #8
 80038fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f99c 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f98e 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f99f 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d10e      	bne.n	8003954 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d107      	bne.n	8003954 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0201 	mvn.w	r2, #1
 800394c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fc fc3a 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d10e      	bne.n	8003980 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	d107      	bne.n	8003980 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fd40 	bl	8004400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	d10e      	bne.n	80039ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b80      	cmp	r3, #128	; 0x80
 800399c:	d107      	bne.n	80039ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fd33 	bl	8004414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d10e      	bne.n	80039da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d107      	bne.n	80039da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f94d 	bl	8003c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d10e      	bne.n	8003a06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d107      	bne.n	8003a06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f06f 0220 	mvn.w	r2, #32
 80039fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fcf3 	bl	80043ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0ff      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b14      	cmp	r3, #20
 8003a3a:	f200 80f0 	bhi.w	8003c1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a99 	.word	0x08003a99
 8003a48:	08003c1f 	.word	0x08003c1f
 8003a4c:	08003c1f 	.word	0x08003c1f
 8003a50:	08003c1f 	.word	0x08003c1f
 8003a54:	08003ad9 	.word	0x08003ad9
 8003a58:	08003c1f 	.word	0x08003c1f
 8003a5c:	08003c1f 	.word	0x08003c1f
 8003a60:	08003c1f 	.word	0x08003c1f
 8003a64:	08003b1b 	.word	0x08003b1b
 8003a68:	08003c1f 	.word	0x08003c1f
 8003a6c:	08003c1f 	.word	0x08003c1f
 8003a70:	08003c1f 	.word	0x08003c1f
 8003a74:	08003b5b 	.word	0x08003b5b
 8003a78:	08003c1f 	.word	0x08003c1f
 8003a7c:	08003c1f 	.word	0x08003c1f
 8003a80:	08003c1f 	.word	0x08003c1f
 8003a84:	08003b9d 	.word	0x08003b9d
 8003a88:	08003c1f 	.word	0x08003c1f
 8003a8c:	08003c1f 	.word	0x08003c1f
 8003a90:	08003c1f 	.word	0x08003c1f
 8003a94:	08003bdd 	.word	0x08003bdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f96a 	bl	8003d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0208 	orr.w	r2, r2, #8
 8003ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0204 	bic.w	r2, r2, #4
 8003ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6999      	ldr	r1, [r3, #24]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	619a      	str	r2, [r3, #24]
      break;
 8003ad6:	e0a5      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f9d0 	bl	8003e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6999      	ldr	r1, [r3, #24]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	021a      	lsls	r2, r3, #8
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	619a      	str	r2, [r3, #24]
      break;
 8003b18:	e084      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fa2f 	bl	8003f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0208 	orr.w	r2, r2, #8
 8003b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0204 	bic.w	r2, r2, #4
 8003b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69d9      	ldr	r1, [r3, #28]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	61da      	str	r2, [r3, #28]
      break;
 8003b58:	e064      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fa8d 	bl	8004080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69d9      	ldr	r1, [r3, #28]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	021a      	lsls	r2, r3, #8
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	61da      	str	r2, [r3, #28]
      break;
 8003b9a:	e043      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fad0 	bl	8004148 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0208 	orr.w	r2, r2, #8
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0204 	bic.w	r2, r2, #4
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bda:	e023      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fb0e 	bl	8004204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c1c:	e002      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
      break;
 8003c22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop

08003c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a32      	ldr	r2, [pc, #200]	; (8003d64 <TIM_Base_SetConfig+0xdc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <TIM_Base_SetConfig+0x28>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d003      	beq.n	8003cb0 <TIM_Base_SetConfig+0x28>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a2f      	ldr	r2, [pc, #188]	; (8003d68 <TIM_Base_SetConfig+0xe0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d108      	bne.n	8003cc2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a27      	ldr	r2, [pc, #156]	; (8003d64 <TIM_Base_SetConfig+0xdc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <TIM_Base_SetConfig+0x6a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd0:	d00f      	beq.n	8003cf2 <TIM_Base_SetConfig+0x6a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a24      	ldr	r2, [pc, #144]	; (8003d68 <TIM_Base_SetConfig+0xe0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <TIM_Base_SetConfig+0x6a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a23      	ldr	r2, [pc, #140]	; (8003d6c <TIM_Base_SetConfig+0xe4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d007      	beq.n	8003cf2 <TIM_Base_SetConfig+0x6a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a22      	ldr	r2, [pc, #136]	; (8003d70 <TIM_Base_SetConfig+0xe8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <TIM_Base_SetConfig+0x6a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a21      	ldr	r2, [pc, #132]	; (8003d74 <TIM_Base_SetConfig+0xec>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d108      	bne.n	8003d04 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <TIM_Base_SetConfig+0xdc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <TIM_Base_SetConfig+0xc0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <TIM_Base_SetConfig+0xe4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <TIM_Base_SetConfig+0xc0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a0d      	ldr	r2, [pc, #52]	; (8003d70 <TIM_Base_SetConfig+0xe8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_Base_SetConfig+0xc0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a0c      	ldr	r2, [pc, #48]	; (8003d74 <TIM_Base_SetConfig+0xec>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d103      	bne.n	8003d50 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	615a      	str	r2, [r3, #20]
}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800

08003d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0201 	bic.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 0302 	bic.w	r3, r3, #2
 8003dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a28      	ldr	r2, [pc, #160]	; (8003e74 <TIM_OC1_SetConfig+0xfc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <TIM_OC1_SetConfig+0x78>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a27      	ldr	r2, [pc, #156]	; (8003e78 <TIM_OC1_SetConfig+0x100>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d007      	beq.n	8003df0 <TIM_OC1_SetConfig+0x78>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <TIM_OC1_SetConfig+0x104>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d003      	beq.n	8003df0 <TIM_OC1_SetConfig+0x78>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a25      	ldr	r2, [pc, #148]	; (8003e80 <TIM_OC1_SetConfig+0x108>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10c      	bne.n	8003e0a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0308 	bic.w	r3, r3, #8
 8003df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a19      	ldr	r2, [pc, #100]	; (8003e74 <TIM_OC1_SetConfig+0xfc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00b      	beq.n	8003e2a <TIM_OC1_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <TIM_OC1_SetConfig+0x100>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <TIM_OC1_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <TIM_OC1_SetConfig+0x104>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d003      	beq.n	8003e2a <TIM_OC1_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <TIM_OC1_SetConfig+0x108>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d111      	bne.n	8003e4e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	621a      	str	r2, [r3, #32]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40012c00 	.word	0x40012c00
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800

08003e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f023 0210 	bic.w	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0320 	bic.w	r3, r3, #32
 8003ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a24      	ldr	r2, [pc, #144]	; (8003f74 <TIM_OC2_SetConfig+0xf0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d10d      	bne.n	8003f04 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <TIM_OC2_SetConfig+0xf0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <TIM_OC2_SetConfig+0xa0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a1a      	ldr	r2, [pc, #104]	; (8003f78 <TIM_OC2_SetConfig+0xf4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <TIM_OC2_SetConfig+0xa0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <TIM_OC2_SetConfig+0xf8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_OC2_SetConfig+0xa0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <TIM_OC2_SetConfig+0xfc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d113      	bne.n	8003f4c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f2a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f32:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800

08003f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0303 	bic.w	r3, r3, #3
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a23      	ldr	r2, [pc, #140]	; (8004070 <TIM_OC3_SetConfig+0xec>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10d      	bne.n	8004002 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004000:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <TIM_OC3_SetConfig+0xec>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00b      	beq.n	8004022 <TIM_OC3_SetConfig+0x9e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <TIM_OC3_SetConfig+0xf0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d007      	beq.n	8004022 <TIM_OC3_SetConfig+0x9e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a18      	ldr	r2, [pc, #96]	; (8004078 <TIM_OC3_SetConfig+0xf4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d003      	beq.n	8004022 <TIM_OC3_SetConfig+0x9e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a17      	ldr	r2, [pc, #92]	; (800407c <TIM_OC3_SetConfig+0xf8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d113      	bne.n	800404a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	621a      	str	r2, [r3, #32]
}
 8004064:	bf00      	nop
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40014000 	.word	0x40014000
 8004078:	40014400 	.word	0x40014400
 800407c:	40014800 	.word	0x40014800

08004080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	031b      	lsls	r3, r3, #12
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a16      	ldr	r2, [pc, #88]	; (8004138 <TIM_OC4_SetConfig+0xb8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <TIM_OC4_SetConfig+0x7c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a15      	ldr	r2, [pc, #84]	; (800413c <TIM_OC4_SetConfig+0xbc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_OC4_SetConfig+0x7c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a14      	ldr	r2, [pc, #80]	; (8004140 <TIM_OC4_SetConfig+0xc0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_OC4_SetConfig+0x7c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a13      	ldr	r2, [pc, #76]	; (8004144 <TIM_OC4_SetConfig+0xc4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d109      	bne.n	8004110 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	019b      	lsls	r3, r3, #6
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	621a      	str	r2, [r3, #32]
}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40014000 	.word	0x40014000
 8004140:	40014400 	.word	0x40014400
 8004144:	40014800 	.word	0x40014800

08004148 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800418c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <TIM_OC5_SetConfig+0xac>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00b      	beq.n	80041ba <TIM_OC5_SetConfig+0x72>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <TIM_OC5_SetConfig+0xb0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <TIM_OC5_SetConfig+0x72>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a13      	ldr	r2, [pc, #76]	; (80041fc <TIM_OC5_SetConfig+0xb4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <TIM_OC5_SetConfig+0x72>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a12      	ldr	r2, [pc, #72]	; (8004200 <TIM_OC5_SetConfig+0xb8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d109      	bne.n	80041ce <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40014000 	.word	0x40014000
 80041fc:	40014400 	.word	0x40014400
 8004200:	40014800 	.word	0x40014800

08004204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800424a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	051b      	lsls	r3, r3, #20
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <TIM_OC6_SetConfig+0xb0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00b      	beq.n	8004278 <TIM_OC6_SetConfig+0x74>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <TIM_OC6_SetConfig+0xb4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d007      	beq.n	8004278 <TIM_OC6_SetConfig+0x74>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a14      	ldr	r2, [pc, #80]	; (80042bc <TIM_OC6_SetConfig+0xb8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_OC6_SetConfig+0x74>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <TIM_OC6_SetConfig+0xbc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d109      	bne.n	800428c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	029b      	lsls	r3, r3, #10
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	621a      	str	r2, [r3, #32]
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40014000 	.word	0x40014000
 80042bc:	40014400 	.word	0x40014400
 80042c0:	40014800 	.word	0x40014800

080042c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2201      	movs	r2, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004324:	2302      	movs	r3, #2
 8004326:	e054      	b.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a24      	ldr	r2, [pc, #144]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d108      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004358:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004390:	d009      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10c      	bne.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40014000 	.word	0x40014000

080043ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4d0d      	ldr	r5, [pc, #52]	; (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 800442e:	1b64      	subs	r4, r4, r5
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2600      	movs	r6, #0
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4d0b      	ldr	r5, [pc, #44]	; (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	; (800446c <__libc_init_array+0x44>)
 800443c:	f000 f820 	bl	8004480 <_init>
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2600      	movs	r6, #0
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	080044c8 	.word	0x080044c8
 8004464:	080044c8 	.word	0x080044c8
 8004468:	080044c8 	.word	0x080044c8
 800446c:	080044cc 	.word	0x080044cc

08004470 <memset>:
 8004470:	4402      	add	r2, r0
 8004472:	4603      	mov	r3, r0
 8004474:	4293      	cmp	r3, r2
 8004476:	d100      	bne.n	800447a <memset+0xa>
 8004478:	4770      	bx	lr
 800447a:	f803 1b01 	strb.w	r1, [r3], #1
 800447e:	e7f9      	b.n	8004474 <memset+0x4>

08004480 <_init>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr

0800448c <_fini>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr
