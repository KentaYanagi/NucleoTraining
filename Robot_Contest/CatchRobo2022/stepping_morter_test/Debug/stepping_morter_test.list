
stepping_morter_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d90  08002d90  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002d90  08002d90  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d90  08002d90  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000030  08002dc8  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002dc8  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae5e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000161f  00000000  00000000  0002aebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa8  00000000  00000000  0002c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  0002cf88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a27b  00000000  00000000  0002d978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000089d8  00000000  00000000  00047bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e62a  00000000  00000000  000505cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eebf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cbc  00000000  00000000  000eec70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d48 	.word	0x08002d48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08002d48 	.word	0x08002d48

080001c8 <Filter_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

CAN_FilterTypeDef filter;
void Filter_Init(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	filter.FilterIdHigh         = 0;
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <Filter_Init+0x4c>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
	filter.FilterIdLow          = 0;
 80001d2:	4b10      	ldr	r3, [pc, #64]	; (8000214 <Filter_Init+0x4c>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	605a      	str	r2, [r3, #4]
	filter.FilterMaskIdHigh     = 0;
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <Filter_Init+0x4c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow      = 0;
 80001de:	4b0d      	ldr	r3, [pc, #52]	; (8000214 <Filter_Init+0x4c>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	60da      	str	r2, [r3, #12]
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;
 80001e4:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <Filter_Init+0x4c>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	61da      	str	r2, [r3, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <Filter_Init+0x4c>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	611a      	str	r2, [r3, #16]
	filter.FilterBank           = 0;
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <Filter_Init+0x4c>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	615a      	str	r2, [r3, #20]
	filter.FilterMode           = CAN_FILTERMODE_IDMASK;
 80001f6:	4b07      	ldr	r3, [pc, #28]	; (8000214 <Filter_Init+0x4c>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	619a      	str	r2, [r3, #24]
	filter.SlaveStartFilterBank = 14;
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <Filter_Init+0x4c>)
 80001fe:	220e      	movs	r2, #14
 8000200:	625a      	str	r2, [r3, #36]	; 0x24
	filter.FilterActivation     = ENABLE;
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <Filter_Init+0x4c>)
 8000204:	2201      	movs	r2, #1
 8000206:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan, &filter);
 8000208:	4902      	ldr	r1, [pc, #8]	; (8000214 <Filter_Init+0x4c>)
 800020a:	4803      	ldr	r0, [pc, #12]	; (8000218 <Filter_Init+0x50>)
 800020c:	f000 fc59 	bl	8000ac2 <HAL_CAN_ConfigFilter>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000080 	.word	0x20000080
 8000218:	20000050 	.word	0x20000050

0800021c <HAL_TIM_PeriodElapsedCallback>:
int stepping_output[4][2]={{0,0},{0,1},{1,1},{1,0}};
int stepping_step=0;
int seitenn=1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4a3a      	ldr	r2, [pc, #232]	; (8000310 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d16c      	bne.n	8000306 <HAL_TIM_PeriodElapsedCallback+0xea>
    	if(seitenn==1){
 800022c:	4b39      	ldr	r3, [pc, #228]	; (8000314 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d105      	bne.n	8000240 <HAL_TIM_PeriodElapsedCallback+0x24>
    		stepping_step++;
 8000234:	4b38      	ldr	r3, [pc, #224]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	3301      	adds	r3, #1
 800023a:	4a37      	ldr	r2, [pc, #220]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800023c:	6013      	str	r3, [r2, #0]
 800023e:	e004      	b.n	800024a <HAL_TIM_PeriodElapsedCallback+0x2e>
    	}
    	else {
    		stepping_step--;
 8000240:	4b35      	ldr	r3, [pc, #212]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	3b01      	subs	r3, #1
 8000246:	4a34      	ldr	r2, [pc, #208]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000248:	6013      	str	r3, [r2, #0]
    		stepping_step += 4;
    	}
    	stepping_step %= 4;
*/

    	if(stepping_step==500){
 800024a:	4b33      	ldr	r3, [pc, #204]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000252:	d102      	bne.n	800025a <HAL_TIM_PeriodElapsedCallback+0x3e>
    		seitenn=0;
 8000254:	4b2f      	ldr	r3, [pc, #188]	; (8000314 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
    	}
    	if(stepping_step==0){
 800025a:	4b2f      	ldr	r3, [pc, #188]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d102      	bne.n	8000268 <HAL_TIM_PeriodElapsedCallback+0x4c>
    		seitenn=1;
 8000262:	4b2c      	ldr	r3, [pc, #176]	; (8000314 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000264:	2201      	movs	r2, #1
 8000266:	601a      	str	r2, [r3, #0]
    	}



    	if(stepping_output[stepping_step%4][0]==0){
 8000268:	4b2b      	ldr	r3, [pc, #172]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	425a      	negs	r2, r3
 800026e:	f003 0303 	and.w	r3, r3, #3
 8000272:	f002 0203 	and.w	r2, r2, #3
 8000276:	bf58      	it	pl
 8000278:	4253      	negpl	r3, r2
 800027a:	4a28      	ldr	r2, [pc, #160]	; (800031c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800027c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d10c      	bne.n	800029e <HAL_TIM_PeriodElapsedCallback+0x82>
    		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2101      	movs	r1, #1
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f000 ffd2 	bl	8001234 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2102      	movs	r1, #2
 8000294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000298:	f000 ffcc 	bl	8001234 <HAL_GPIO_WritePin>
 800029c:	e00b      	b.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x9a>
    	}
    	else {
    		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	2101      	movs	r1, #1
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f000 ffc5 	bl	8001234 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2102      	movs	r1, #2
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f000 ffbf 	bl	8001234 <HAL_GPIO_WritePin>
    	}

    	if(stepping_output[stepping_step%4][1]==0){
 80002b6:	4b18      	ldr	r3, [pc, #96]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	425a      	negs	r2, r3
 80002bc:	f003 0303 	and.w	r3, r3, #3
 80002c0:	f002 0203 	and.w	r2, r2, #3
 80002c4:	bf58      	it	pl
 80002c6:	4253      	negpl	r3, r2
 80002c8:	4a14      	ldr	r2, [pc, #80]	; (800031c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80002ca:	00db      	lsls	r3, r3, #3
 80002cc:	4413      	add	r3, r2
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d10c      	bne.n	80002ee <HAL_TIM_PeriodElapsedCallback+0xd2>
    		//HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0,GPIO_PIN_RESET);
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2108      	movs	r1, #8
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f000 ffaa 	bl	8001234 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f000 ffa4 	bl	8001234 <HAL_GPIO_WritePin>
    		//HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0,GPIO_PIN_SET);
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,GPIO_PIN_SET);
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
    	}
    }
}
 80002ec:	e00b      	b.n	8000306 <HAL_TIM_PeriodElapsedCallback+0xea>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,GPIO_PIN_SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2108      	movs	r1, #8
 80002f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f6:	f000 ff9d 	bl	8001234 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2110      	movs	r1, #16
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f000 ff97 	bl	8001234 <HAL_GPIO_WritePin>
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000bc 	.word	0x200000bc
 8000314:	20000020 	.word	0x20000020
 8000318:	2000004c 	.word	0x2000004c
 800031c:	20000000 	.word	0x20000000

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000324:	f000 fa6c 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000328:	f000 f830 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032c:	f000 f8f4 	bl	8000518 <MX_GPIO_Init>
  MX_CAN_Init();
 8000330:	f000 f86e 	bl	8000410 <MX_CAN_Init>
  MX_TIM2_Init();
 8000334:	f000 f8a2 	bl	800047c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000338:	4812      	ldr	r0, [pc, #72]	; (8000384 <main+0x64>)
 800033a:	f002 f8d9 	bl	80024f0 <HAL_TIM_Base_Start_IT>

	HAL_CAN_Start(&hcan);
 800033e:	4812      	ldr	r0, [pc, #72]	; (8000388 <main+0x68>)
 8000340:	f000 fc89 	bl	8000c56 <HAL_CAN_Start>
	Filter_Init();
 8000344:	f7ff ff40 	bl	80001c8 <Filter_Init>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000348:	2102      	movs	r1, #2
 800034a:	480f      	ldr	r0, [pc, #60]	; (8000388 <main+0x68>)
 800034c:	f000 fcc7 	bl	8000cde <HAL_CAN_ActivateNotification>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2101      	movs	r1, #1
 8000354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000358:	f000 ff6c 	bl	8001234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2102      	movs	r1, #2
 8000360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000364:	f000 ff66 	bl	8001234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2108      	movs	r1, #8
 800036c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000370:	f000 ff60 	bl	8001234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2110      	movs	r1, #16
 8000378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037c:	f000 ff5a 	bl	8001234 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000380:	e7fe      	b.n	8000380 <main+0x60>
 8000382:	bf00      	nop
 8000384:	200000bc 	.word	0x200000bc
 8000388:	20000050 	.word	0x20000050

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b090      	sub	sp, #64	; 0x40
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fccc 	bl	8002d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b2:	2301      	movs	r3, #1
 80003b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b6:	2310      	movs	r3, #16
 80003b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ba:	2302      	movs	r3, #2
 80003bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003be:	2300      	movs	r3, #0
 80003c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003c2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c8:	f107 0318 	add.w	r3, r7, #24
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 ff49 	bl	8001264 <HAL_RCC_OscConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003d8:	f000 f912 	bl	8000600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003dc:	230f      	movs	r3, #15
 80003de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e0:	2302      	movs	r3, #2
 80003e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2102      	movs	r1, #2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fe3c 	bl	8002074 <HAL_RCC_ClockConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000402:	f000 f8fd 	bl	8000600 <Error_Handler>
  }
}
 8000406:	bf00      	nop
 8000408:	3740      	adds	r7, #64	; 0x40
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_CAN_Init+0x64>)
 8000416:	4a18      	ldr	r2, [pc, #96]	; (8000478 <MX_CAN_Init+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_CAN_Init+0x64>)
 800041c:	2204      	movs	r2, #4
 800041e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_CAN_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <MX_CAN_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_CAN_Init+0x64>)
 800042e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000432:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_CAN_Init+0x64>)
 8000436:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800043a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <MX_CAN_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_CAN_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <MX_CAN_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_CAN_Init+0x64>)
 8000450:	2200      	movs	r2, #0
 8000452:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <MX_CAN_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_CAN_Init+0x64>)
 800045c:	2200      	movs	r2, #0
 800045e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_CAN_Init+0x64>)
 8000462:	f000 fa33 	bl	80008cc <HAL_CAN_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800046c:	f000 f8c8 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000050 	.word	0x20000050
 8000478:	40006400 	.word	0x40006400

0800047c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800049a:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <MX_TIM2_Init+0x98>)
 800049c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 80004a2:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <MX_TIM2_Init+0x98>)
 80004a4:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80004a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004aa:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <MX_TIM2_Init+0x98>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <MX_TIM2_Init+0x98>)
 80004b2:	2264      	movs	r2, #100	; 0x64
 80004b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b6:	4b17      	ldr	r3, [pc, #92]	; (8000514 <MX_TIM2_Init+0x98>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <MX_TIM2_Init+0x98>)
 80004be:	2200      	movs	r2, #0
 80004c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004c2:	4814      	ldr	r0, [pc, #80]	; (8000514 <MX_TIM2_Init+0x98>)
 80004c4:	f001 ffbc 	bl	8002440 <HAL_TIM_Base_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80004ce:	f000 f897 	bl	8000600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	480d      	ldr	r0, [pc, #52]	; (8000514 <MX_TIM2_Init+0x98>)
 80004e0:	f002 f981 	bl	80027e6 <HAL_TIM_ConfigClockSource>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80004ea:	f000 f889 	bl	8000600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4619      	mov	r1, r3
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <MX_TIM2_Init+0x98>)
 80004fc:	f002 fb6c 	bl	8002bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000506:	f000 f87b 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000bc 	.word	0x200000bc

08000518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <MX_GPIO_Init+0xdc>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a30      	ldr	r2, [pc, #192]	; (80005f4 <MX_GPIO_Init+0xdc>)
 8000534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <MX_GPIO_Init+0xdc>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <MX_GPIO_Init+0xdc>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a2a      	ldr	r2, [pc, #168]	; (80005f4 <MX_GPIO_Init+0xdc>)
 800054c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <MX_GPIO_Init+0xdc>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <MX_GPIO_Init+0xdc>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a24      	ldr	r2, [pc, #144]	; (80005f4 <MX_GPIO_Init+0xdc>)
 8000564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <MX_GPIO_Init+0xdc>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2101      	movs	r1, #1
 800057a:	481f      	ldr	r0, [pc, #124]	; (80005f8 <MX_GPIO_Init+0xe0>)
 800057c:	f000 fe5a 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	211b      	movs	r1, #27
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f000 fe54 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2102      	movs	r1, #2
 8000590:	481a      	ldr	r0, [pc, #104]	; (80005fc <MX_GPIO_Init+0xe4>)
 8000592:	f000 fe4f 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000596:	2301      	movs	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4619      	mov	r1, r3
 80005ac:	4812      	ldr	r0, [pc, #72]	; (80005f8 <MX_GPIO_Init+0xe0>)
 80005ae:	f000 fccf 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80005b2:	231b      	movs	r3, #27
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 fcc0 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005d0:	2302      	movs	r3, #2
 80005d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4619      	mov	r1, r3
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_GPIO_Init+0xe4>)
 80005e8:	f000 fcb2 	bl	8000f50 <HAL_GPIO_Init>

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	48001400 	.word	0x48001400
 80005fc:	48000400 	.word	0x48000400

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000606:	e7fe      	b.n	8000606 <Error_Handler+0x6>

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_MspInit+0x44>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_MspInit+0x44>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_MspInit+0x44>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_MspInit+0x44>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_MspInit+0x44>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_MspInit+0x44>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <HAL_CAN_MspInit+0x80>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d129      	bne.n	80006c6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <HAL_CAN_MspInit+0x84>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_CAN_MspInit+0x84>)
 8000678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_CAN_MspInit+0x84>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_CAN_MspInit+0x84>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <HAL_CAN_MspInit+0x84>)
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_CAN_MspInit+0x84>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80006b4:	2309      	movs	r3, #9
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f000 fc45 	bl	8000f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	; 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40006400 	.word	0x40006400
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006e8:	d113      	bne.n	8000712 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_TIM_Base_MspInit+0x44>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <HAL_TIM_Base_MspInit+0x44>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_TIM_Base_MspInit+0x44>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	201c      	movs	r0, #28
 8000708:	f000 fbeb 	bl	8000ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800070c:	201c      	movs	r0, #28
 800070e:	f000 fc04 	bl	8000f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f88e 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <TIM2_IRQHandler+0x10>)
 800077a:	f001 ff15 	bl	80025a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000bc 	.word	0x200000bc

08000788 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <SystemInit+0x20>)
 800078e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <SystemInit+0x20>)
 8000794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490e      	ldr	r1, [pc, #56]	; (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0b      	ldr	r4, [pc, #44]	; (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d6:	f7ff ffd7 	bl	8000788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007da:	f002 fa89 	bl	8002cf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007de:	f7ff fd9f 	bl	8000320 <main>

080007e2 <LoopForever>:

LoopForever:
    b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80007f0:	08002d98 	.word	0x08002d98
  ldr r2, =_sbss
 80007f4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80007f8:	20000124 	.word	0x20000124

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>
	...

08000800 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_Init+0x28>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_Init+0x28>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 fb5b 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff fef4 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40022000 	.word	0x40022000

0800082c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fb73 	bl	8000f36 <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 fb3b 	bl	8000ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000024 	.word	0x20000024
 8000884:	2000002c 	.word	0x2000002c
 8000888:	20000028 	.word	0x20000028

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2000002c 	.word	0x2000002c
 80008b0:	20000120 	.word	0x20000120

080008b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000120 	.word	0x20000120

080008cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d101      	bne.n	80008de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e0ed      	b.n	8000aba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff feb0 	bl	8000650 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f042 0201 	orr.w	r2, r2, #1
 80008fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000900:	f7ff ffd8 	bl	80008b4 <HAL_GetTick>
 8000904:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000906:	e012      	b.n	800092e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000908:	f7ff ffd4 	bl	80008b4 <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	2b0a      	cmp	r3, #10
 8000914:	d90b      	bls.n	800092e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2205      	movs	r2, #5
 8000926:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e0c5      	b.n	8000aba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0e5      	beq.n	8000908 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f022 0202 	bic.w	r2, r2, #2
 800094a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800094c:	f7ff ffb2 	bl	80008b4 <HAL_GetTick>
 8000950:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000952:	e012      	b.n	800097a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000954:	f7ff ffae 	bl	80008b4 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	2b0a      	cmp	r3, #10
 8000960:	d90b      	bls.n	800097a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2205      	movs	r2, #5
 8000972:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e09f      	b.n	8000aba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1e5      	bne.n	8000954 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7e1b      	ldrb	r3, [r3, #24]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d108      	bne.n	80009a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	e007      	b.n	80009b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7e5b      	ldrb	r3, [r3, #25]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d108      	bne.n	80009cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e007      	b.n	80009dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7e9b      	ldrb	r3, [r3, #26]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d108      	bne.n	80009f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f042 0220 	orr.w	r2, r2, #32
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	e007      	b.n	8000a06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 0220 	bic.w	r2, r2, #32
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7edb      	ldrb	r3, [r3, #27]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d108      	bne.n	8000a20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 0210 	bic.w	r2, r2, #16
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e007      	b.n	8000a30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f042 0210 	orr.w	r2, r2, #16
 8000a2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7f1b      	ldrb	r3, [r3, #28]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d108      	bne.n	8000a4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 0208 	orr.w	r2, r2, #8
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	e007      	b.n	8000a5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f022 0208 	bic.w	r2, r2, #8
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7f5b      	ldrb	r3, [r3, #29]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d108      	bne.n	8000a74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f042 0204 	orr.w	r2, r2, #4
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	e007      	b.n	8000a84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f022 0204 	bic.w	r2, r2, #4
 8000a82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	431a      	orrs	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	ea42 0103 	orr.w	r1, r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	1e5a      	subs	r2, r3, #1
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b087      	sub	sp, #28
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ad8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ada:	7cfb      	ldrb	r3, [r7, #19]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d003      	beq.n	8000ae8 <HAL_CAN_ConfigFilter+0x26>
 8000ae0:	7cfb      	ldrb	r3, [r7, #19]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	f040 80aa 	bne.w	8000c3c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000aee:	f043 0201 	orr.w	r2, r3, #1
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	f003 031f 	and.w	r3, r3, #31
 8000b00:	2201      	movs	r2, #1
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d123      	bne.n	8000b6a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3248      	adds	r2, #72	; 0x48
 8000b4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b60:	6979      	ldr	r1, [r7, #20]
 8000b62:	3348      	adds	r3, #72	; 0x48
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	440b      	add	r3, r1
 8000b68:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d122      	bne.n	8000bb8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3248      	adds	r2, #72	; 0x48
 8000b98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bae:	6979      	ldr	r1, [r7, #20]
 8000bb0:	3348      	adds	r3, #72	; 0x48
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d109      	bne.n	8000bd4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000bd2:	e007      	b.n	8000be4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d109      	bne.n	8000c00 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000bfe:	e007      	b.n	8000c10 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d107      	bne.n	8000c28 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	431a      	orrs	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c2e:	f023 0201 	bic.w	r2, r3, #1
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e006      	b.n	8000c4a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
  }
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d12e      	bne.n	8000cc8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0201 	bic.w	r2, r2, #1
 8000c80:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c82:	f7ff fe17 	bl	80008b4 <HAL_GetTick>
 8000c86:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c88:	e012      	b.n	8000cb0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c8a:	f7ff fe13 	bl	80008b4 <HAL_GetTick>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b0a      	cmp	r3, #10
 8000c96:	d90b      	bls.n	8000cb0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2205      	movs	r2, #5
 8000ca8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e012      	b.n	8000cd6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1e5      	bne.n	8000c8a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e006      	b.n	8000cd6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ccc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
  }
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d002      	beq.n	8000cfc <HAL_CAN_ActivateNotification+0x1e>
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d109      	bne.n	8000d10 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6959      	ldr	r1, [r3, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e006      	b.n	8000d1e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
  }
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <__NVIC_EnableIRQ+0x38>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e98:	d301      	bcc.n	8000e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00f      	b.n	8000ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <SysTick_Config+0x40>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f7ff ff8e 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff29 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff3e 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff8e 	bl	8000e20 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5d 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff31 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffa2 	bl	8000e88 <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5e:	e14e      	b.n	80011fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	2101      	movs	r1, #1
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8140 	beq.w	80011f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d005      	beq.n	8000f90 <HAL_GPIO_Init+0x40>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d130      	bne.n	8000ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	f003 0201 	and.w	r2, r3, #1
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d017      	beq.n	800102e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d123      	bne.n	8001082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	691a      	ldr	r2, [r3, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	6939      	ldr	r1, [r7, #16]
 800107e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0203 	and.w	r2, r3, #3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 809a 	beq.w	80011f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c4:	4b55      	ldr	r3, [pc, #340]	; (800121c <HAL_GPIO_Init+0x2cc>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a54      	ldr	r2, [pc, #336]	; (800121c <HAL_GPIO_Init+0x2cc>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b52      	ldr	r3, [pc, #328]	; (800121c <HAL_GPIO_Init+0x2cc>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <HAL_GPIO_Init+0x2d0>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001106:	d013      	beq.n	8001130 <HAL_GPIO_Init+0x1e0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a46      	ldr	r2, [pc, #280]	; (8001224 <HAL_GPIO_Init+0x2d4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d00d      	beq.n	800112c <HAL_GPIO_Init+0x1dc>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a45      	ldr	r2, [pc, #276]	; (8001228 <HAL_GPIO_Init+0x2d8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d007      	beq.n	8001128 <HAL_GPIO_Init+0x1d8>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a44      	ldr	r2, [pc, #272]	; (800122c <HAL_GPIO_Init+0x2dc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d101      	bne.n	8001124 <HAL_GPIO_Init+0x1d4>
 8001120:	2303      	movs	r3, #3
 8001122:	e006      	b.n	8001132 <HAL_GPIO_Init+0x1e2>
 8001124:	2305      	movs	r3, #5
 8001126:	e004      	b.n	8001132 <HAL_GPIO_Init+0x1e2>
 8001128:	2302      	movs	r3, #2
 800112a:	e002      	b.n	8001132 <HAL_GPIO_Init+0x1e2>
 800112c:	2301      	movs	r3, #1
 800112e:	e000      	b.n	8001132 <HAL_GPIO_Init+0x1e2>
 8001130:	2300      	movs	r3, #0
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	f002 0203 	and.w	r2, r2, #3
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	4093      	lsls	r3, r2
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001142:	4937      	ldr	r1, [pc, #220]	; (8001220 <HAL_GPIO_Init+0x2d0>)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001150:	4b37      	ldr	r3, [pc, #220]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001174:	4a2e      	ldr	r2, [pc, #184]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800119e:	4a24      	ldr	r2, [pc, #144]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011c8:	4a19      	ldr	r2, [pc, #100]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa22 f303 	lsr.w	r3, r2, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	f47f aea9 	bne.w	8000f60 <HAL_GPIO_Init+0x10>
  }
}
 800120e:	bf00      	nop
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	40010000 	.word	0x40010000
 8001224:	48000400 	.word	0x48000400
 8001228:	48000800 	.word	0x48000800
 800122c:	48000c00 	.word	0x48000c00
 8001230:	40010400 	.word	0x40010400

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001250:	e002      	b.n	8001258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800126a:	af00      	add	r7, sp, #0
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	f000 bef4 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 816a 	beq.w	8001562 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800128e:	4bb3      	ldr	r3, [pc, #716]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b04      	cmp	r3, #4
 8001298:	d00c      	beq.n	80012b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800129a:	4bb0      	ldr	r3, [pc, #704]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d159      	bne.n	800135a <HAL_RCC_OscConfig+0xf6>
 80012a6:	4bad      	ldr	r3, [pc, #692]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b2:	d152      	bne.n	800135a <HAL_RCC_OscConfig+0xf6>
 80012b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d102      	bne.n	80012e6 <HAL_RCC_OscConfig+0x82>
 80012e0:	4b9e      	ldr	r3, [pc, #632]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	e015      	b.n	8001312 <HAL_RCC_OscConfig+0xae>
 80012e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001302:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800130e:	4b93      	ldr	r3, [pc, #588]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001316:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800131a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800131e:	fa92 f2a2 	rbit	r2, r2
 8001322:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001326:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800132a:	fab2 f282 	clz	r2, r2
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	f042 0220 	orr.w	r2, r2, #32
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	f002 021f 	and.w	r2, r2, #31
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 810c 	beq.w	8001560 <HAL_RCC_OscConfig+0x2fc>
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f040 8106 	bne.w	8001560 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	f000 be86 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001364:	d106      	bne.n	8001374 <HAL_RCC_OscConfig+0x110>
 8001366:	4b7d      	ldr	r3, [pc, #500]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a7c      	ldr	r2, [pc, #496]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e030      	b.n	80013d6 <HAL_RCC_OscConfig+0x172>
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x134>
 800137e:	4b77      	ldr	r3, [pc, #476]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a76      	ldr	r2, [pc, #472]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b74      	ldr	r3, [pc, #464]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a73      	ldr	r2, [pc, #460]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e01e      	b.n	80013d6 <HAL_RCC_OscConfig+0x172>
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a2:	d10c      	bne.n	80013be <HAL_RCC_OscConfig+0x15a>
 80013a4:	4b6d      	ldr	r3, [pc, #436]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a6c      	ldr	r2, [pc, #432]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b6a      	ldr	r3, [pc, #424]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a69      	ldr	r2, [pc, #420]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e00b      	b.n	80013d6 <HAL_RCC_OscConfig+0x172>
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a66      	ldr	r2, [pc, #408]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b64      	ldr	r3, [pc, #400]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a63      	ldr	r2, [pc, #396]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013d6:	4b61      	ldr	r3, [pc, #388]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	f023 020f 	bic.w	r2, r3, #15
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	495d      	ldr	r1, [pc, #372]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d059      	beq.n	80014a8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fa5e 	bl	80008b4 <HAL_GetTick>
 80013f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fc:	e00a      	b.n	8001414 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fe:	f7ff fa59 	bl	80008b4 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d902      	bls.n	8001414 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	f000 be29 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
 8001414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001418:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001428:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d102      	bne.n	8001446 <HAL_RCC_OscConfig+0x1e2>
 8001440:	4b46      	ldr	r3, [pc, #280]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x20e>
 8001446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800145a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800145e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001462:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001476:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800147a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800147e:	fa92 f2a2 	rbit	r2, r2
 8001482:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001486:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800148a:	fab2 f282 	clz	r2, r2
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	f042 0220 	orr.w	r2, r2, #32
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	f002 021f 	and.w	r2, r2, #31
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0ab      	beq.n	80013fe <HAL_RCC_OscConfig+0x19a>
 80014a6:	e05c      	b.n	8001562 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fa04 	bl	80008b4 <HAL_GetTick>
 80014ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b0:	e00a      	b.n	80014c8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b2:	f7ff f9ff 	bl	80008b4 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d902      	bls.n	80014c8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	f000 bdcf 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
 80014c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80014dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d102      	bne.n	80014fa <HAL_RCC_OscConfig+0x296>
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	e015      	b.n	8001526 <HAL_RCC_OscConfig+0x2c2>
 80014fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800150e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001512:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001516:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800152e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001532:	fa92 f2a2 	rbit	r2, r2
 8001536:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800153a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800153e:	fab2 f282 	clz	r2, r2
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	f042 0220 	orr.w	r2, r2, #32
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	f002 021f 	and.w	r2, r2, #31
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ab      	bne.n	80014b2 <HAL_RCC_OscConfig+0x24e>
 800155a:	e002      	b.n	8001562 <HAL_RCC_OscConfig+0x2fe>
 800155c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 816f 	beq.w	8001850 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001572:	4bd0      	ldr	r3, [pc, #832]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800157e:	4bcd      	ldr	r3, [pc, #820]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b08      	cmp	r3, #8
 8001588:	d16c      	bne.n	8001664 <HAL_RCC_OscConfig+0x400>
 800158a:	4bca      	ldr	r3, [pc, #808]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d166      	bne.n	8001664 <HAL_RCC_OscConfig+0x400>
 8001596:	2302      	movs	r3, #2
 8001598:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015a0:	fa93 f3a3 	rbit	r3, r3
 80015a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80015a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d102      	bne.n	80015c6 <HAL_RCC_OscConfig+0x362>
 80015c0:	4bbc      	ldr	r3, [pc, #752]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	e013      	b.n	80015ee <HAL_RCC_OscConfig+0x38a>
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015cc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80015ea:	4bb2      	ldr	r3, [pc, #712]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	2202      	movs	r2, #2
 80015f0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80015f4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015f8:	fa92 f2a2 	rbit	r2, r2
 80015fc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001600:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001604:	fab2 f282 	clz	r2, r2
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	f042 0220 	orr.w	r2, r2, #32
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	f002 021f 	and.w	r2, r2, #31
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f202 	lsl.w	r2, r1, r2
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <HAL_RCC_OscConfig+0x3cc>
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d002      	beq.n	8001630 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	f000 bd1b 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4ba0      	ldr	r3, [pc, #640]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	21f8      	movs	r1, #248	; 0xf8
 8001640:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001648:	fa91 f1a1 	rbit	r1, r1
 800164c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001650:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001654:	fab1 f181 	clz	r1, r1
 8001658:	b2c9      	uxtb	r1, r1
 800165a:	408b      	lsls	r3, r1
 800165c:	4995      	ldr	r1, [pc, #596]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	e0f5      	b.n	8001850 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8085 	beq.w	800177a <HAL_RCC_OscConfig+0x516>
 8001670:	2301      	movs	r3, #1
 8001672:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001682:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001690:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	461a      	mov	r2, r3
 8001698:	2301      	movs	r3, #1
 800169a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff f90a 	bl	80008b4 <HAL_GetTick>
 80016a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff f905 	bl	80008b4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d902      	bls.n	80016bc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	f000 bcd5 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80016ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	095b      	lsrs	r3, r3, #5
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d102      	bne.n	80016ec <HAL_RCC_OscConfig+0x488>
 80016e6:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	e013      	b.n	8001714 <HAL_RCC_OscConfig+0x4b0>
 80016ec:	2302      	movs	r3, #2
 80016ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80016f6:	fa93 f3a3 	rbit	r3, r3
 80016fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016fe:	2302      	movs	r3, #2
 8001700:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001704:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001710:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	2202      	movs	r2, #2
 8001716:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800171a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800171e:	fa92 f2a2 	rbit	r2, r2
 8001722:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001726:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800172a:	fab2 f282 	clz	r2, r2
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	f042 0220 	orr.w	r2, r2, #32
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	f002 021f 	and.w	r2, r2, #31
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0af      	beq.n	80016a6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b5b      	ldr	r3, [pc, #364]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	21f8      	movs	r1, #248	; 0xf8
 8001756:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800175e:	fa91 f1a1 	rbit	r1, r1
 8001762:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001766:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800176a:	fab1 f181 	clz	r1, r1
 800176e:	b2c9      	uxtb	r1, r1
 8001770:	408b      	lsls	r3, r1
 8001772:	4950      	ldr	r1, [pc, #320]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
 8001778:	e06a      	b.n	8001850 <HAL_RCC_OscConfig+0x5ec>
 800177a:	2301      	movs	r3, #1
 800177c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800178c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800179a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	461a      	mov	r2, r3
 80017a2:	2300      	movs	r3, #0
 80017a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff f885 	bl	80008b4 <HAL_GetTick>
 80017aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff f880 	bl	80008b4 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d902      	bls.n	80017c6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	f000 bc50 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
 80017c6:	2302      	movs	r3, #2
 80017c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80017d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x592>
 80017f0:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	e013      	b.n	800181e <HAL_RCC_OscConfig+0x5ba>
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001808:	2302      	movs	r3, #2
 800180a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800180e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	2202      	movs	r2, #2
 8001820:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001824:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001828:	fa92 f2a2 	rbit	r2, r2
 800182c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001830:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001834:	fab2 f282 	clz	r2, r2
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f042 0220 	orr.w	r2, r2, #32
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	f002 021f 	and.w	r2, r2, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f202 	lsl.w	r2, r1, r2
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1af      	bne.n	80017b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80da 	beq.w	8001a14 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d069      	beq.n	800193e <HAL_RCC_OscConfig+0x6da>
 800186a:	2301      	movs	r3, #1
 800186c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800187c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_OscConfig+0x654>)
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	461a      	mov	r2, r3
 8001890:	2301      	movs	r3, #1
 8001892:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff f80e 	bl	80008b4 <HAL_GetTick>
 8001898:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189c:	e00e      	b.n	80018bc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff f809 	bl	80008b4 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d906      	bls.n	80018bc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e3d9      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	10908120 	.word	0x10908120
 80018bc:	2302      	movs	r3, #2
 80018be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018d2:	2202      	movs	r2, #2
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018ea:	2202      	movs	r2, #2
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	fa93 f2a3 	rbit	r2, r3
 80018f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80018fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	4ba5      	ldr	r3, [pc, #660]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001902:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001906:	2102      	movs	r1, #2
 8001908:	6019      	str	r1, [r3, #0]
 800190a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fa93 f1a3 	rbit	r1, r3
 8001914:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001918:	6019      	str	r1, [r3, #0]
  return result;
 800191a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0b0      	beq.n	800189e <HAL_RCC_OscConfig+0x63a>
 800193c:	e06a      	b.n	8001a14 <HAL_RCC_OscConfig+0x7b0>
 800193e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001954:	601a      	str	r2, [r3, #0]
  return result;
 8001956:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800195a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195c:	fab3 f383 	clz	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	4b8c      	ldr	r3, [pc, #560]	; (8001b98 <HAL_RCC_OscConfig+0x934>)
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	461a      	mov	r2, r3
 800196c:	2300      	movs	r3, #0
 800196e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7fe ffa0 	bl	80008b4 <HAL_GetTick>
 8001974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	e009      	b.n	800198e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197a:	f7fe ff9b 	bl	80008b4 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e36b      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 800198e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001992:	2202      	movs	r2, #2
 8001994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019aa:	2202      	movs	r2, #2
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	fa93 f2a3 	rbit	r2, r3
 80019b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019c2:	2202      	movs	r2, #2
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d6:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 80019d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019de:	2102      	movs	r1, #2
 80019e0:	6019      	str	r1, [r3, #0]
 80019e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fa93 f1a3 	rbit	r1, r3
 80019ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019f0:	6019      	str	r1, [r3, #0]
  return result;
 80019f2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1b2      	bne.n	800197a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8158 	beq.w	8001cd4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d112      	bne.n	8001a5c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b54      	ldr	r3, [pc, #336]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <HAL_RCC_OscConfig+0x938>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d11a      	bne.n	8001a9e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a68:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <HAL_RCC_OscConfig+0x938>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4b      	ldr	r2, [pc, #300]	; (8001b9c <HAL_RCC_OscConfig+0x938>)
 8001a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a72:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a74:	f7fe ff1e 	bl	80008b4 <HAL_GetTick>
 8001a78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7fe ff19 	bl	80008b4 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e2e9      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a92:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <HAL_RCC_OscConfig+0x938>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0ef      	beq.n	8001a7e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x852>
 8001aa8:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a39      	ldr	r2, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	e02f      	b.n	8001b16 <HAL_RCC_OscConfig+0x8b2>
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_OscConfig+0x876>
 8001ac0:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a30      	ldr	r2, [pc, #192]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001ad2:	f023 0304 	bic.w	r3, r3, #4
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	e01d      	b.n	8001b16 <HAL_RCC_OscConfig+0x8b2>
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d10c      	bne.n	8001afe <HAL_RCC_OscConfig+0x89a>
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4a2a      	ldr	r2, [pc, #168]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6213      	str	r3, [r2, #32]
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6213      	str	r3, [r2, #32]
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0x8b2>
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a24      	ldr	r2, [pc, #144]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6213      	str	r3, [r2, #32]
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d06b      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7fe fec8 	bl	80008b4 <HAL_GetTick>
 8001b24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	e00b      	b.n	8001b42 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7fe fec3 	bl	80008b4 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e291      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 8001b42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b46:	2202      	movs	r2, #2
 8001b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b5e:	2202      	movs	r2, #2
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b70:	601a      	str	r2, [r3, #0]
  return result;
 8001b72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d109      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x93c>
 8001b8c:	4b01      	ldr	r3, [pc, #4]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x958>
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	10908120 	.word	0x10908120
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	4bbb      	ldr	r3, [pc, #748]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	6011      	str	r1, [r2, #0]
 8001bc4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	fa92 f1a2 	rbit	r1, r2
 8001bce:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bd2:	6011      	str	r1, [r2, #0]
  return result;
 8001bd4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	fab2 f282 	clz	r2, r2
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f002 021f 	and.w	r2, r2, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d099      	beq.n	8001b2a <HAL_RCC_OscConfig+0x8c6>
 8001bf6:	e063      	b.n	8001cc0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7fe fe5c 	bl	80008b4 <HAL_GetTick>
 8001bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	e00b      	b.n	8001c1a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7fe fe57 	bl	80008b4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e225      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 8001c1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c1e:	2202      	movs	r2, #2
 8001c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c36:	2202      	movs	r2, #2
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c48:	601a      	str	r2, [r3, #0]
  return result;
 8001c4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f043 0302 	orr.w	r3, r3, #2
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d102      	bne.n	8001c6a <HAL_RCC_OscConfig+0xa06>
 8001c64:	4b90      	ldr	r3, [pc, #576]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	e00d      	b.n	8001c86 <HAL_RCC_OscConfig+0xa22>
 8001c6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c6e:	2202      	movs	r2, #2
 8001c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	4b89      	ldr	r3, [pc, #548]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	6011      	str	r1, [r2, #0]
 8001c8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	fa92 f1a2 	rbit	r1, r2
 8001c98:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c9c:	6011      	str	r1, [r2, #0]
  return result;
 8001c9e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f002 021f 	and.w	r2, r2, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1a0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc8:	4b77      	ldr	r3, [pc, #476]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	4a76      	ldr	r2, [pc, #472]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 81c2 	beq.w	8002064 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce0:	4b71      	ldr	r3, [pc, #452]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	f000 819c 	beq.w	8002026 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	f040 8114 	bne.w	8001f22 <HAL_RCC_OscConfig+0xcbe>
 8001cfa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001cfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d12:	601a      	str	r2, [r3, #0]
  return result;
 8001d14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe fdc0 	bl	80008b4 <HAL_GetTick>
 8001d34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d38:	e009      	b.n	8001d4e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7fe fdbb 	bl	80008b4 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e18b      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 8001d4e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d66:	601a      	str	r2, [r3, #0]
  return result;
 8001d68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_OscConfig+0xb24>
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	e01b      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb5c>
 8001d88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fa93 f2a3 	rbit	r2, r3
 8001d9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001da6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dc8:	6011      	str	r1, [r2, #0]
 8001dca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	fa92 f1a2 	rbit	r1, r2
 8001dd4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dd8:	6011      	str	r1, [r2, #0]
  return result;
 8001dda:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	fab2 f282 	clz	r2, r2
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f002 021f 	and.w	r2, r2, #31
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d19e      	bne.n	8001d3a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	4925      	ldr	r1, [pc, #148]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
 8001e18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e30:	601a      	str	r2, [r3, #0]
  return result;
 8001e32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e36:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fd31 	bl	80008b4 <HAL_GetTick>
 8001e52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e56:	e009      	b.n	8001e6c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e58:	f7fe fd2c 	bl	80008b4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0fc      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 8001e6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e84:	601a      	str	r2, [r3, #0]
  return result;
 8001e86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_RCC_OscConfig+0xc48>
 8001ea0:	4b01      	ldr	r3, [pc, #4]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	e01e      	b.n	8001ee4 <HAL_RCC_OscConfig+0xc80>
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	fa93 f2a3 	rbit	r2, r3
 8001eda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_OscConfig+0xe0c>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ee8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eec:	6011      	str	r1, [r2, #0]
 8001eee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	fa92 f1a2 	rbit	r1, r2
 8001ef8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001efc:	6011      	str	r1, [r2, #0]
  return result;
 8001efe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	fab2 f282 	clz	r2, r2
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	f042 0220 	orr.w	r2, r2, #32
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	f002 021f 	and.w	r2, r2, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d09b      	beq.n	8001e58 <HAL_RCC_OscConfig+0xbf4>
 8001f20:	e0a0      	b.n	8002064 <HAL_RCC_OscConfig+0xe00>
 8001f22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	fa93 f2a3 	rbit	r2, r3
 8001f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3a:	601a      	str	r2, [r3, #0]
  return result;
 8001f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f40:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	461a      	mov	r2, r3
 8001f54:	2300      	movs	r3, #0
 8001f56:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fcac 	bl	80008b4 <HAL_GetTick>
 8001f5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f60:	e009      	b.n	8001f76 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe fca7 	bl	80008b4 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e077      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 8001f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	601a      	str	r2, [r3, #0]
  return result;
 8001f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xd4c>
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCC_OscConfig+0xe0c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e01b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd84>
 8001fb0:	f107 0320 	add.w	r3, r7, #32
 8001fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f107 0320 	add.w	r3, r7, #32
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fa93 f2a3 	rbit	r2, r3
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	f107 0318 	add.w	r3, r7, #24
 8001fce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f107 0318 	add.w	r3, r7, #24
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <HAL_RCC_OscConfig+0xe0c>)
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	f107 0210 	add.w	r2, r7, #16
 8001fec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ff0:	6011      	str	r1, [r2, #0]
 8001ff2:	f107 0210 	add.w	r2, r7, #16
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	fa92 f1a2 	rbit	r1, r2
 8001ffc:	f107 020c 	add.w	r2, r7, #12
 8002000:	6011      	str	r1, [r2, #0]
  return result;
 8002002:	f107 020c 	add.w	r2, r7, #12
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	fab2 f282 	clz	r2, r2
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f042 0220 	orr.w	r2, r2, #32
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f002 021f 	and.w	r2, r2, #31
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f202 	lsl.w	r2, r1, r2
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d19e      	bne.n	8001f62 <HAL_RCC_OscConfig+0xcfe>
 8002024:	e01e      	b.n	8002064 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e018      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_RCC_OscConfig+0xe0c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800203c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	429a      	cmp	r2, r3
 800204c:	d108      	bne.n	8002060 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800204e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b09e      	sub	sp, #120	; 0x78
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e162      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b90      	ldr	r3, [pc, #576]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d910      	bls.n	80020bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b8d      	ldr	r3, [pc, #564]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	498b      	ldr	r1, [pc, #556]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e14a      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b82      	ldr	r3, [pc, #520]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	497f      	ldr	r1, [pc, #508]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80dc 	beq.w	80022a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d13c      	bne.n	800216a <HAL_RCC_ClockConfig+0xf6>
 80020f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d102      	bne.n	800211a <HAL_RCC_ClockConfig+0xa6>
 8002114:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	e00f      	b.n	800213a <HAL_RCC_ClockConfig+0xc6>
 800211a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800211e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	667b      	str	r3, [r7, #100]	; 0x64
 8002128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212c:	663b      	str	r3, [r7, #96]	; 0x60
 800212e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002136:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800213e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002140:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002142:	fa92 f2a2 	rbit	r2, r2
 8002146:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800214a:	fab2 f282 	clz	r2, r2
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	f042 0220 	orr.w	r2, r2, #32
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f002 021f 	and.w	r2, r2, #31
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d17b      	bne.n	800225e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0f3      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d13c      	bne.n	80021ec <HAL_RCC_ClockConfig+0x178>
 8002172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002176:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d102      	bne.n	800219c <HAL_RCC_ClockConfig+0x128>
 8002196:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	e00f      	b.n	80021bc <HAL_RCC_ClockConfig+0x148>
 800219c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	647b      	str	r3, [r7, #68]	; 0x44
 80021aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
 80021b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b8:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80021c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021c4:	fa92 f2a2 	rbit	r2, r2
 80021c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021cc:	fab2 f282 	clz	r2, r2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f042 0220 	orr.w	r2, r2, #32
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f002 021f 	and.w	r2, r2, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d13a      	bne.n	800225e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0b2      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
 80021ec:	2302      	movs	r3, #2
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_RCC_ClockConfig+0x1a0>
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	e00d      	b.n	8002230 <HAL_RCC_ClockConfig+0x1bc>
 8002214:	2302      	movs	r3, #2
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	2302      	movs	r3, #2
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	2202      	movs	r2, #2
 8002232:	61ba      	str	r2, [r7, #24]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	fa92 f2a2 	rbit	r2, r2
 800223a:	617a      	str	r2, [r7, #20]
  return result;
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f042 0220 	orr.w	r2, r2, #32
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f002 021f 	and.w	r2, r2, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e079      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	491a      	ldr	r1, [pc, #104]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002270:	f7fe fb20 	bl	80008b4 <HAL_GetTick>
 8002274:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	e00a      	b.n	800228e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7fe fb1c 	bl	80008b4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e061      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 020c 	and.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	429a      	cmp	r2, r3
 800229e:	d1eb      	bne.n	8002278 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d214      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4906      	ldr	r1, [pc, #24]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e040      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
 80022d0:	40022000 	.word	0x40022000
 80022d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	491a      	ldr	r1, [pc, #104]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4912      	ldr	r1, [pc, #72]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002316:	f000 f829 	bl	800236c <HAL_RCC_GetSysClockFreq>
 800231a:	4601      	mov	r1, r0
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002324:	22f0      	movs	r2, #240	; 0xf0
 8002326:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	fa92 f2a2 	rbit	r2, r2
 800232e:	60fa      	str	r2, [r7, #12]
  return result;
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	40d3      	lsrs	r3, r2
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x2ec>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	fa21 f303 	lsr.w	r3, r1, r3
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_RCC_ClockConfig+0x2f0>)
 8002344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_RCC_ClockConfig+0x2f4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fa6e 	bl	800082c <HAL_InitTick>
  
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3778      	adds	r7, #120	; 0x78
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	08002d60 	.word	0x08002d60
 8002364:	20000024 	.word	0x20000024
 8002368:	20000028 	.word	0x20000028

0800236c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b08b      	sub	sp, #44	; 0x2c
 8002370:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d002      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x30>
 8002396:	2b08      	cmp	r3, #8
 8002398:	d003      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x36>
 800239a:	e03c      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc4>)
 800239e:	623b      	str	r3, [r7, #32]
      break;
 80023a0:	e03c      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	fa92 f2a2 	rbit	r2, r2
 80023b4:	607a      	str	r2, [r7, #4]
  return result;
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	fab2 f282 	clz	r2, r2
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	40d3      	lsrs	r3, r2
 80023c0:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	220f      	movs	r2, #15
 80023d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	fa92 f2a2 	rbit	r2, r2
 80023d8:	60fa      	str	r2, [r7, #12]
  return result;
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	fab2 f282 	clz	r2, r2
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	40d3      	lsrs	r3, r2
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
 8002404:	e004      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	4a0c      	ldr	r2, [pc, #48]	; (800243c <HAL_RCC_GetSysClockFreq+0xd0>)
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	623b      	str	r3, [r7, #32]
      break;
 8002414:	e002      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002418:	623b      	str	r3, [r7, #32]
      break;
 800241a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241c:	6a3b      	ldr	r3, [r7, #32]
}
 800241e:	4618      	mov	r0, r3
 8002420:	372c      	adds	r7, #44	; 0x2c
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	007a1200 	.word	0x007a1200
 8002434:	08002d70 	.word	0x08002d70
 8002438:	08002d80 	.word	0x08002d80
 800243c:	003d0900 	.word	0x003d0900

08002440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e049      	b.n	80024e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe f936 	bl	80006d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f000 fa98 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d001      	beq.n	8002508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e040      	b.n	800258a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <HAL_TIM_Base_Start_IT+0xa8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x58>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002532:	d009      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x58>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a18      	ldr	r2, [pc, #96]	; (800259c <HAL_TIM_Base_Start_IT+0xac>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x58>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d115      	bne.n	8002574 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d015      	beq.n	8002586 <HAL_TIM_Base_Start_IT+0x96>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d011      	beq.n	8002586 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002572:	e008      	b.n	8002586 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e000      	b.n	8002588 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40012c00 	.word	0x40012c00
 800259c:	40000400 	.word	0x40000400
 80025a0:	40014000 	.word	0x40014000
 80025a4:	00010007 	.word	0x00010007

080025a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0202 	mvn.w	r2, #2
 80025d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f9c3 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f9b5 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f9c6 	bl	800298a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d122      	bne.n	8002658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b04      	cmp	r3, #4
 800261e:	d11b      	bne.n	8002658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0204 	mvn.w	r2, #4
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f999 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f98b 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f99c 	bl	800298a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b08      	cmp	r3, #8
 8002664:	d122      	bne.n	80026ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b08      	cmp	r3, #8
 8002672:	d11b      	bne.n	80026ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0208 	mvn.w	r2, #8
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2204      	movs	r2, #4
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f96f 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f961 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f972 	bl	800298a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d122      	bne.n	8002700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d11b      	bne.n	8002700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0210 	mvn.w	r2, #16
 80026d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2208      	movs	r2, #8
 80026d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f945 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f937 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f948 	bl	800298a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10e      	bne.n	800272c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d107      	bne.n	800272c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0201 	mvn.w	r2, #1
 8002724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fd fd78 	bl	800021c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b80      	cmp	r3, #128	; 0x80
 8002738:	d10e      	bne.n	8002758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b80      	cmp	r3, #128	; 0x80
 8002746:	d107      	bne.n	8002758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fab8 	bl	8002cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002766:	d10e      	bne.n	8002786 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002772:	2b80      	cmp	r3, #128	; 0x80
 8002774:	d107      	bne.n	8002786 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800277e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 faab 	bl	8002cdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d10e      	bne.n	80027b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279e:	2b40      	cmp	r3, #64	; 0x40
 80027a0:	d107      	bne.n	80027b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f8f6 	bl	800299e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d10e      	bne.n	80027de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d107      	bne.n	80027de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f06f 0220 	mvn.w	r2, #32
 80027d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fa6b 	bl	8002cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_TIM_ConfigClockSource+0x1c>
 80027fe:	2302      	movs	r3, #2
 8002800:	e0ab      	b.n	800295a <HAL_TIM_ConfigClockSource+0x174>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2202      	movs	r2, #2
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002820:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002824:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d067      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x128>
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d80b      	bhi.n	800285a <HAL_TIM_ConfigClockSource+0x74>
 8002842:	2b10      	cmp	r3, #16
 8002844:	d073      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x148>
 8002846:	2b10      	cmp	r3, #16
 8002848:	d802      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x6a>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d06f      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x148>
 800284e:	e077      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x15a>
 8002850:	2b20      	cmp	r3, #32
 8002852:	d06c      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x148>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d06a      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x148>
 8002858:	e072      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x15a>
 800285a:	2b70      	cmp	r3, #112	; 0x70
 800285c:	d00d      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x94>
 800285e:	2b70      	cmp	r3, #112	; 0x70
 8002860:	d804      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x86>
 8002862:	2b50      	cmp	r3, #80	; 0x50
 8002864:	d033      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xe8>
 8002866:	2b60      	cmp	r3, #96	; 0x60
 8002868:	d041      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x108>
 800286a:	e069      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x15a>
 800286c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002870:	d069      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x160>
 8002872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002876:	d017      	beq.n	80028a8 <HAL_TIM_ConfigClockSource+0xc2>
 8002878:	e062      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f000 f985 	bl	8002b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800289c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	609a      	str	r2, [r3, #8]
      break;
 80028a6:	e04f      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f000 f96e 	bl	8002b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ca:	609a      	str	r2, [r3, #8]
      break;
 80028cc:	e03c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 f8e2 	bl	8002aa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2150      	movs	r1, #80	; 0x50
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f93b 	bl	8002b62 <TIM_ITRx_SetConfig>
      break;
 80028ec:	e02c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 f901 	bl	8002b02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2160      	movs	r1, #96	; 0x60
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f92b 	bl	8002b62 <TIM_ITRx_SetConfig>
      break;
 800290c:	e01c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	461a      	mov	r2, r3
 800291c:	f000 f8c2 	bl	8002aa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f91b 	bl	8002b62 <TIM_ITRx_SetConfig>
      break;
 800292c:	e00c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	4610      	mov	r0, r2
 800293a:	f000 f912 	bl	8002b62 <TIM_ITRx_SetConfig>
      break;
 800293e:	e003      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      break;
 8002944:	e000      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8002946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a32      	ldr	r2, [pc, #200]	; (8002a90 <TIM_Base_SetConfig+0xdc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <TIM_Base_SetConfig+0x28>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d003      	beq.n	80029dc <TIM_Base_SetConfig+0x28>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a2f      	ldr	r2, [pc, #188]	; (8002a94 <TIM_Base_SetConfig+0xe0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d108      	bne.n	80029ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <TIM_Base_SetConfig+0xdc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <TIM_Base_SetConfig+0x6a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d00f      	beq.n	8002a1e <TIM_Base_SetConfig+0x6a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <TIM_Base_SetConfig+0xe0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00b      	beq.n	8002a1e <TIM_Base_SetConfig+0x6a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a23      	ldr	r2, [pc, #140]	; (8002a98 <TIM_Base_SetConfig+0xe4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <TIM_Base_SetConfig+0x6a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <TIM_Base_SetConfig+0xe8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d003      	beq.n	8002a1e <TIM_Base_SetConfig+0x6a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a21      	ldr	r2, [pc, #132]	; (8002aa0 <TIM_Base_SetConfig+0xec>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d108      	bne.n	8002a30 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <TIM_Base_SetConfig+0xdc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00b      	beq.n	8002a74 <TIM_Base_SetConfig+0xc0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <TIM_Base_SetConfig+0xe4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <TIM_Base_SetConfig+0xc0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <TIM_Base_SetConfig+0xe8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <TIM_Base_SetConfig+0xc0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <TIM_Base_SetConfig+0xec>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	615a      	str	r2, [r3, #20]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40014000 	.word	0x40014000
 8002a9c:	40014400 	.word	0x40014400
 8002aa0:	40014800 	.word	0x40014800

08002aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f023 0201 	bic.w	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f023 030a 	bic.w	r3, r3, #10
 8002ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	621a      	str	r2, [r3, #32]
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b087      	sub	sp, #28
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	f023 0210 	bic.w	r2, r3, #16
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	031b      	lsls	r3, r3, #12
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	621a      	str	r2, [r3, #32]
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b085      	sub	sp, #20
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f043 0307 	orr.w	r3, r3, #7
 8002b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	021a      	lsls	r2, r3, #8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	609a      	str	r2, [r3, #8]
}
 8002bcc:	bf00      	nop
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e054      	b.n	8002c9a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a24      	ldr	r2, [pc, #144]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d108      	bne.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00e      	beq.n	8002c6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d009      	beq.n	8002c6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a13      	ldr	r2, [pc, #76]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a11      	ldr	r2, [pc, #68]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10c      	bne.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40014000 	.word	0x40014000

08002cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <__libc_init_array>:
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	4e0d      	ldr	r6, [pc, #52]	; (8002d28 <__libc_init_array+0x38>)
 8002cf4:	4c0d      	ldr	r4, [pc, #52]	; (8002d2c <__libc_init_array+0x3c>)
 8002cf6:	1ba4      	subs	r4, r4, r6
 8002cf8:	10a4      	asrs	r4, r4, #2
 8002cfa:	2500      	movs	r5, #0
 8002cfc:	42a5      	cmp	r5, r4
 8002cfe:	d109      	bne.n	8002d14 <__libc_init_array+0x24>
 8002d00:	4e0b      	ldr	r6, [pc, #44]	; (8002d30 <__libc_init_array+0x40>)
 8002d02:	4c0c      	ldr	r4, [pc, #48]	; (8002d34 <__libc_init_array+0x44>)
 8002d04:	f000 f820 	bl	8002d48 <_init>
 8002d08:	1ba4      	subs	r4, r4, r6
 8002d0a:	10a4      	asrs	r4, r4, #2
 8002d0c:	2500      	movs	r5, #0
 8002d0e:	42a5      	cmp	r5, r4
 8002d10:	d105      	bne.n	8002d1e <__libc_init_array+0x2e>
 8002d12:	bd70      	pop	{r4, r5, r6, pc}
 8002d14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d18:	4798      	blx	r3
 8002d1a:	3501      	adds	r5, #1
 8002d1c:	e7ee      	b.n	8002cfc <__libc_init_array+0xc>
 8002d1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d22:	4798      	blx	r3
 8002d24:	3501      	adds	r5, #1
 8002d26:	e7f2      	b.n	8002d0e <__libc_init_array+0x1e>
 8002d28:	08002d90 	.word	0x08002d90
 8002d2c:	08002d90 	.word	0x08002d90
 8002d30:	08002d90 	.word	0x08002d90
 8002d34:	08002d94 	.word	0x08002d94

08002d38 <memset>:
 8002d38:	4402      	add	r2, r0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d100      	bne.n	8002d42 <memset+0xa>
 8002d40:	4770      	bx	lr
 8002d42:	f803 1b01 	strb.w	r1, [r3], #1
 8002d46:	e7f9      	b.n	8002d3c <memset+0x4>

08002d48 <_init>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	bf00      	nop
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr

08002d54 <_fini>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	bf00      	nop
 8002d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	469e      	mov	lr, r3
 8002d5e:	4770      	bx	lr
