
MainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004260  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004470  08004470  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004478  08004478  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000018  08004498  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08004498  00020150  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6d7  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c54  00000000  00000000  0002b71d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e0  00000000  00000000  0002d378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002dd58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000278ad  00000000  00000000  0002e680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000850a  00000000  00000000  00055f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4564  00000000  00000000  0005e437  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015299b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002798  00000000  00000000  00152a18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000018 	.word	0x20000018
 8000214:	00000000 	.word	0x00000000
 8000218:	08004440 	.word	0x08004440

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000001c 	.word	0x2000001c
 8000234:	08004440 	.word	0x08004440

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_UART_RxCpltCallback>:

uint8_t speed_control='N';
uint8_t speed_button_off=1;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a6a      	ldr	r2, [pc, #424]	; (80006f0 <HAL_UART_RxCpltCallback+0x1b8>)
 8000546:	4293      	cmp	r3, r2
 8000548:	f040 80ca 	bne.w	80006e0 <HAL_UART_RxCpltCallback+0x1a8>
	{

		switch(sirial_step){
 800054c:	4b69      	ldr	r3, [pc, #420]	; (80006f4 <HAL_UART_RxCpltCallback+0x1bc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d000      	beq.n	8000556 <HAL_UART_RxCpltCallback+0x1e>

			break;
*/

		default:
			break;
 8000554:	e0c7      	b.n	80006e6 <HAL_UART_RxCpltCallback+0x1ae>
			 if(HAL_UART_Receive_IT(&huart5, (uint8_t*) &UART5_Data, 1)==HAL_OK){
 8000556:	2201      	movs	r2, #1
 8000558:	4967      	ldr	r1, [pc, #412]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 800055a:	4868      	ldr	r0, [pc, #416]	; (80006fc <HAL_UART_RxCpltCallback+0x1c4>)
 800055c:	f002 ff5a 	bl	8003414 <HAL_UART_Receive_IT>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	f040 80be 	bne.w	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 if(UART5_Data=='i'){
 8000568:	4b63      	ldr	r3, [pc, #396]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b69      	cmp	r3, #105	; 0x69
 800056e:	f000 80b9 	beq.w	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='A'){
 8000572:	4b61      	ldr	r3, [pc, #388]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b41      	cmp	r3, #65	; 0x41
 8000578:	d103      	bne.n	8000582 <HAL_UART_RxCpltCallback+0x4a>
					 hand_rotate='L';
 800057a:	4b61      	ldr	r3, [pc, #388]	; (8000700 <HAL_UART_RxCpltCallback+0x1c8>)
 800057c:	224c      	movs	r2, #76	; 0x4c
 800057e:	701a      	strb	r2, [r3, #0]
			break;
 8000580:	e0b0      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='V'){
 8000582:	4b5d      	ldr	r3, [pc, #372]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b56      	cmp	r3, #86	; 0x56
 8000588:	d103      	bne.n	8000592 <HAL_UART_RxCpltCallback+0x5a>
					 hand_rotate='N';
 800058a:	4b5d      	ldr	r3, [pc, #372]	; (8000700 <HAL_UART_RxCpltCallback+0x1c8>)
 800058c:	224e      	movs	r2, #78	; 0x4e
 800058e:	701a      	strb	r2, [r3, #0]
			break;
 8000590:	e0a8      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='C'){
 8000592:	4b59      	ldr	r3, [pc, #356]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b43      	cmp	r3, #67	; 0x43
 8000598:	d103      	bne.n	80005a2 <HAL_UART_RxCpltCallback+0x6a>
					 hand_rotate='R';
 800059a:	4b59      	ldr	r3, [pc, #356]	; (8000700 <HAL_UART_RxCpltCallback+0x1c8>)
 800059c:	2252      	movs	r2, #82	; 0x52
 800059e:	701a      	strb	r2, [r3, #0]
			break;
 80005a0:	e0a0      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='e'){
 80005a2:	4b55      	ldr	r3, [pc, #340]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b65      	cmp	r3, #101	; 0x65
 80005a8:	d103      	bne.n	80005b2 <HAL_UART_RxCpltCallback+0x7a>
					 hand_UD='U';
 80005aa:	4b56      	ldr	r3, [pc, #344]	; (8000704 <HAL_UART_RxCpltCallback+0x1cc>)
 80005ac:	2255      	movs	r2, #85	; 0x55
 80005ae:	701a      	strb	r2, [r3, #0]
			break;
 80005b0:	e098      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='F'){
 80005b2:	4b51      	ldr	r3, [pc, #324]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b46      	cmp	r3, #70	; 0x46
 80005b8:	d103      	bne.n	80005c2 <HAL_UART_RxCpltCallback+0x8a>
				 	 hand_UD='N';
 80005ba:	4b52      	ldr	r3, [pc, #328]	; (8000704 <HAL_UART_RxCpltCallback+0x1cc>)
 80005bc:	224e      	movs	r2, #78	; 0x4e
 80005be:	701a      	strb	r2, [r3, #0]
			break;
 80005c0:	e090      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='g'){
 80005c2:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b67      	cmp	r3, #103	; 0x67
 80005c8:	d103      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x9a>
					 hand_UD='D';
 80005ca:	4b4e      	ldr	r3, [pc, #312]	; (8000704 <HAL_UART_RxCpltCallback+0x1cc>)
 80005cc:	2244      	movs	r2, #68	; 0x44
 80005ce:	701a      	strb	r2, [r3, #0]
			break;
 80005d0:	e088      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='k'){
 80005d2:	4b49      	ldr	r3, [pc, #292]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b6b      	cmp	r3, #107	; 0x6b
 80005d8:	d103      	bne.n	80005e2 <HAL_UART_RxCpltCallback+0xaa>
					 hand_shrink='S';
 80005da:	4b4b      	ldr	r3, [pc, #300]	; (8000708 <HAL_UART_RxCpltCallback+0x1d0>)
 80005dc:	2253      	movs	r2, #83	; 0x53
 80005de:	701a      	strb	r2, [r3, #0]
			break;
 80005e0:	e080      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='L'){
 80005e2:	4b45      	ldr	r3, [pc, #276]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b4c      	cmp	r3, #76	; 0x4c
 80005e8:	d103      	bne.n	80005f2 <HAL_UART_RxCpltCallback+0xba>
					 hand_shrink='N';
 80005ea:	4b47      	ldr	r3, [pc, #284]	; (8000708 <HAL_UART_RxCpltCallback+0x1d0>)
 80005ec:	224e      	movs	r2, #78	; 0x4e
 80005ee:	701a      	strb	r2, [r3, #0]
			break;
 80005f0:	e078      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='m'){
 80005f2:	4b41      	ldr	r3, [pc, #260]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b6d      	cmp	r3, #109	; 0x6d
 80005f8:	d103      	bne.n	8000602 <HAL_UART_RxCpltCallback+0xca>
					 hand_shrink='E';
 80005fa:	4b43      	ldr	r3, [pc, #268]	; (8000708 <HAL_UART_RxCpltCallback+0x1d0>)
 80005fc:	2245      	movs	r2, #69	; 0x45
 80005fe:	701a      	strb	r2, [r3, #0]
			break;
 8000600:	e070      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='o'){
 8000602:	4b3d      	ldr	r3, [pc, #244]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b6f      	cmp	r3, #111	; 0x6f
 8000608:	d103      	bne.n	8000612 <HAL_UART_RxCpltCallback+0xda>
					 hand_interval='L';
 800060a:	4b40      	ldr	r3, [pc, #256]	; (800070c <HAL_UART_RxCpltCallback+0x1d4>)
 800060c:	224c      	movs	r2, #76	; 0x4c
 800060e:	701a      	strb	r2, [r3, #0]
			break;
 8000610:	e068      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='P'){
 8000612:	4b39      	ldr	r3, [pc, #228]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b50      	cmp	r3, #80	; 0x50
 8000618:	d103      	bne.n	8000622 <HAL_UART_RxCpltCallback+0xea>
					 hand_interval='N';
 800061a:	4b3c      	ldr	r3, [pc, #240]	; (800070c <HAL_UART_RxCpltCallback+0x1d4>)
 800061c:	224e      	movs	r2, #78	; 0x4e
 800061e:	701a      	strb	r2, [r3, #0]
			break;
 8000620:	e060      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='q'){
 8000622:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b71      	cmp	r3, #113	; 0x71
 8000628:	d103      	bne.n	8000632 <HAL_UART_RxCpltCallback+0xfa>
					 hand_interval='S';
 800062a:	4b38      	ldr	r3, [pc, #224]	; (800070c <HAL_UART_RxCpltCallback+0x1d4>)
 800062c:	2253      	movs	r2, #83	; 0x53
 800062e:	701a      	strb	r2, [r3, #0]
			break;
 8000630:	e058      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='s'){
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b73      	cmp	r3, #115	; 0x73
 8000638:	d103      	bne.n	8000642 <HAL_UART_RxCpltCallback+0x10a>
					 hand_OC='O';
 800063a:	4b35      	ldr	r3, [pc, #212]	; (8000710 <HAL_UART_RxCpltCallback+0x1d8>)
 800063c:	224f      	movs	r2, #79	; 0x4f
 800063e:	701a      	strb	r2, [r3, #0]
			break;
 8000640:	e050      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='T'){
 8000642:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b54      	cmp	r3, #84	; 0x54
 8000648:	d103      	bne.n	8000652 <HAL_UART_RxCpltCallback+0x11a>
					 hand_OC='N';
 800064a:	4b31      	ldr	r3, [pc, #196]	; (8000710 <HAL_UART_RxCpltCallback+0x1d8>)
 800064c:	224e      	movs	r2, #78	; 0x4e
 800064e:	701a      	strb	r2, [r3, #0]
			break;
 8000650:	e048      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='u'){
 8000652:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b75      	cmp	r3, #117	; 0x75
 8000658:	d103      	bne.n	8000662 <HAL_UART_RxCpltCallback+0x12a>
					 hand_OC='C';
 800065a:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <HAL_UART_RxCpltCallback+0x1d8>)
 800065c:	2243      	movs	r2, #67	; 0x43
 800065e:	701a      	strb	r2, [r3, #0]
			break;
 8000660:	e040      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='y'){
 8000662:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b79      	cmp	r3, #121	; 0x79
 8000668:	d103      	bne.n	8000672 <HAL_UART_RxCpltCallback+0x13a>
					 speed_button_off=1;
 800066a:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <HAL_UART_RxCpltCallback+0x1dc>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
			break;
 8000670:	e038      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='w'){
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b77      	cmp	r3, #119	; 0x77
 8000678:	d112      	bne.n	80006a0 <HAL_UART_RxCpltCallback+0x168>
					 if(speed_button_off==1){
 800067a:	4b26      	ldr	r3, [pc, #152]	; (8000714 <HAL_UART_RxCpltCallback+0x1dc>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d130      	bne.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
						 speed_button_off=0;
 8000682:	4b24      	ldr	r3, [pc, #144]	; (8000714 <HAL_UART_RxCpltCallback+0x1dc>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
						 if(speed_control=='S'){
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <HAL_UART_RxCpltCallback+0x1e0>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b53      	cmp	r3, #83	; 0x53
 800068e:	d103      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x160>
							 speed_control='N';
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <HAL_UART_RxCpltCallback+0x1e0>)
 8000692:	224e      	movs	r2, #78	; 0x4e
 8000694:	701a      	strb	r2, [r3, #0]
			break;
 8000696:	e025      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
							 speed_control='S';
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <HAL_UART_RxCpltCallback+0x1e0>)
 800069a:	2253      	movs	r2, #83	; 0x53
 800069c:	701a      	strb	r2, [r3, #0]
			break;
 800069e:	e021      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='a'){
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b61      	cmp	r3, #97	; 0x61
 80006a6:	d103      	bne.n	80006b0 <HAL_UART_RxCpltCallback+0x178>
					 hand_root_Rotate='L';
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <HAL_UART_RxCpltCallback+0x1e4>)
 80006aa:	224c      	movs	r2, #76	; 0x4c
 80006ac:	701a      	strb	r2, [r3, #0]
			break;
 80006ae:	e019      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='X'){
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b58      	cmp	r3, #88	; 0x58
 80006b6:	d103      	bne.n	80006c0 <HAL_UART_RxCpltCallback+0x188>
					 hand_root_Rotate='N';
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <HAL_UART_RxCpltCallback+0x1e4>)
 80006ba:	224e      	movs	r2, #78	; 0x4e
 80006bc:	701a      	strb	r2, [r3, #0]
			break;
 80006be:	e011      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='c'){
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b63      	cmp	r3, #99	; 0x63
 80006c6:	d103      	bne.n	80006d0 <HAL_UART_RxCpltCallback+0x198>
					 hand_root_Rotate='R';
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <HAL_UART_RxCpltCallback+0x1e4>)
 80006ca:	2252      	movs	r2, #82	; 0x52
 80006cc:	701a      	strb	r2, [r3, #0]
			break;
 80006ce:	e009      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
				 else if(UART5_Data=='N'){
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_UART_RxCpltCallback+0x1c0>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b4e      	cmp	r3, #78	; 0x4e
 80006d6:	d105      	bne.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>
					 shooter_start='T';
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <HAL_UART_RxCpltCallback+0x1e8>)
 80006da:	2254      	movs	r2, #84	; 0x54
 80006dc:	701a      	strb	r2, [r3, #0]
			break;
 80006de:	e001      	b.n	80006e4 <HAL_UART_RxCpltCallback+0x1ac>

		}



	}
 80006e0:	bf00      	nop
 80006e2:	e000      	b.n	80006e6 <HAL_UART_RxCpltCallback+0x1ae>
			break;
 80006e4:	bf00      	nop
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40005000 	.word	0x40005000
 80006f4:	20000034 	.word	0x20000034
 80006f8:	20000039 	.word	0x20000039
 80006fc:	20000040 	.word	0x20000040
 8000700:	20000004 	.word	0x20000004
 8000704:	20000000 	.word	0x20000000
 8000708:	20000002 	.word	0x20000002
 800070c:	20000003 	.word	0x20000003
 8000710:	20000001 	.word	0x20000001
 8000714:	20000008 	.word	0x20000008
 8000718:	20000007 	.word	0x20000007
 800071c:	20000005 	.word	0x20000005
 8000720:	20000006 	.word	0x20000006

08000724 <Filter_Init>:
CAN_TxHeaderTypeDef TxHeader;
uint32_t TxMailbox;
uint8_t TxData[8];

CAN_FilterTypeDef filter;
void Filter_Init(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	filter.FilterIdHigh         = 0;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <Filter_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
	filter.FilterIdLow          = 0;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <Filter_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	605a      	str	r2, [r3, #4]
	filter.FilterMaskIdHigh     = 0;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <Filter_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow      = 0;
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <Filter_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <Filter_Init+0x4c>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <Filter_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
	filter.FilterBank           = 0;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <Filter_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
	filter.FilterMode           = CAN_FILTERMODE_IDMASK;
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <Filter_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
	filter.SlaveStartFilterBank = 14;
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <Filter_Init+0x4c>)
 800075a:	220e      	movs	r2, #14
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
	filter.FilterActivation     = ENABLE;
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <Filter_Init+0x4c>)
 8000760:	2201      	movs	r2, #1
 8000762:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan1, &filter);
 8000764:	4902      	ldr	r1, [pc, #8]	; (8000770 <Filter_Init+0x4c>)
 8000766:	4803      	ldr	r0, [pc, #12]	; (8000774 <Filter_Init+0x50>)
 8000768:	f000 fcf4 	bl	8001154 <HAL_CAN_ConfigFilter>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000c8 	.word	0x200000c8
 8000774:	20000108 	.word	0x20000108

08000778 <Send_Data>:


void Send_Data(){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)){
 800077c:	4820      	ldr	r0, [pc, #128]	; (8000800 <Send_Data+0x88>)
 800077e:	f000 fef4 	bl	800156a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d038      	beq.n	80007fa <Send_Data+0x82>

		  TxHeader.StdId = 0x552;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <Send_Data+0x8c>)
 800078a:	f240 5252 	movw	r2, #1362	; 0x552
 800078e:	601a      	str	r2, [r3, #0]
		  TxHeader.RTR = CAN_RTR_DATA;
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <Send_Data+0x8c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
		  TxHeader.IDE = CAN_ID_STD;
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <Send_Data+0x8c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
		  TxHeader.DLC = 8;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <Send_Data+0x8c>)
 800079e:	2208      	movs	r2, #8
 80007a0:	611a      	str	r2, [r3, #16]
		  TxHeader.TransmitGlobalTime = DISABLE;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <Send_Data+0x8c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	751a      	strb	r2, [r3, #20]
		  TxData[0] = hand_UD;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <Send_Data+0x90>)
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <Send_Data+0x94>)
 80007ae:	701a      	strb	r2, [r3, #0]
		  TxData[1] = hand_OC;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <Send_Data+0x98>)
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <Send_Data+0x94>)
 80007b6:	705a      	strb	r2, [r3, #1]
		  TxData[2] = hand_shrink;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <Send_Data+0x9c>)
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <Send_Data+0x94>)
 80007be:	709a      	strb	r2, [r3, #2]
		  TxData[3] = hand_interval;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <Send_Data+0xa0>)
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <Send_Data+0x94>)
 80007c6:	70da      	strb	r2, [r3, #3]
		  TxData[4] = hand_rotate;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <Send_Data+0xa4>)
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <Send_Data+0x94>)
 80007ce:	711a      	strb	r2, [r3, #4]
		  TxData[5] = hand_root_Rotate;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <Send_Data+0xa8>)
 80007d2:	781a      	ldrb	r2, [r3, #0]
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <Send_Data+0x94>)
 80007d6:	715a      	strb	r2, [r3, #5]
		  TxData[6] = shooter_start;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <Send_Data+0xac>)
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <Send_Data+0x94>)
 80007de:	719a      	strb	r2, [r3, #6]
		  TxData[7] = speed_control;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <Send_Data+0xb0>)
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <Send_Data+0x94>)
 80007e6:	71da      	strb	r2, [r3, #7]
		  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)==HAL_OK){
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <Send_Data+0xb4>)
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <Send_Data+0x94>)
 80007ec:	4905      	ldr	r1, [pc, #20]	; (8000804 <Send_Data+0x8c>)
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <Send_Data+0x88>)
 80007f0:	f000 fde0 	bl	80013b4 <HAL_CAN_AddTxMessage>
			  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
		  }
		  shooter_start='F';
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <Send_Data+0xac>)
 80007f6:	2246      	movs	r2, #70	; 0x46
 80007f8:	701a      	strb	r2, [r3, #0]
	 }
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000108 	.word	0x20000108
 8000804:	20000130 	.word	0x20000130
 8000808:	20000000 	.word	0x20000000
 800080c:	200000fc 	.word	0x200000fc
 8000810:	20000001 	.word	0x20000001
 8000814:	20000002 	.word	0x20000002
 8000818:	20000003 	.word	0x20000003
 800081c:	20000004 	.word	0x20000004
 8000820:	20000005 	.word	0x20000005
 8000824:	20000006 	.word	0x20000006
 8000828:	20000007 	.word	0x20000007
 800082c:	20000104 	.word	0x20000104

08000830 <Send_Data2>:

uint8_t InputData[2];

void Send_Data2(){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)){
 8000834:	4829      	ldr	r0, [pc, #164]	; (80008dc <Send_Data2+0xac>)
 8000836:	f000 fe98 	bl	800156a <HAL_CAN_GetTxMailboxesFreeLevel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d04b      	beq.n	80008d8 <Send_Data2+0xa8>

		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET)
 8000840:	2108      	movs	r1, #8
 8000842:	4827      	ldr	r0, [pc, #156]	; (80008e0 <Send_Data2+0xb0>)
 8000844:	f001 fc6e 	bl	8002124 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d103      	bne.n	8000856 <Send_Data2+0x26>
		{
			InputData[0]='F';
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <Send_Data2+0xb4>)
 8000850:	2246      	movs	r2, #70	; 0x46
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e002      	b.n	800085c <Send_Data2+0x2c>
		}
		else{
			InputData[0]='T';
 8000856:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <Send_Data2+0xb4>)
 8000858:	2254      	movs	r2, #84	; 0x54
 800085a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_RESET)
 800085c:	2110      	movs	r1, #16
 800085e:	4820      	ldr	r0, [pc, #128]	; (80008e0 <Send_Data2+0xb0>)
 8000860:	f001 fc60 	bl	8002124 <HAL_GPIO_ReadPin>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d103      	bne.n	8000872 <Send_Data2+0x42>
		{
			InputData[1]='F';
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <Send_Data2+0xb4>)
 800086c:	2246      	movs	r2, #70	; 0x46
 800086e:	705a      	strb	r2, [r3, #1]
 8000870:	e002      	b.n	8000878 <Send_Data2+0x48>
		}
		else{
			InputData[1]='T';
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <Send_Data2+0xb4>)
 8000874:	2254      	movs	r2, #84	; 0x54
 8000876:	705a      	strb	r2, [r3, #1]
		}


		  TxHeader.StdId = 0x334;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <Send_Data2+0xb8>)
 800087a:	f44f 724d 	mov.w	r2, #820	; 0x334
 800087e:	601a      	str	r2, [r3, #0]
		  TxHeader.RTR = CAN_RTR_DATA;
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <Send_Data2+0xb8>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
		  TxHeader.IDE = CAN_ID_STD;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <Send_Data2+0xb8>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
		  TxHeader.DLC = 8;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <Send_Data2+0xb8>)
 800088e:	2208      	movs	r2, #8
 8000890:	611a      	str	r2, [r3, #16]
		  TxHeader.TransmitGlobalTime = DISABLE;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <Send_Data2+0xb8>)
 8000894:	2200      	movs	r2, #0
 8000896:	751a      	strb	r2, [r3, #20]
		  TxData[0] = InputData[0];
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <Send_Data2+0xb4>)
 800089a:	781a      	ldrb	r2, [r3, #0]
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <Send_Data2+0xbc>)
 800089e:	701a      	strb	r2, [r3, #0]
		  TxData[1] = InputData[1];
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <Send_Data2+0xb4>)
 80008a2:	785a      	ldrb	r2, [r3, #1]
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <Send_Data2+0xbc>)
 80008a6:	705a      	strb	r2, [r3, #1]
		  TxData[2] = 0x33;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <Send_Data2+0xbc>)
 80008aa:	2233      	movs	r2, #51	; 0x33
 80008ac:	709a      	strb	r2, [r3, #2]
		  TxData[3] = 0x44;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <Send_Data2+0xbc>)
 80008b0:	2244      	movs	r2, #68	; 0x44
 80008b2:	70da      	strb	r2, [r3, #3]
		  TxData[4] = 0x55;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <Send_Data2+0xbc>)
 80008b6:	2255      	movs	r2, #85	; 0x55
 80008b8:	711a      	strb	r2, [r3, #4]
		  TxData[5] = 0x66;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <Send_Data2+0xbc>)
 80008bc:	2266      	movs	r2, #102	; 0x66
 80008be:	715a      	strb	r2, [r3, #5]
		  TxData[6] = 0x77;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <Send_Data2+0xbc>)
 80008c2:	2277      	movs	r2, #119	; 0x77
 80008c4:	719a      	strb	r2, [r3, #6]
		  TxData[7] = 0x88;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <Send_Data2+0xbc>)
 80008c8:	2288      	movs	r2, #136	; 0x88
 80008ca:	71da      	strb	r2, [r3, #7]
		  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)==HAL_OK){
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <Send_Data2+0xc0>)
 80008ce:	4a07      	ldr	r2, [pc, #28]	; (80008ec <Send_Data2+0xbc>)
 80008d0:	4905      	ldr	r1, [pc, #20]	; (80008e8 <Send_Data2+0xb8>)
 80008d2:	4802      	ldr	r0, [pc, #8]	; (80008dc <Send_Data2+0xac>)
 80008d4:	f000 fd6e 	bl	80013b4 <HAL_CAN_AddTxMessage>
			  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
		  }
	 }
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000108 	.word	0x20000108
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	200000f0 	.word	0x200000f0
 80008e8:	20000130 	.word	0x20000130
 80008ec:	200000fc 	.word	0x200000fc
 80008f0:	20000104 	.word	0x20000104

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f8:	f000 fad3 	bl	8000ea2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fc:	f000 f822 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000900:	f000 f918 	bl	8000b34 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000904:	f000 f8b0 	bl	8000a68 <MX_CAN1_Init>
  MX_UART5_Init();
 8000908:	f000 f8e4 	bl	8000ad4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart5, (uint8_t*) &UART5_Data, 1);
 800090c:	2201      	movs	r2, #1
 800090e:	490a      	ldr	r1, [pc, #40]	; (8000938 <main+0x44>)
 8000910:	480a      	ldr	r0, [pc, #40]	; (800093c <main+0x48>)
 8000912:	f002 fd7f 	bl	8003414 <HAL_UART_Receive_IT>
  HAL_CAN_Start(&hcan1);
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <main+0x4c>)
 8000918:	f000 fd08 	bl	800132c <HAL_CAN_Start>
  Filter_Init();
 800091c:	f7ff ff02 	bl	8000724 <Filter_Init>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000920:	2102      	movs	r1, #2
 8000922:	4807      	ldr	r0, [pc, #28]	; (8000940 <main+0x4c>)
 8000924:	f000 fe56 	bl	80015d4 <HAL_CAN_ActivateNotification>
  initialise_monitor_handles();
 8000928:	f000 fa78 	bl	8000e1c <initialise_monitor_handles>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Send_Data();
 800092c:	f7ff ff24 	bl	8000778 <Send_Data>
	  Send_Data2();
 8000930:	f7ff ff7e 	bl	8000830 <Send_Data2>
	  Send_Data();
 8000934:	e7fa      	b.n	800092c <main+0x38>
 8000936:	bf00      	nop
 8000938:	20000039 	.word	0x20000039
 800093c:	20000040 	.word	0x20000040
 8000940:	20000108 	.word	0x20000108

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0b8      	sub	sp, #224	; 0xe0
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800094e:	2234      	movs	r2, #52	; 0x34
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f003 fd6c 	bl	8004430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2290      	movs	r2, #144	; 0x90
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f003 fd5d 	bl	8004430 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b3a      	ldr	r3, [pc, #232]	; (8000a60 <SystemClock_Config+0x11c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a39      	ldr	r2, [pc, #228]	; (8000a60 <SystemClock_Config+0x11c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <SystemClock_Config+0x11c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <SystemClock_Config+0x120>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000996:	4a33      	ldr	r2, [pc, #204]	; (8000a64 <SystemClock_Config+0x120>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6013      	str	r3, [r2, #0]
 800099e:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <SystemClock_Config+0x120>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b6:	2310      	movs	r3, #16
 80009b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009bc:	2302      	movs	r3, #2
 80009be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009c8:	2310      	movs	r3, #16
 80009ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009ce:	23c0      	movs	r3, #192	; 0xc0
 80009d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009da:	2302      	movs	r3, #2
 80009dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 fc1f 	bl	8002228 <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009f0:	f000 f8f8 	bl	8000be4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009f4:	f001 fbc8 	bl	8002188 <HAL_PWREx_EnableOverDrive>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009fe:	f000 f8f1 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	230f      	movs	r3, #15
 8000a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a28:	2103      	movs	r1, #3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 feaa 	bl	8002784 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000a36:	f000 f8d5 	bl	8000be4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 f86d 	bl	8002b28 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000a54:	f000 f8c6 	bl	8000be4 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	37e0      	adds	r7, #224	; 0xe0
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_CAN1_Init+0x64>)
 8000a6e:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <MX_CAN1_Init+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_CAN1_Init+0x64>)
 8000a74:	2206      	movs	r2, #6
 8000a76:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_CAN1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_CAN1_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_CAN1_Init+0x64>)
 8000a86:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a8a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_CAN1_Init+0x64>)
 8000a8e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000a92:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <MX_CAN1_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_CAN1_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_CAN1_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_CAN1_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_CAN1_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_CAN1_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_CAN1_Init+0x64>)
 8000aba:	f000 fa4f 	bl	8000f5c <HAL_CAN_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ac4:	f000 f88e 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000108 	.word	0x20000108
 8000ad0:	40006400 	.word	0x40006400

08000ad4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_UART5_Init+0x58>)
 8000ada:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <MX_UART5_Init+0x5c>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_UART5_Init+0x58>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_UART5_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_UART5_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_UART5_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_UART5_Init+0x58>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_UART5_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_UART5_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_UART5_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_UART5_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_UART5_Init+0x58>)
 8000b18:	f002 fc2e 	bl	8003378 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000b22:	f000 f85f 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000040 	.word	0x20000040
 8000b30:	40005000 	.word	0x40005000

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2108      	movs	r1, #8
 8000b96:	4811      	ldr	r0, [pc, #68]	; (8000bdc <MX_GPIO_Init+0xa8>)
 8000b98:	f001 fadc 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480a      	ldr	r0, [pc, #40]	; (8000bdc <MX_GPIO_Init+0xa8>)
 8000bb4:	f001 f90c 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000bb8:	2318      	movs	r3, #24
 8000bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_GPIO_Init+0xac>)
 8000bcc:	f001 f900 	bl	8001dd0 <HAL_GPIO_Init>

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bea:	e7fe      	b.n	8000bea <Error_Handler+0x6>

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_MspInit+0x44>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x44>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x44>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x44>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <HAL_CAN_MspInit+0x8c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12f      	bne.n	8000cb6 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <HAL_CAN_MspInit+0x90>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <HAL_CAN_MspInit+0x90>)
 8000c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_CAN_MspInit+0x90>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_CAN_MspInit+0x90>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <HAL_CAN_MspInit+0x90>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_CAN_MspInit+0x90>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c86:	2303      	movs	r3, #3
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c96:	2309      	movs	r3, #9
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <HAL_CAN_MspInit+0x94>)
 8000ca2:	f001 f895 	bl	8001dd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2014      	movs	r0, #20
 8000cac:	f000 ffc7 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cb0:	2014      	movs	r0, #20
 8000cb2:	f000 ffe0 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40006400 	.word	0x40006400
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020c00 	.word	0x40020c00

08000ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a29      	ldr	r2, [pc, #164]	; (8000d90 <HAL_UART_MspInit+0xc4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d14c      	bne.n	8000d88 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <HAL_UART_MspInit+0xc8>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a28      	ldr	r2, [pc, #160]	; (8000d94 <HAL_UART_MspInit+0xc8>)
 8000cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <HAL_UART_MspInit+0xc8>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <HAL_UART_MspInit+0xc8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a22      	ldr	r2, [pc, #136]	; (8000d94 <HAL_UART_MspInit+0xc8>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HAL_UART_MspInit+0xc8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <HAL_UART_MspInit+0xc8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <HAL_UART_MspInit+0xc8>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <HAL_UART_MspInit+0xc8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <HAL_UART_MspInit+0xcc>)
 8000d54:	f001 f83c 	bl	8001dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	480a      	ldr	r0, [pc, #40]	; (8000d9c <HAL_UART_MspInit+0xd0>)
 8000d74:	f001 f82c 	bl	8001dd0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2035      	movs	r0, #53	; 0x35
 8000d7e:	f000 ff5e 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000d82:	2035      	movs	r0, #53	; 0x35
 8000d84:	f000 ff77 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	; 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40005000 	.word	0x40005000
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020c00 	.word	0x40020c00

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f896 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <CAN1_RX0_IRQHandler+0x10>)
 8000dfa:	f000 fc11 	bl	8001620 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000108 	.word	0x20000108

08000e08 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <UART5_IRQHandler+0x10>)
 8000e0e:	f002 fb3f 	bl	8003490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000040 	.word	0x20000040

08000e1c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e6c:	4c0b      	ldr	r4, [pc, #44]	; (8000e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7a:	f7ff ffd7 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f003 fab3 	bl	80043e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fd37 	bl	80008f4 <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e88:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e94:	08004480 	.word	0x08004480
  ldr r2, =_sbss
 8000e98:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e9c:	20000150 	.word	0x20000150

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>

08000ea2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	f000 febe 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 f805 	bl	8000ebc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000eb2:	f7ff fe9b 	bl	8000bec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fed9 	bl	8001c92 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 fea1 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	20000014 	.word	0x20000014
 8000f18:	20000010 	.word	0x20000010

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000014 	.word	0x20000014
 8000f40:	2000014c 	.word	0x2000014c

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000014c 	.word	0x2000014c

08000f5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e0ed      	b.n	800114a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fe5a 	bl	8000c34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0202 	bic.w	r2, r2, #2
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f90:	f7ff ffd8 	bl	8000f44 <HAL_GetTick>
 8000f94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f96:	e012      	b.n	8000fbe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f98:	f7ff ffd4 	bl	8000f44 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b0a      	cmp	r3, #10
 8000fa4:	d90b      	bls.n	8000fbe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2205      	movs	r2, #5
 8000fb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e0c5      	b.n	800114a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1e5      	bne.n	8000f98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fdc:	f7ff ffb2 	bl	8000f44 <HAL_GetTick>
 8000fe0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fe2:	e012      	b.n	800100a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fe4:	f7ff ffae 	bl	8000f44 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b0a      	cmp	r3, #10
 8000ff0:	d90b      	bls.n	800100a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2205      	movs	r2, #5
 8001002:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e09f      	b.n	800114a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0e5      	beq.n	8000fe4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7e1b      	ldrb	r3, [r3, #24]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d108      	bne.n	8001032 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e007      	b.n	8001042 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7e5b      	ldrb	r3, [r3, #25]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d108      	bne.n	800105c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e007      	b.n	800106c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800106a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7e9b      	ldrb	r3, [r3, #26]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d108      	bne.n	8001086 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0220 	orr.w	r2, r2, #32
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e007      	b.n	8001096 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0220 	bic.w	r2, r2, #32
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7edb      	ldrb	r3, [r3, #27]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d108      	bne.n	80010b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0210 	bic.w	r2, r2, #16
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e007      	b.n	80010c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0210 	orr.w	r2, r2, #16
 80010be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7f1b      	ldrb	r3, [r3, #28]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d108      	bne.n	80010da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0208 	orr.w	r2, r2, #8
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e007      	b.n	80010ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0208 	bic.w	r2, r2, #8
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7f5b      	ldrb	r3, [r3, #29]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d108      	bne.n	8001104 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 0204 	orr.w	r2, r2, #4
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e007      	b.n	8001114 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0204 	bic.w	r2, r2, #4
 8001112:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	ea42 0103 	orr.w	r1, r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	1e5a      	subs	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800116a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800116c:	7cfb      	ldrb	r3, [r7, #19]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d003      	beq.n	800117a <HAL_CAN_ConfigFilter+0x26>
 8001172:	7cfb      	ldrb	r3, [r7, #19]
 8001174:	2b02      	cmp	r3, #2
 8001176:	f040 80c7 	bne.w	8001308 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a69      	ldr	r2, [pc, #420]	; (8001324 <HAL_CAN_ConfigFilter+0x1d0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d001      	beq.n	8001188 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001184:	4b68      	ldr	r3, [pc, #416]	; (8001328 <HAL_CAN_ConfigFilter+0x1d4>)
 8001186:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800118e:	f043 0201 	orr.w	r2, r3, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	4a63      	ldr	r2, [pc, #396]	; (8001328 <HAL_CAN_ConfigFilter+0x1d4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d111      	bne.n	80011c4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011a6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	431a      	orrs	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	2201      	movs	r2, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d123      	bne.n	8001236 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	401a      	ands	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001210:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3248      	adds	r2, #72	; 0x48
 8001216:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800122a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800122c:	6979      	ldr	r1, [r7, #20]
 800122e:	3348      	adds	r3, #72	; 0x48
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d122      	bne.n	8001284 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	431a      	orrs	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800125e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3248      	adds	r2, #72	; 0x48
 8001264:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001278:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800127a:	6979      	ldr	r1, [r7, #20]
 800127c:	3348      	adds	r3, #72	; 0x48
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d109      	bne.n	80012a0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800129e:	e007      	b.n	80012b0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d109      	bne.n	80012cc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012ca:	e007      	b.n	80012dc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	431a      	orrs	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d107      	bne.n	80012f4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012fa:	f023 0201 	bic.w	r2, r3, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	e006      	b.n	8001316 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
  }
}
 8001316:	4618      	mov	r0, r3
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40003400 	.word	0x40003400
 8001328:	40006400 	.word	0x40006400

0800132c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d12e      	bne.n	800139e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2202      	movs	r2, #2
 8001344:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001358:	f7ff fdf4 	bl	8000f44 <HAL_GetTick>
 800135c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800135e:	e012      	b.n	8001386 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001360:	f7ff fdf0 	bl	8000f44 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b0a      	cmp	r3, #10
 800136c:	d90b      	bls.n	8001386 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2205      	movs	r2, #5
 800137e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e012      	b.n	80013ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1e5      	bne.n	8001360 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e006      	b.n	80013ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
  }
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013d2:	7ffb      	ldrb	r3, [r7, #31]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d003      	beq.n	80013e0 <HAL_CAN_AddTxMessage+0x2c>
 80013d8:	7ffb      	ldrb	r3, [r7, #31]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	f040 80b8 	bne.w	8001550 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10a      	bne.n	8001400 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80a0 	beq.w	8001540 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	0e1b      	lsrs	r3, r3, #24
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d907      	bls.n	8001420 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e09e      	b.n	800155e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001420:	2201      	movs	r2, #1
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	409a      	lsls	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10d      	bne.n	800144e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800143c:	68f9      	ldr	r1, [r7, #12]
 800143e:	6809      	ldr	r1, [r1, #0]
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3318      	adds	r3, #24
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	440b      	add	r3, r1
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e00f      	b.n	800146e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001458:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800145e:	68f9      	ldr	r1, [r7, #12]
 8001460:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001462:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3318      	adds	r3, #24
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	440b      	add	r3, r1
 800146c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6819      	ldr	r1, [r3, #0]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3318      	adds	r3, #24
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	440b      	add	r3, r1
 800147e:	3304      	adds	r3, #4
 8001480:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	7d1b      	ldrb	r3, [r3, #20]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d111      	bne.n	80014ae <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3318      	adds	r3, #24
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	3304      	adds	r3, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	6811      	ldr	r1, [r2, #0]
 800149e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3318      	adds	r3, #24
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	440b      	add	r3, r1
 80014aa:	3304      	adds	r3, #4
 80014ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3307      	adds	r3, #7
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	061a      	lsls	r2, r3, #24
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3306      	adds	r3, #6
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	041b      	lsls	r3, r3, #16
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3305      	adds	r3, #5
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	4313      	orrs	r3, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	3204      	adds	r2, #4
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	4610      	mov	r0, r2
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	6811      	ldr	r1, [r2, #0]
 80014d6:	ea43 0200 	orr.w	r2, r3, r0
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	440b      	add	r3, r1
 80014e0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80014e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3303      	adds	r3, #3
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	061a      	lsls	r2, r3, #24
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3302      	adds	r3, #2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3301      	adds	r3, #1
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	4313      	orrs	r3, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	4610      	mov	r0, r2
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	6811      	ldr	r1, [r2, #0]
 800150c:	ea43 0200 	orr.w	r2, r3, r0
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	440b      	add	r3, r1
 8001516:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800151a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3318      	adds	r3, #24
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	4413      	add	r3, r2
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	6811      	ldr	r1, [r2, #0]
 800152e:	f043 0201 	orr.w	r2, r3, #1
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3318      	adds	r3, #24
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	440b      	add	r3, r1
 800153a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	e00e      	b.n	800155e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e006      	b.n	800155e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
  }
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d002      	beq.n	800158a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d11d      	bne.n	80015c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d002      	beq.n	80015f2 <HAL_CAN_ActivateNotification+0x1e>
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d109      	bne.n	8001606 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6959      	ldr	r1, [r3, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e006      	b.n	8001614 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d07c      	beq.n	8001760 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d023      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f97d 	bl	8001982 <HAL_CAN_TxMailbox0CompleteCallback>
 8001688:	e016      	b.n	80016b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
 800169c:	e00c      	b.n	80016b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
 80016b0:	e002      	b.n	80016b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f983 	bl	80019be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d024      	beq.n	800170c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f95d 	bl	8001996 <HAL_CAN_TxMailbox1CompleteCallback>
 80016dc:	e016      	b.n	800170c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d004      	beq.n	80016f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
 80016f0:	e00c      	b.n	800170c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
 8001704:	e002      	b.n	800170c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f963 	bl	80019d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d024      	beq.n	8001760 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800171e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f93d 	bl	80019aa <HAL_CAN_TxMailbox2CompleteCallback>
 8001730:	e016      	b.n	8001760 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
 8001744:	e00c      	b.n	8001760 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
 8001758:	e002      	b.n	8001760 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f943 	bl	80019e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00c      	beq.n	8001784 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2210      	movs	r2, #16
 8001782:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00b      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2208      	movs	r2, #8
 800179e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f934 	bl	8001a0e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f91b 	bl	80019fa <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00c      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2210      	movs	r2, #16
 80017e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2208      	movs	r2, #8
 8001802:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f916 	bl	8001a36 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d009      	beq.n	8001828 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f8fd 	bl	8001a22 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f900 	bl	8001a4a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00b      	beq.n	800186c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2208      	movs	r2, #8
 8001864:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f8f9 	bl	8001a5e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d075      	beq.n	8001962 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d06c      	beq.n	800195a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d008      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d03d      	beq.n	800195a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d038      	beq.n	800195a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018ee:	2b30      	cmp	r3, #48	; 0x30
 80018f0:	d017      	beq.n	8001922 <HAL_CAN_IRQHandler+0x302>
 80018f2:	2b30      	cmp	r3, #48	; 0x30
 80018f4:	d804      	bhi.n	8001900 <HAL_CAN_IRQHandler+0x2e0>
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d009      	beq.n	800190e <HAL_CAN_IRQHandler+0x2ee>
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	d00c      	beq.n	8001918 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018fe:	e024      	b.n	800194a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001900:	2b50      	cmp	r3, #80	; 0x50
 8001902:	d018      	beq.n	8001936 <HAL_CAN_IRQHandler+0x316>
 8001904:	2b60      	cmp	r3, #96	; 0x60
 8001906:	d01b      	beq.n	8001940 <HAL_CAN_IRQHandler+0x320>
 8001908:	2b40      	cmp	r3, #64	; 0x40
 800190a:	d00f      	beq.n	800192c <HAL_CAN_IRQHandler+0x30c>
            break;
 800190c:	e01d      	b.n	800194a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001916:	e018      	b.n	800194a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001920:	e013      	b.n	800194a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	f043 0320 	orr.w	r3, r3, #32
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800192a:	e00e      	b.n	800194a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001934:	e009      	b.n	800194a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800193e:	e004      	b.n	800194a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001948:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699a      	ldr	r2, [r3, #24]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001958:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2204      	movs	r2, #4
 8001960:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f87c 	bl	8001a72 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	05fa0000 	.word	0x05fa0000

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff3e 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff8e 	bl	8001b7c <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5d 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff31 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff f944 	bl	8000f44 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d008      	beq.n	8001cdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e052      	b.n	8001d82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0216 	bic.w	r2, r2, #22
 8001cea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <HAL_DMA_Abort+0x62>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0208 	bic.w	r2, r2, #8
 8001d1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2c:	e013      	b.n	8001d56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d2e:	f7ff f909 	bl	8000f44 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d90c      	bls.n	8001d56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e015      	b.n	8001d82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e4      	bne.n	8001d2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	223f      	movs	r2, #63	; 0x3f
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d004      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e00c      	b.n	8001dc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2205      	movs	r2, #5
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	e175      	b.n	80020dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 8164 	bne.w	80020d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d00b      	beq.n	8001e2e <HAL_GPIO_Init+0x5e>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d007      	beq.n	8001e2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e22:	2b11      	cmp	r3, #17
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d130      	bne.n	8001e90 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 0201 	and.w	r2, r3, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x100>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b12      	cmp	r3, #18
 8001ece:	d123      	bne.n	8001f18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80be 	beq.w	80020d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	4b65      	ldr	r3, [pc, #404]	; (80020f0 <HAL_GPIO_Init+0x320>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a64      	ldr	r2, [pc, #400]	; (80020f0 <HAL_GPIO_Init+0x320>)
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <HAL_GPIO_Init+0x320>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f72:	4a60      	ldr	r2, [pc, #384]	; (80020f4 <HAL_GPIO_Init+0x324>)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	3302      	adds	r3, #2
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a57      	ldr	r2, [pc, #348]	; (80020f8 <HAL_GPIO_Init+0x328>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d037      	beq.n	800200e <HAL_GPIO_Init+0x23e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a56      	ldr	r2, [pc, #344]	; (80020fc <HAL_GPIO_Init+0x32c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d031      	beq.n	800200a <HAL_GPIO_Init+0x23a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a55      	ldr	r2, [pc, #340]	; (8002100 <HAL_GPIO_Init+0x330>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02b      	beq.n	8002006 <HAL_GPIO_Init+0x236>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a54      	ldr	r2, [pc, #336]	; (8002104 <HAL_GPIO_Init+0x334>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d025      	beq.n	8002002 <HAL_GPIO_Init+0x232>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a53      	ldr	r2, [pc, #332]	; (8002108 <HAL_GPIO_Init+0x338>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01f      	beq.n	8001ffe <HAL_GPIO_Init+0x22e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	; (800210c <HAL_GPIO_Init+0x33c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d019      	beq.n	8001ffa <HAL_GPIO_Init+0x22a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a51      	ldr	r2, [pc, #324]	; (8002110 <HAL_GPIO_Init+0x340>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x226>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a50      	ldr	r2, [pc, #320]	; (8002114 <HAL_GPIO_Init+0x344>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x222>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4f      	ldr	r2, [pc, #316]	; (8002118 <HAL_GPIO_Init+0x348>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x21e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4e      	ldr	r2, [pc, #312]	; (800211c <HAL_GPIO_Init+0x34c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x21a>
 8001fe6:	2309      	movs	r3, #9
 8001fe8:	e012      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001fea:	230a      	movs	r3, #10
 8001fec:	e010      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001fee:	2308      	movs	r3, #8
 8001ff0:	e00e      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	e00c      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001ff6:	2306      	movs	r3, #6
 8001ff8:	e00a      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	e008      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001ffe:	2304      	movs	r3, #4
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8002002:	2303      	movs	r3, #3
 8002004:	e004      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8002006:	2302      	movs	r3, #2
 8002008:	e002      	b.n	8002010 <HAL_GPIO_Init+0x240>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_GPIO_Init+0x240>
 800200e:	2300      	movs	r3, #0
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	f002 0203 	and.w	r2, r2, #3
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	4093      	lsls	r3, r2
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002020:	4934      	ldr	r1, [pc, #208]	; (80020f4 <HAL_GPIO_Init+0x324>)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800202e:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <HAL_GPIO_Init+0x350>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002052:	4a33      	ldr	r2, [pc, #204]	; (8002120 <HAL_GPIO_Init+0x350>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_GPIO_Init+0x350>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800207c:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_GPIO_Init+0x350>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002082:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_GPIO_Init+0x350>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a6:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <HAL_GPIO_Init+0x350>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <HAL_GPIO_Init+0x350>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020d0:	4a13      	ldr	r2, [pc, #76]	; (8002120 <HAL_GPIO_Init+0x350>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3301      	adds	r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b0f      	cmp	r3, #15
 80020e0:	f67f ae86 	bls.w	8001df0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020e4:	bf00      	nop
 80020e6:	3724      	adds	r7, #36	; 0x24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40013800 	.word	0x40013800
 80020f8:	40020000 	.word	0x40020000
 80020fc:	40020400 	.word	0x40020400
 8002100:	40020800 	.word	0x40020800
 8002104:	40020c00 	.word	0x40020c00
 8002108:	40021000 	.word	0x40021000
 800210c:	40021400 	.word	0x40021400
 8002110:	40021800 	.word	0x40021800
 8002114:	40021c00 	.word	0x40021c00
 8002118:	40022000 	.word	0x40022000
 800211c:	40022400 	.word	0x40022400
 8002120:	40013c00 	.word	0x40013c00

08002124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e001      	b.n	8002146 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_PWREx_EnableOverDrive+0x98>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a22      	ldr	r2, [pc, #136]	; (8002220 <HAL_PWREx_EnableOverDrive+0x98>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_PWREx_EnableOverDrive+0x98>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021b6:	f7fe fec5 	bl	8000f44 <HAL_GetTick>
 80021ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021bc:	e009      	b.n	80021d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021be:	f7fe fec1 	bl	8000f44 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021cc:	d901      	bls.n	80021d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e022      	b.n	8002218 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021de:	d1ee      	bne.n	80021be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ec:	f7fe feaa 	bl	8000f44 <HAL_GetTick>
 80021f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021f2:	e009      	b.n	8002208 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021f4:	f7fe fea6 	bl	8000f44 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002202:	d901      	bls.n	8002208 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e007      	b.n	8002218 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002214:	d1ee      	bne.n	80021f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000

08002228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e29b      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8087 	beq.w	800235a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800224c:	4b96      	ldr	r3, [pc, #600]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b04      	cmp	r3, #4
 8002256:	d00c      	beq.n	8002272 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002258:	4b93      	ldr	r3, [pc, #588]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d112      	bne.n	800228a <HAL_RCC_OscConfig+0x62>
 8002264:	4b90      	ldr	r3, [pc, #576]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002270:	d10b      	bne.n	800228a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002272:	4b8d      	ldr	r3, [pc, #564]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d06c      	beq.n	8002358 <HAL_RCC_OscConfig+0x130>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d168      	bne.n	8002358 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e275      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x7a>
 8002294:	4b84      	ldr	r3, [pc, #528]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a83      	ldr	r2, [pc, #524]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e02e      	b.n	8002300 <HAL_RCC_OscConfig+0xd8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x9c>
 80022aa:	4b7f      	ldr	r3, [pc, #508]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7e      	ldr	r2, [pc, #504]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b7c      	ldr	r3, [pc, #496]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7b      	ldr	r2, [pc, #492]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e01d      	b.n	8002300 <HAL_RCC_OscConfig+0xd8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0xc0>
 80022ce:	4b76      	ldr	r3, [pc, #472]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a75      	ldr	r2, [pc, #468]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b73      	ldr	r3, [pc, #460]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a72      	ldr	r2, [pc, #456]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0xd8>
 80022e8:	4b6f      	ldr	r3, [pc, #444]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6e      	ldr	r2, [pc, #440]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b6c      	ldr	r3, [pc, #432]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a6b      	ldr	r2, [pc, #428]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d013      	beq.n	8002330 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe fe1c 	bl	8000f44 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe fe18 	bl	8000f44 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e229      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b61      	ldr	r3, [pc, #388]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0xe8>
 800232e:	e014      	b.n	800235a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe fe08 	bl	8000f44 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7fe fe04 	bl	8000f44 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e215      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	4b57      	ldr	r3, [pc, #348]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x110>
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d069      	beq.n	800243a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002366:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002372:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b08      	cmp	r3, #8
 800237c:	d11c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x190>
 800237e:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d116      	bne.n	80023b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x17a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e1e9      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	493d      	ldr	r1, [pc, #244]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	e040      	b.n	800243a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d023      	beq.n	8002408 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c0:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a38      	ldr	r2, [pc, #224]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fdba 	bl	8000f44 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d4:	f7fe fdb6 	bl	8000f44 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1c7      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4929      	ldr	r1, [pc, #164]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
 8002406:	e018      	b.n	800243a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fd96 	bl	8000f44 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241c:	f7fe fd92 	bl	8000f44 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1a3      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d038      	beq.n	80024b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d019      	beq.n	8002482 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fe fd73 	bl	8000f44 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002462:	f7fe fd6f 	bl	8000f44 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e180      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x23a>
 8002480:	e01a      	b.n	80024b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002486:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248e:	f7fe fd59 	bl	8000f44 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002496:	f7fe fd55 	bl	8000f44 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d903      	bls.n	80024ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e166      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
 80024a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ac:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80024ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a4 	beq.w	800260e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c6:	4b8c      	ldr	r3, [pc, #560]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10d      	bne.n	80024ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	4b89      	ldr	r3, [pc, #548]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a88      	ldr	r2, [pc, #544]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b86      	ldr	r3, [pc, #536]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ea:	2301      	movs	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ee:	4b83      	ldr	r3, [pc, #524]	; (80026fc <HAL_RCC_OscConfig+0x4d4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024fa:	4b80      	ldr	r3, [pc, #512]	; (80026fc <HAL_RCC_OscConfig+0x4d4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7f      	ldr	r2, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x4d4>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002506:	f7fe fd1d 	bl	8000f44 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe fd19 	bl	8000f44 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b64      	cmp	r3, #100	; 0x64
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e12a      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002520:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x4d4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x31a>
 8002534:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a6f      	ldr	r2, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
 8002540:	e02d      	b.n	800259e <HAL_RCC_OscConfig+0x376>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x33c>
 800254a:	4b6b      	ldr	r3, [pc, #428]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a6a      	ldr	r2, [pc, #424]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
 8002556:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	4a67      	ldr	r2, [pc, #412]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	6713      	str	r3, [r2, #112]	; 0x70
 8002562:	e01c      	b.n	800259e <HAL_RCC_OscConfig+0x376>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b05      	cmp	r3, #5
 800256a:	d10c      	bne.n	8002586 <HAL_RCC_OscConfig+0x35e>
 800256c:	4b62      	ldr	r3, [pc, #392]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a61      	ldr	r2, [pc, #388]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	4a5e      	ldr	r2, [pc, #376]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6713      	str	r3, [r2, #112]	; 0x70
 8002584:	e00b      	b.n	800259e <HAL_RCC_OscConfig+0x376>
 8002586:	4b5c      	ldr	r3, [pc, #368]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a5b      	ldr	r2, [pc, #364]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
 8002592:	4b59      	ldr	r3, [pc, #356]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	4a58      	ldr	r2, [pc, #352]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d015      	beq.n	80025d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe fccd 	bl	8000f44 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe fcc9 	bl	8000f44 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0d8      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	4b4c      	ldr	r3, [pc, #304]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ee      	beq.n	80025ae <HAL_RCC_OscConfig+0x386>
 80025d0:	e014      	b.n	80025fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7fe fcb7 	bl	8000f44 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fcb3 	bl	8000f44 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0c2      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ee      	bne.n	80025da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d105      	bne.n	800260e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002602:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a3c      	ldr	r2, [pc, #240]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80ae 	beq.w	8002774 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002618:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b08      	cmp	r3, #8
 8002622:	d06d      	beq.n	8002700 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d14b      	bne.n	80026c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262c:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a31      	ldr	r2, [pc, #196]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fc84 	bl	8000f44 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe fc80 	bl	8000f44 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e091      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002652:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	019b      	lsls	r3, r3, #6
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	3b01      	subs	r3, #1
 8002678:	041b      	lsls	r3, r3, #16
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	071b      	lsls	r3, r3, #28
 800268a:	491b      	ldr	r1, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fc52 	bl	8000f44 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe fc4e 	bl	8000f44 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e05f      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x47c>
 80026c2:	e057      	b.n	8002774 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80026ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fc38 	bl	8000f44 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fc34 	bl	8000f44 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e045      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ea:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4b0>
 80026f6:	e03d      	b.n	8002774 <HAL_RCC_OscConfig+0x54c>
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <HAL_RCC_OscConfig+0x558>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d030      	beq.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d129      	bne.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d122      	bne.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002730:	4013      	ands	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002736:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002738:	4293      	cmp	r3, r2
 800273a:	d119      	bne.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	3b01      	subs	r3, #1
 800274a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d10f      	bne.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d107      	bne.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800

08002784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0d0      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d910      	bls.n	80027cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 020f 	bic.w	r2, r3, #15
 80027b2:	4965      	ldr	r1, [pc, #404]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b63      	ldr	r3, [pc, #396]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0b8      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e4:	4b59      	ldr	r3, [pc, #356]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 80027ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027fc:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a52      	ldr	r2, [pc, #328]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002806:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b50      	ldr	r3, [pc, #320]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	494d      	ldr	r1, [pc, #308]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d040      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d115      	bne.n	8002866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e07f      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e073      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e06b      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b39      	ldr	r3, [pc, #228]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4936      	ldr	r1, [pc, #216]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe fb64 	bl	8000f44 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7fe fb60 	bl	8000f44 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e053      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d210      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 020f 	bic.w	r2, r3, #15
 80028be:	4922      	ldr	r1, [pc, #136]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e032      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4916      	ldr	r1, [pc, #88]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	490e      	ldr	r1, [pc, #56]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002916:	f000 f821 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800291a:	4601      	mov	r1, r0
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <HAL_RCC_ClockConfig+0x1cc>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	fa21 f303 	lsr.w	r3, r1, r3
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1d0>)
 8002930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1d4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fac0 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00
 800294c:	40023800 	.word	0x40023800
 8002950:	08004458 	.word	0x08004458
 8002954:	2000000c 	.word	0x2000000c
 8002958:	20000010 	.word	0x20000010

0800295c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	2300      	movs	r3, #0
 800296c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002972:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b04      	cmp	r3, #4
 800297c:	d007      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x32>
 800297e:	2b08      	cmp	r3, #8
 8002980:	d008      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x38>
 8002982:	2b00      	cmp	r3, #0
 8002984:	f040 808d 	bne.w	8002aa2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800298a:	60bb      	str	r3, [r7, #8]
      break;
 800298c:	e08c      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800298e:	4b4b      	ldr	r3, [pc, #300]	; (8002abc <HAL_RCC_GetSysClockFreq+0x160>)
 8002990:	60bb      	str	r3, [r7, #8]
      break;
 8002992:	e089      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002994:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800299c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800299e:	4b45      	ldr	r3, [pc, #276]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x158>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d023      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029aa:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	099b      	lsrs	r3, r3, #6
 80029b0:	f04f 0400 	mov.w	r4, #0
 80029b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	ea03 0501 	and.w	r5, r3, r1
 80029c0:	ea04 0602 	and.w	r6, r4, r2
 80029c4:	4a3d      	ldr	r2, [pc, #244]	; (8002abc <HAL_RCC_GetSysClockFreq+0x160>)
 80029c6:	fb02 f106 	mul.w	r1, r2, r6
 80029ca:	2200      	movs	r2, #0
 80029cc:	fb02 f205 	mul.w	r2, r2, r5
 80029d0:	440a      	add	r2, r1
 80029d2:	493a      	ldr	r1, [pc, #232]	; (8002abc <HAL_RCC_GetSysClockFreq+0x160>)
 80029d4:	fba5 0101 	umull	r0, r1, r5, r1
 80029d8:	1853      	adds	r3, r2, r1
 80029da:	4619      	mov	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f04f 0400 	mov.w	r4, #0
 80029e2:	461a      	mov	r2, r3
 80029e4:	4623      	mov	r3, r4
 80029e6:	f7fd fc27 	bl	8000238 <__aeabi_uldivmod>
 80029ea:	4603      	mov	r3, r0
 80029ec:	460c      	mov	r4, r1
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	e049      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x158>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	f04f 0400 	mov.w	r4, #0
 80029fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	ea03 0501 	and.w	r5, r3, r1
 8002a08:	ea04 0602 	and.w	r6, r4, r2
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	4632      	mov	r2, r6
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	f04f 0400 	mov.w	r4, #0
 8002a18:	0154      	lsls	r4, r2, #5
 8002a1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a1e:	014b      	lsls	r3, r1, #5
 8002a20:	4619      	mov	r1, r3
 8002a22:	4622      	mov	r2, r4
 8002a24:	1b49      	subs	r1, r1, r5
 8002a26:	eb62 0206 	sbc.w	r2, r2, r6
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	f04f 0400 	mov.w	r4, #0
 8002a32:	0194      	lsls	r4, r2, #6
 8002a34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a38:	018b      	lsls	r3, r1, #6
 8002a3a:	1a5b      	subs	r3, r3, r1
 8002a3c:	eb64 0402 	sbc.w	r4, r4, r2
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	00e2      	lsls	r2, r4, #3
 8002a4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a4e:	00d9      	lsls	r1, r3, #3
 8002a50:	460b      	mov	r3, r1
 8002a52:	4614      	mov	r4, r2
 8002a54:	195b      	adds	r3, r3, r5
 8002a56:	eb44 0406 	adc.w	r4, r4, r6
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	02a2      	lsls	r2, r4, #10
 8002a64:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a68:	0299      	lsls	r1, r3, #10
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	4621      	mov	r1, r4
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f04f 0400 	mov.w	r4, #0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	f7fd fbdc 	bl	8000238 <__aeabi_uldivmod>
 8002a80:	4603      	mov	r3, r0
 8002a82:	460c      	mov	r4, r1
 8002a84:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	3301      	adds	r3, #1
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	60bb      	str	r3, [r7, #8]
      break;
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002aa4:	60bb      	str	r3, [r7, #8]
      break;
 8002aa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	00f42400 	.word	0x00f42400
 8002abc:	017d7840 	.word	0x017d7840

08002ac0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	2000000c 	.word	0x2000000c

08002ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002adc:	f7ff fff0 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4601      	mov	r1, r0
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	0a9b      	lsrs	r3, r3, #10
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	4a03      	ldr	r2, [pc, #12]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	08004468 	.word	0x08004468

08002b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b04:	f7ff ffdc 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002b08:	4601      	mov	r1, r0
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	0b5b      	lsrs	r3, r3, #13
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	4a03      	ldr	r2, [pc, #12]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b16:	5cd3      	ldrb	r3, [r2, r3]
 8002b18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08004468 	.word	0x08004468

08002b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d012      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b50:	4b69      	ldr	r3, [pc, #420]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a68      	ldr	r2, [pc, #416]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b5a:	6093      	str	r3, [r2, #8]
 8002b5c:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b64:	4964      	ldr	r1, [pc, #400]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d017      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b82:	4b5d      	ldr	r3, [pc, #372]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	4959      	ldr	r1, [pc, #356]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d017      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bbe:	4b4e      	ldr	r3, [pc, #312]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	494a      	ldr	r1, [pc, #296]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bea:	2301      	movs	r3, #1
 8002bec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 808b 	beq.w	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	4a39      	ldr	r2, [pc, #228]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6413      	str	r3, [r2, #64]	; 0x40
 8002c18:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c24:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a34      	ldr	r2, [pc, #208]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c30:	f7fe f988 	bl	8000f44 <HAL_GetTick>
 8002c34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c38:	f7fe f984 	bl	8000f44 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e38f      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c56:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d035      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d02e      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c74:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a1a      	ldr	r2, [pc, #104]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d114      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f94c 	bl	8000f44 <HAL_GetTick>
 8002cac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7fe f948 	bl	8000f44 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e351      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0ee      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cde:	d111      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cee:	400b      	ands	r3, r1
 8002cf0:	4901      	ldr	r1, [pc, #4]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	0ffffcff 	.word	0x0ffffcff
 8002d04:	4bb3      	ldr	r3, [pc, #716]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4ab2      	ldr	r2, [pc, #712]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d0e:	6093      	str	r3, [r2, #8]
 8002d10:	4bb0      	ldr	r3, [pc, #704]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	49ad      	ldr	r1, [pc, #692]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d2e:	4ba9      	ldr	r3, [pc, #676]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d34:	4aa7      	ldr	r2, [pc, #668]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d3e:	4ba5      	ldr	r3, [pc, #660]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	49a2      	ldr	r1, [pc, #648]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d5c:	4b9d      	ldr	r3, [pc, #628]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6a:	499a      	ldr	r1, [pc, #616]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d7e:	4b95      	ldr	r3, [pc, #596]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d8c:	4991      	ldr	r1, [pc, #580]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002da0:	4b8c      	ldr	r3, [pc, #560]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dae:	4989      	ldr	r1, [pc, #548]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dc2:	4b84      	ldr	r3, [pc, #528]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	4980      	ldr	r1, [pc, #512]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002de4:	4b7b      	ldr	r3, [pc, #492]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	4978      	ldr	r1, [pc, #480]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e06:	4b73      	ldr	r3, [pc, #460]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	f023 020c 	bic.w	r2, r3, #12
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e14:	496f      	ldr	r1, [pc, #444]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e28:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e36:	4967      	ldr	r1, [pc, #412]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e4a:	4b62      	ldr	r3, [pc, #392]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e58:	495e      	ldr	r1, [pc, #376]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e6c:	4b59      	ldr	r3, [pc, #356]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	4956      	ldr	r1, [pc, #344]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e8e:	4b51      	ldr	r3, [pc, #324]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	494d      	ldr	r1, [pc, #308]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002eb0:	4b48      	ldr	r3, [pc, #288]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	4945      	ldr	r1, [pc, #276]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ed2:	4b40      	ldr	r3, [pc, #256]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	493c      	ldr	r1, [pc, #240]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ef4:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f02:	4934      	ldr	r1, [pc, #208]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d011      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f16:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f24:	492b      	ldr	r1, [pc, #172]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f34:	d101      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f36:	2301      	movs	r3, #1
 8002f38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f56:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f64:	491b      	ldr	r1, [pc, #108]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f88:	4912      	ldr	r1, [pc, #72]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00b      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fac:	4909      	ldr	r1, [pc, #36]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00f      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	e002      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	4986      	ldr	r1, [pc, #536]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fec:	4b81      	ldr	r3, [pc, #516]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffc:	497d      	ldr	r1, [pc, #500]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d006      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80d6 	beq.w	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003018:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a75      	ldr	r2, [pc, #468]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003024:	f7fd ff8e 	bl	8000f44 <HAL_GetTick>
 8003028:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800302c:	f7fd ff8a 	bl	8000f44 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e195      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800303e:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d021      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	2b00      	cmp	r3, #0
 800305c:	d11d      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800305e:	4b65      	ldr	r3, [pc, #404]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800306c:	4b61      	ldr	r3, [pc, #388]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003072:	0e1b      	lsrs	r3, r3, #24
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	019a      	lsls	r2, r3, #6
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	071b      	lsls	r3, r3, #28
 8003092:	4958      	ldr	r1, [pc, #352]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d02e      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c4:	d129      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030c6:	4b4b      	ldr	r3, [pc, #300]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030d4:	4b47      	ldr	r3, [pc, #284]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030da:	0f1b      	lsrs	r3, r3, #28
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	019a      	lsls	r2, r3, #6
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	431a      	orrs	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	071b      	lsls	r3, r3, #28
 80030fa:	493e      	ldr	r1, [pc, #248]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003102:	4b3c      	ldr	r3, [pc, #240]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003108:	f023 021f 	bic.w	r2, r3, #31
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	3b01      	subs	r3, #1
 8003112:	4938      	ldr	r1, [pc, #224]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01d      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003126:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312c:	0e1b      	lsrs	r3, r3, #24
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313a:	0f1b      	lsrs	r3, r3, #28
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	019a      	lsls	r2, r3, #6
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	431a      	orrs	r2, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	061b      	lsls	r3, r3, #24
 8003154:	431a      	orrs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	071b      	lsls	r3, r3, #28
 800315a:	4926      	ldr	r1, [pc, #152]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d011      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	019a      	lsls	r2, r3, #6
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	041b      	lsls	r3, r3, #16
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	071b      	lsls	r3, r3, #28
 800318a:	491a      	ldr	r1, [pc, #104]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003198:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800319c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800319e:	f7fd fed1 	bl	8000f44 <HAL_GetTick>
 80031a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031a6:	f7fd fecd 	bl	8000f44 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b64      	cmp	r3, #100	; 0x64
 80031b2:	d901      	bls.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0d8      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	f040 80ce 	bne.w	8003368 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a08      	ldr	r2, [pc, #32]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d8:	f7fd feb4 	bl	8000f44 <HAL_GetTick>
 80031dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031de:	e00b      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031e0:	f7fd feb0 	bl	8000f44 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d904      	bls.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0bb      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031f8:	4b5e      	ldr	r3, [pc, #376]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003204:	d0ec      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003222:	2b00      	cmp	r3, #0
 8003224:	d02e      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d12a      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800322e:	4b51      	ldr	r3, [pc, #324]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800323c:	4b4d      	ldr	r3, [pc, #308]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	0f1b      	lsrs	r3, r3, #28
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	019a      	lsls	r2, r3, #6
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	041b      	lsls	r3, r3, #16
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	071b      	lsls	r3, r3, #28
 8003262:	4944      	ldr	r1, [pc, #272]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800326a:	4b42      	ldr	r3, [pc, #264]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800326c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003270:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	3b01      	subs	r3, #1
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	493d      	ldr	r1, [pc, #244]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d022      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003298:	d11d      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800329a:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a0:	0e1b      	lsrs	r3, r3, #24
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032a8:	4b32      	ldr	r3, [pc, #200]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	0f1b      	lsrs	r3, r3, #28
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	019a      	lsls	r2, r3, #6
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	431a      	orrs	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	061b      	lsls	r3, r3, #24
 80032c8:	431a      	orrs	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	071b      	lsls	r3, r3, #28
 80032ce:	4929      	ldr	r1, [pc, #164]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d028      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032e2:	4b24      	ldr	r3, [pc, #144]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e8:	0e1b      	lsrs	r3, r3, #24
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032f0:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	0c1b      	lsrs	r3, r3, #16
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	019a      	lsls	r2, r3, #6
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	431a      	orrs	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	071b      	lsls	r3, r3, #28
 8003316:	4917      	ldr	r1, [pc, #92]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	4911      	ldr	r1, [pc, #68]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800333a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003340:	f7fd fe00 	bl	8000f44 <HAL_GetTick>
 8003344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003348:	f7fd fdfc 	bl	8000f44 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e007      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003366:	d1ef      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800

08003378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e040      	b.n	800340c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd fc96 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0201 	bic.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa94 	bl	80038e4 <UART_SetConfig>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e022      	b.n	800340c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fce8 	bl	8003da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fd6f 	bl	8003ee8 <UART_CheckIdleState>
 800340a:	4603      	mov	r3, r0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003426:	2b20      	cmp	r3, #32
 8003428:	d12c      	bne.n	8003484 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_UART_Receive_IT+0x22>
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e025      	b.n	8003486 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_UART_Receive_IT+0x34>
 8003444:	2302      	movs	r3, #2
 8003446:	e01e      	b.n	8003486 <HAL_UART_Receive_IT+0x72>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003472:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	461a      	mov	r2, r3
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fdfa 	bl	8004074 <UART_Start_Receive_IT>
 8003480:	4603      	mov	r3, r0
 8003482:	e000      	b.n	8003486 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d113      	bne.n	80034e8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00e      	beq.n	80034e8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 81cd 	beq.w	8003878 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
      }
      return;
 80034e6:	e1c7      	b.n	8003878 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80e3 	beq.w	80036b6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d105      	bne.n	8003506 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4ba5      	ldr	r3, [pc, #660]	; (8003794 <HAL_UART_IRQHandler+0x304>)
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80d8 	beq.w	80036b6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d010      	beq.n	8003532 <HAL_UART_IRQHandler+0xa2>
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2201      	movs	r2, #1
 8003520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003528:	f043 0201 	orr.w	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d010      	beq.n	800355e <HAL_UART_IRQHandler+0xce>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2202      	movs	r2, #2
 800354c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_UART_IRQHandler+0xfa>
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2204      	movs	r2, #4
 8003578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003580:	f043 0202 	orr.w	r2, r3, #2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d015      	beq.n	80035c0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2208      	movs	r2, #8
 80035ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b6:	f043 0208 	orr.w	r2, r3, #8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d011      	beq.n	80035ee <HAL_UART_IRQHandler+0x15e>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00c      	beq.n	80035ee <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8141 	beq.w	800387c <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00c      	beq.n	800361e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003624:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d004      	beq.n	800363e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800363a:	2b00      	cmp	r3, #0
 800363c:	d031      	beq.n	80036a2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fda0 	bl	8004184 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d123      	bne.n	800369a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003660:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	2b00      	cmp	r3, #0
 8003668:	d013      	beq.n	8003692 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a4a      	ldr	r2, [pc, #296]	; (8003798 <HAL_UART_IRQHandler+0x308>)
 8003670:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fb87 	bl	8001d8a <HAL_DMA_Abort_IT>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d017      	beq.n	80036b2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800368c:	4610      	mov	r0, r2
 800368e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e00f      	b.n	80036b2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f906 	bl	80038a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	e00b      	b.n	80036b2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f902 	bl	80038a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	e007      	b.n	80036b2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8fe 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80036b0:	e0e4      	b.n	800387c <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b2:	bf00      	nop
    return;
 80036b4:	e0e2      	b.n	800387c <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	f040 80a7 	bne.w	800380e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80a1 	beq.w	800380e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 809b 	beq.w	800380e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2210      	movs	r2, #16
 80036de:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d156      	bne.n	800379c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80036f8:	893b      	ldrh	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80c0 	beq.w	8003880 <HAL_UART_IRQHandler+0x3f0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003706:	893a      	ldrh	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	f080 80b9 	bcs.w	8003880 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	893a      	ldrh	r2, [r7, #8]
 8003712:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003720:	d02a      	beq.n	8003778 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003730:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003750:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0210 	bic.w	r2, r2, #16
 800376c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fa99 	bl	8001caa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003784:	b29b      	uxth	r3, r3
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	b29b      	uxth	r3, r3
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f893 	bl	80038b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003792:	e075      	b.n	8003880 <HAL_UART_IRQHandler+0x3f0>
 8003794:	04000120 	.word	0x04000120
 8003798:	080041e3 	.word	0x080041e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d064      	beq.n	8003884 <HAL_UART_IRQHandler+0x3f4>
          && (nb_rx_data > 0U))
 80037ba:	897b      	ldrh	r3, [r7, #10]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d061      	beq.n	8003884 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037ce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0210 	bic.w	r2, r2, #16
 8003800:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003802:	897b      	ldrh	r3, [r7, #10]
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f856 	bl	80038b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800380c:	e03a      	b.n	8003884 <HAL_UART_IRQHandler+0x3f4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <HAL_UART_IRQHandler+0x3a4>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d008      	beq.n	8003834 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800382a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f84f 	bl	80038d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003832:	e02a      	b.n	800388a <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00d      	beq.n	800385a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01b      	beq.n	8003888 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
    }
    return;
 8003858:	e016      	b.n	8003888 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d012      	beq.n	800388a <HAL_UART_IRQHandler+0x3fa>
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fccd 	bl	800420e <UART_EndTransmit_IT>
    return;
 8003874:	bf00      	nop
 8003876:	e008      	b.n	800388a <HAL_UART_IRQHandler+0x3fa>
      return;
 8003878:	bf00      	nop
 800387a:	e006      	b.n	800388a <HAL_UART_IRQHandler+0x3fa>
    return;
 800387c:	bf00      	nop
 800387e:	e004      	b.n	800388a <HAL_UART_IRQHandler+0x3fa>
      return;
 8003880:	bf00      	nop
 8003882:	e002      	b.n	800388a <HAL_UART_IRQHandler+0x3fa>
      return;
 8003884:	bf00      	nop
 8003886:	e000      	b.n	800388a <HAL_UART_IRQHandler+0x3fa>
    return;
 8003888:	bf00      	nop
  }

}
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4bb1      	ldr	r3, [pc, #708]	; (8003bd4 <UART_SetConfig+0x2f0>)
 8003910:	4013      	ands	r3, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	6979      	ldr	r1, [r7, #20]
 8003918:	430b      	orrs	r3, r1
 800391a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a9f      	ldr	r2, [pc, #636]	; (8003bd8 <UART_SetConfig+0x2f4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d121      	bne.n	80039a4 <UART_SetConfig+0xc0>
 8003960:	4b9e      	ldr	r3, [pc, #632]	; (8003bdc <UART_SetConfig+0x2f8>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b03      	cmp	r3, #3
 800396c:	d816      	bhi.n	800399c <UART_SetConfig+0xb8>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <UART_SetConfig+0x90>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	08003985 	.word	0x08003985
 8003978:	08003991 	.word	0x08003991
 800397c:	0800398b 	.word	0x0800398b
 8003980:	08003997 	.word	0x08003997
 8003984:	2301      	movs	r3, #1
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e151      	b.n	8003c2e <UART_SetConfig+0x34a>
 800398a:	2302      	movs	r3, #2
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e14e      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003990:	2304      	movs	r3, #4
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e14b      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003996:	2308      	movs	r3, #8
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e148      	b.n	8003c2e <UART_SetConfig+0x34a>
 800399c:	2310      	movs	r3, #16
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	bf00      	nop
 80039a2:	e144      	b.n	8003c2e <UART_SetConfig+0x34a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a8d      	ldr	r2, [pc, #564]	; (8003be0 <UART_SetConfig+0x2fc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d134      	bne.n	8003a18 <UART_SetConfig+0x134>
 80039ae:	4b8b      	ldr	r3, [pc, #556]	; (8003bdc <UART_SetConfig+0x2f8>)
 80039b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b0c      	cmp	r3, #12
 80039ba:	d829      	bhi.n	8003a10 <UART_SetConfig+0x12c>
 80039bc:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <UART_SetConfig+0xe0>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	08003a11 	.word	0x08003a11
 80039cc:	08003a11 	.word	0x08003a11
 80039d0:	08003a11 	.word	0x08003a11
 80039d4:	08003a05 	.word	0x08003a05
 80039d8:	08003a11 	.word	0x08003a11
 80039dc:	08003a11 	.word	0x08003a11
 80039e0:	08003a11 	.word	0x08003a11
 80039e4:	080039ff 	.word	0x080039ff
 80039e8:	08003a11 	.word	0x08003a11
 80039ec:	08003a11 	.word	0x08003a11
 80039f0:	08003a11 	.word	0x08003a11
 80039f4:	08003a0b 	.word	0x08003a0b
 80039f8:	2300      	movs	r3, #0
 80039fa:	77fb      	strb	r3, [r7, #31]
 80039fc:	e117      	b.n	8003c2e <UART_SetConfig+0x34a>
 80039fe:	2302      	movs	r3, #2
 8003a00:	77fb      	strb	r3, [r7, #31]
 8003a02:	e114      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003a04:	2304      	movs	r3, #4
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e111      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e10e      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003a10:	2310      	movs	r3, #16
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	bf00      	nop
 8003a16:	e10a      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a71      	ldr	r2, [pc, #452]	; (8003be4 <UART_SetConfig+0x300>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d120      	bne.n	8003a64 <UART_SetConfig+0x180>
 8003a22:	4b6e      	ldr	r3, [pc, #440]	; (8003bdc <UART_SetConfig+0x2f8>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d00f      	beq.n	8003a50 <UART_SetConfig+0x16c>
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d802      	bhi.n	8003a3a <UART_SetConfig+0x156>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <UART_SetConfig+0x160>
 8003a38:	e010      	b.n	8003a5c <UART_SetConfig+0x178>
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d005      	beq.n	8003a4a <UART_SetConfig+0x166>
 8003a3e:	2b30      	cmp	r3, #48	; 0x30
 8003a40:	d009      	beq.n	8003a56 <UART_SetConfig+0x172>
 8003a42:	e00b      	b.n	8003a5c <UART_SetConfig+0x178>
 8003a44:	2300      	movs	r3, #0
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e0f1      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e0ee      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003a50:	2304      	movs	r3, #4
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e0eb      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003a56:	2308      	movs	r3, #8
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e0e8      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	bf00      	nop
 8003a62:	e0e4      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5f      	ldr	r2, [pc, #380]	; (8003be8 <UART_SetConfig+0x304>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d120      	bne.n	8003ab0 <UART_SetConfig+0x1cc>
 8003a6e:	4b5b      	ldr	r3, [pc, #364]	; (8003bdc <UART_SetConfig+0x2f8>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d00f      	beq.n	8003a9c <UART_SetConfig+0x1b8>
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d802      	bhi.n	8003a86 <UART_SetConfig+0x1a2>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <UART_SetConfig+0x1ac>
 8003a84:	e010      	b.n	8003aa8 <UART_SetConfig+0x1c4>
 8003a86:	2b80      	cmp	r3, #128	; 0x80
 8003a88:	d005      	beq.n	8003a96 <UART_SetConfig+0x1b2>
 8003a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a8c:	d009      	beq.n	8003aa2 <UART_SetConfig+0x1be>
 8003a8e:	e00b      	b.n	8003aa8 <UART_SetConfig+0x1c4>
 8003a90:	2300      	movs	r3, #0
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e0cb      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003a96:	2302      	movs	r3, #2
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e0c8      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e0c5      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	77fb      	strb	r3, [r7, #31]
 8003aa6:	e0c2      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	bf00      	nop
 8003aae:	e0be      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a4d      	ldr	r2, [pc, #308]	; (8003bec <UART_SetConfig+0x308>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d124      	bne.n	8003b04 <UART_SetConfig+0x220>
 8003aba:	4b48      	ldr	r3, [pc, #288]	; (8003bdc <UART_SetConfig+0x2f8>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac8:	d012      	beq.n	8003af0 <UART_SetConfig+0x20c>
 8003aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ace:	d802      	bhi.n	8003ad6 <UART_SetConfig+0x1f2>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <UART_SetConfig+0x200>
 8003ad4:	e012      	b.n	8003afc <UART_SetConfig+0x218>
 8003ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ada:	d006      	beq.n	8003aea <UART_SetConfig+0x206>
 8003adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae0:	d009      	beq.n	8003af6 <UART_SetConfig+0x212>
 8003ae2:	e00b      	b.n	8003afc <UART_SetConfig+0x218>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e0a1      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003aea:	2302      	movs	r3, #2
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e09e      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003af0:	2304      	movs	r3, #4
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e09b      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003af6:	2308      	movs	r3, #8
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e098      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003afc:	2310      	movs	r3, #16
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	bf00      	nop
 8003b02:	e094      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a39      	ldr	r2, [pc, #228]	; (8003bf0 <UART_SetConfig+0x30c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d124      	bne.n	8003b58 <UART_SetConfig+0x274>
 8003b0e:	4b33      	ldr	r3, [pc, #204]	; (8003bdc <UART_SetConfig+0x2f8>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1c:	d012      	beq.n	8003b44 <UART_SetConfig+0x260>
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b22:	d802      	bhi.n	8003b2a <UART_SetConfig+0x246>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <UART_SetConfig+0x254>
 8003b28:	e012      	b.n	8003b50 <UART_SetConfig+0x26c>
 8003b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2e:	d006      	beq.n	8003b3e <UART_SetConfig+0x25a>
 8003b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b34:	d009      	beq.n	8003b4a <UART_SetConfig+0x266>
 8003b36:	e00b      	b.n	8003b50 <UART_SetConfig+0x26c>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e077      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e074      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003b44:	2304      	movs	r3, #4
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e071      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e06e      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003b50:	2310      	movs	r3, #16
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	bf00      	nop
 8003b56:	e06a      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <UART_SetConfig+0x310>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d124      	bne.n	8003bac <UART_SetConfig+0x2c8>
 8003b62:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <UART_SetConfig+0x2f8>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b70:	d012      	beq.n	8003b98 <UART_SetConfig+0x2b4>
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b76:	d802      	bhi.n	8003b7e <UART_SetConfig+0x29a>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <UART_SetConfig+0x2a8>
 8003b7c:	e012      	b.n	8003ba4 <UART_SetConfig+0x2c0>
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b82:	d006      	beq.n	8003b92 <UART_SetConfig+0x2ae>
 8003b84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b88:	d009      	beq.n	8003b9e <UART_SetConfig+0x2ba>
 8003b8a:	e00b      	b.n	8003ba4 <UART_SetConfig+0x2c0>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e04d      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003b92:	2302      	movs	r3, #2
 8003b94:	77fb      	strb	r3, [r7, #31]
 8003b96:	e04a      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e047      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e044      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	bf00      	nop
 8003baa:	e040      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <UART_SetConfig+0x314>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d139      	bne.n	8003c2a <UART_SetConfig+0x346>
 8003bb6:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <UART_SetConfig+0x2f8>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bc4:	d027      	beq.n	8003c16 <UART_SetConfig+0x332>
 8003bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bca:	d817      	bhi.n	8003bfc <UART_SetConfig+0x318>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01c      	beq.n	8003c0a <UART_SetConfig+0x326>
 8003bd0:	e027      	b.n	8003c22 <UART_SetConfig+0x33e>
 8003bd2:	bf00      	nop
 8003bd4:	efff69f3 	.word	0xefff69f3
 8003bd8:	40011000 	.word	0x40011000
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40004400 	.word	0x40004400
 8003be4:	40004800 	.word	0x40004800
 8003be8:	40004c00 	.word	0x40004c00
 8003bec:	40005000 	.word	0x40005000
 8003bf0:	40011400 	.word	0x40011400
 8003bf4:	40007800 	.word	0x40007800
 8003bf8:	40007c00 	.word	0x40007c00
 8003bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c00:	d006      	beq.n	8003c10 <UART_SetConfig+0x32c>
 8003c02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c06:	d009      	beq.n	8003c1c <UART_SetConfig+0x338>
 8003c08:	e00b      	b.n	8003c22 <UART_SetConfig+0x33e>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e00e      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003c10:	2302      	movs	r3, #2
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e00b      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003c16:	2304      	movs	r3, #4
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e008      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e005      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003c22:	2310      	movs	r3, #16
 8003c24:	77fb      	strb	r3, [r7, #31]
 8003c26:	bf00      	nop
 8003c28:	e001      	b.n	8003c2e <UART_SetConfig+0x34a>
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c36:	d15b      	bne.n	8003cf0 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8003c38:	7ffb      	ldrb	r3, [r7, #31]
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d827      	bhi.n	8003c8e <UART_SetConfig+0x3aa>
 8003c3e:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <UART_SetConfig+0x360>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c79 	.word	0x08003c79
 8003c50:	08003c8f 	.word	0x08003c8f
 8003c54:	08003c7f 	.word	0x08003c7f
 8003c58:	08003c8f 	.word	0x08003c8f
 8003c5c:	08003c8f 	.word	0x08003c8f
 8003c60:	08003c8f 	.word	0x08003c8f
 8003c64:	08003c87 	.word	0x08003c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c68:	f7fe ff36 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8003c6c:	61b8      	str	r0, [r7, #24]
        break;
 8003c6e:	e013      	b.n	8003c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c70:	f7fe ff46 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 8003c74:	61b8      	str	r0, [r7, #24]
        break;
 8003c76:	e00f      	b.n	8003c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c78:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <UART_SetConfig+0x4bc>)
 8003c7a:	61bb      	str	r3, [r7, #24]
        break;
 8003c7c:	e00c      	b.n	8003c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7e:	f7fe fe6d 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8003c82:	61b8      	str	r0, [r7, #24]
        break;
 8003c84:	e008      	b.n	8003c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c8a:	61bb      	str	r3, [r7, #24]
        break;
 8003c8c:	e004      	b.n	8003c98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	77bb      	strb	r3, [r7, #30]
        break;
 8003c96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d074      	beq.n	8003d88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	005a      	lsls	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	441a      	add	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b0f      	cmp	r3, #15
 8003cba:	d916      	bls.n	8003cea <UART_SetConfig+0x406>
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d212      	bcs.n	8003cea <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f023 030f 	bic.w	r3, r3, #15
 8003ccc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	085b      	lsrs	r3, r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	89fb      	ldrh	r3, [r7, #14]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	89fa      	ldrh	r2, [r7, #14]
 8003ce6:	60da      	str	r2, [r3, #12]
 8003ce8:	e04e      	b.n	8003d88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	77bb      	strb	r3, [r7, #30]
 8003cee:	e04b      	b.n	8003d88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cf0:	7ffb      	ldrb	r3, [r7, #31]
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d827      	bhi.n	8003d46 <UART_SetConfig+0x462>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <UART_SetConfig+0x418>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d21 	.word	0x08003d21
 8003d00:	08003d29 	.word	0x08003d29
 8003d04:	08003d31 	.word	0x08003d31
 8003d08:	08003d47 	.word	0x08003d47
 8003d0c:	08003d37 	.word	0x08003d37
 8003d10:	08003d47 	.word	0x08003d47
 8003d14:	08003d47 	.word	0x08003d47
 8003d18:	08003d47 	.word	0x08003d47
 8003d1c:	08003d3f 	.word	0x08003d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d20:	f7fe feda 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8003d24:	61b8      	str	r0, [r7, #24]
        break;
 8003d26:	e013      	b.n	8003d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d28:	f7fe feea 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 8003d2c:	61b8      	str	r0, [r7, #24]
        break;
 8003d2e:	e00f      	b.n	8003d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <UART_SetConfig+0x4bc>)
 8003d32:	61bb      	str	r3, [r7, #24]
        break;
 8003d34:	e00c      	b.n	8003d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d36:	f7fe fe11 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8003d3a:	61b8      	str	r0, [r7, #24]
        break;
 8003d3c:	e008      	b.n	8003d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d42:	61bb      	str	r3, [r7, #24]
        break;
 8003d44:	e004      	b.n	8003d50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	77bb      	strb	r3, [r7, #30]
        break;
 8003d4e:	bf00      	nop
    }

    if (pclk != 0U)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d018      	beq.n	8003d88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	085a      	lsrs	r2, r3, #1
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	441a      	add	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b0f      	cmp	r3, #15
 8003d70:	d908      	bls.n	8003d84 <UART_SetConfig+0x4a0>
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d78:	d204      	bcs.n	8003d84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	e001      	b.n	8003d88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d94:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	00f42400 	.word	0x00f42400

08003da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01a      	beq.n	8003eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea2:	d10a      	bne.n	8003eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
  }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ef8:	f7fd f824 	bl	8000f44 <HAL_GetTick>
 8003efc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d10e      	bne.n	8003f2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f82d 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e023      	b.n	8003f72 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d10e      	bne.n	8003f56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f817 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e00d      	b.n	8003f72 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8a:	e05e      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d05a      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f94:	f7fc ffd6 	bl	8000f44 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d302      	bcc.n	8003faa <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d11b      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e043      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02c      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffe:	d124      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004008:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004018:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2220      	movs	r2, #32
 800403a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e00f      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	bf0c      	ite	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	2300      	movne	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	429a      	cmp	r2, r3
 8004066:	d091      	beq.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	88fa      	ldrh	r2, [r7, #6]
 8004094:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	d10e      	bne.n	80040c6 <UART_Start_Receive_IT+0x52>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <UART_Start_Receive_IT+0x48>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ba:	e02d      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	22ff      	movs	r2, #255	; 0xff
 80040c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c4:	e028      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10d      	bne.n	80040ea <UART_Start_Receive_IT+0x76>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <UART_Start_Receive_IT+0x6c>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	22ff      	movs	r2, #255	; 0xff
 80040da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040de:	e01b      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	227f      	movs	r2, #127	; 0x7f
 80040e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040e8:	e016      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f2:	d10d      	bne.n	8004110 <UART_Start_Receive_IT+0x9c>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <UART_Start_Receive_IT+0x92>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	227f      	movs	r2, #127	; 0x7f
 8004100:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004104:	e008      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	223f      	movs	r2, #63	; 0x3f
 800410a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800410e:	e003      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2222      	movs	r2, #34	; 0x22
 8004124:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0201 	orr.w	r2, r2, #1
 8004134:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413e:	d107      	bne.n	8004150 <UART_Start_Receive_IT+0xdc>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a0c      	ldr	r2, [pc, #48]	; (800417c <UART_Start_Receive_IT+0x108>)
 800414c:	665a      	str	r2, [r3, #100]	; 0x64
 800414e:	e002      	b.n	8004156 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a0b      	ldr	r2, [pc, #44]	; (8004180 <UART_Start_Receive_IT+0x10c>)
 8004154:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800416c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	08004315 	.word	0x08004315
 8004180:	08004241 	.word	0x08004241

08004184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800419a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0210 	bic.w	r2, r2, #16
 80041c2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fb4f 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004224:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff fb2c 	bl	8003890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800424e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004254:	2b22      	cmp	r3, #34	; 0x22
 8004256:	d151      	bne.n	80042fc <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004260:	89bb      	ldrh	r3, [r7, #12]
 8004262:	b2d9      	uxtb	r1, r3
 8004264:	89fb      	ldrh	r3, [r7, #14]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426c:	400a      	ands	r2, r1
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d138      	bne.n	800430c <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042a8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10f      	bne.n	80042ee <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0210 	bic.w	r2, r2, #16
 80042dc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fae6 	bl	80038b8 <HAL_UARTEx_RxEventCallback>
 80042ec:	e002      	b.n	80042f4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc f922 	bl	8000538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042fa:	e007      	b.n	800430c <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0208 	orr.w	r2, r2, #8
 800430a:	619a      	str	r2, [r3, #24]
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004322:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004328:	2b22      	cmp	r3, #34	; 0x22
 800432a:	d151      	bne.n	80043d0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800433a:	89ba      	ldrh	r2, [r7, #12]
 800433c:	89fb      	ldrh	r3, [r7, #14]
 800433e:	4013      	ands	r3, r2
 8004340:	b29a      	uxth	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	1c9a      	adds	r2, r3, #2
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d138      	bne.n	80043e0 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800437c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d10f      	bne.n	80043c2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0210 	bic.w	r2, r2, #16
 80043b0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043b8:	4619      	mov	r1, r3
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fa7c 	bl	80038b8 <HAL_UARTEx_RxEventCallback>
 80043c0:	e002      	b.n	80043c8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fc f8b8 	bl	8000538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043ce:	e007      	b.n	80043e0 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0208 	orr.w	r2, r2, #8
 80043de:	619a      	str	r2, [r3, #24]
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <__libc_init_array>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	4e0d      	ldr	r6, [pc, #52]	; (8004420 <__libc_init_array+0x38>)
 80043ec:	4c0d      	ldr	r4, [pc, #52]	; (8004424 <__libc_init_array+0x3c>)
 80043ee:	1ba4      	subs	r4, r4, r6
 80043f0:	10a4      	asrs	r4, r4, #2
 80043f2:	2500      	movs	r5, #0
 80043f4:	42a5      	cmp	r5, r4
 80043f6:	d109      	bne.n	800440c <__libc_init_array+0x24>
 80043f8:	4e0b      	ldr	r6, [pc, #44]	; (8004428 <__libc_init_array+0x40>)
 80043fa:	4c0c      	ldr	r4, [pc, #48]	; (800442c <__libc_init_array+0x44>)
 80043fc:	f000 f820 	bl	8004440 <_init>
 8004400:	1ba4      	subs	r4, r4, r6
 8004402:	10a4      	asrs	r4, r4, #2
 8004404:	2500      	movs	r5, #0
 8004406:	42a5      	cmp	r5, r4
 8004408:	d105      	bne.n	8004416 <__libc_init_array+0x2e>
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004410:	4798      	blx	r3
 8004412:	3501      	adds	r5, #1
 8004414:	e7ee      	b.n	80043f4 <__libc_init_array+0xc>
 8004416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800441a:	4798      	blx	r3
 800441c:	3501      	adds	r5, #1
 800441e:	e7f2      	b.n	8004406 <__libc_init_array+0x1e>
 8004420:	08004478 	.word	0x08004478
 8004424:	08004478 	.word	0x08004478
 8004428:	08004478 	.word	0x08004478
 800442c:	0800447c 	.word	0x0800447c

08004430 <memset>:
 8004430:	4402      	add	r2, r0
 8004432:	4603      	mov	r3, r0
 8004434:	4293      	cmp	r3, r2
 8004436:	d100      	bne.n	800443a <memset+0xa>
 8004438:	4770      	bx	lr
 800443a:	f803 1b01 	strb.w	r1, [r3], #1
 800443e:	e7f9      	b.n	8004434 <memset+0x4>

08004440 <_init>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr

0800444c <_fini>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	bf00      	nop
 8004450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004452:	bc08      	pop	{r3}
 8004454:	469e      	mov	lr, r3
 8004456:	4770      	bx	lr
