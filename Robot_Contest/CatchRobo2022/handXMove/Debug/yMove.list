
yMove.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000437c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004534  08004534  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004534  08004534  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004534  08004534  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800453c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000148  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000015c  2000015c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8bd  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001931  00000000  00000000  0002b901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  0002d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a40  00000000  00000000  0002dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af1f  00000000  00000000  0002e770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd2b  00000000  00000000  0004968f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a24d0  00000000  00000000  000553ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f788a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e28  00000000  00000000  000f78dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044ec 	.word	0x080044ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080044ec 	.word	0x080044ec

080001c8 <HAL_TIM_PeriodElapsedCallback>:
long precnt = 0;
long overflowcnt = 0;
const long CntPeriod = 65535;
long Location;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80001d8:	d116      	bne.n	8000208 <HAL_TIM_PeriodElapsedCallback+0x40>
		__HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f06f 0201 	mvn.w	r2, #1
 80001e2:	611a      	str	r2, [r3, #16]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 80001e4:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f003 0310 	and.w	r3, r3, #16
 80001ee:	2b10      	cmp	r3, #16
 80001f0:	d105      	bne.n	80001fe <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			overflowcnt --;
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	3b01      	subs	r3, #1
 80001f8:	4a07      	ldr	r2, [pc, #28]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80001fa:	6013      	str	r3, [r2, #0]
		else
		{
			overflowcnt ++;
		}
	}
}
 80001fc:	e004      	b.n	8000208 <HAL_TIM_PeriodElapsedCallback+0x40>
			overflowcnt ++;
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	3301      	adds	r3, #1
 8000204:	4a04      	ldr	r2, [pc, #16]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	20000058 	.word	0x20000058
 8000218:	20000108 	.word	0x20000108

0800021c <Rotate_Init>:
int movingFlag = 0;
int Rotate_Init(int target){
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if(movingFlag == 1)return -1;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <Rotate_Init+0x40>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d102      	bne.n	8000232 <Rotate_Init+0x16>
 800022c:	f04f 33ff 	mov.w	r3, #4294967295
 8000230:	e00d      	b.n	800024e <Rotate_Init+0x32>
	SumValueDif=0;
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <Rotate_Init+0x44>)
 8000234:	f04f 0200 	mov.w	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
	movingFlag = 1;
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <Rotate_Init+0x40>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
	//初期化す
	Location = 0;//現在地
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <Rotate_Init+0x48>)
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
	goal = target;
 8000246:	4a08      	ldr	r2, [pc, #32]	; (8000268 <Rotate_Init+0x4c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	6013      	str	r3, [r2, #0]
	return 0;
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	20000110 	.word	0x20000110
 8000260:	200000f4 	.word	0x200000f4
 8000264:	2000010c 	.word	0x2000010c
 8000268:	200000f8 	.word	0x200000f8

0800026c <Rotate_PID>:
float Rotate_PID(float _now, float _goal){
 800026c:	b480      	push	{r7}
 800026e:	b087      	sub	sp, #28
 8000270:	af00      	add	r7, sp, #0
 8000272:	ed87 0a01 	vstr	s0, [r7, #4]
 8000276:	edc7 0a00 	vstr	s1, [r7]
	  float ValueDif = _goal - _now;
 800027a:	ed97 7a00 	vldr	s14, [r7]
 800027e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000286:	edc7 7a05 	vstr	s15, [r7, #20]
	  if(SumValueDif / 10000 * ValueDif < 0)SumValueDif += ValueDif;
 800028a:	4b2c      	ldr	r3, [pc, #176]	; (800033c <Rotate_PID+0xd0>)
 800028c:	edd3 7a00 	vldr	s15, [r3]
 8000290:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8000340 <Rotate_PID+0xd4>
 8000294:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000298:	edd7 7a05 	vldr	s15, [r7, #20]
 800029c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002a8:	d50a      	bpl.n	80002c0 <Rotate_PID+0x54>
 80002aa:	4b24      	ldr	r3, [pc, #144]	; (800033c <Rotate_PID+0xd0>)
 80002ac:	ed93 7a00 	vldr	s14, [r3]
 80002b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80002b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002b8:	4b20      	ldr	r3, [pc, #128]	; (800033c <Rotate_PID+0xd0>)
 80002ba:	edc3 7a00 	vstr	s15, [r3]
 80002be:	e00d      	b.n	80002dc <Rotate_PID+0x70>
	  else SumValueDif += ValueDif/100;
 80002c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80002c4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8000344 <Rotate_PID+0xd8>
 80002c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <Rotate_PID+0xd0>)
 80002ce:	edd3 7a00 	vldr	s15, [r3]
 80002d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002d6:	4b19      	ldr	r3, [pc, #100]	; (800033c <Rotate_PID+0xd0>)
 80002d8:	edc3 7a00 	vstr	s15, [r3]
	  float DValueDif = ValueDif - PreValueDif;
 80002dc:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <Rotate_PID+0xdc>)
 80002de:	edd3 7a00 	vldr	s15, [r3]
 80002e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80002e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80002ea:	edc7 7a04 	vstr	s15, [r7, #16]
	  float output = Kp * ValueDif + Ki * SumValueDif + Kd * DValueDif;
 80002ee:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800034c <Rotate_PID+0xe0>
 80002f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80002f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80002fa:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000350 <Rotate_PID+0xe4>
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <Rotate_PID+0xd0>)
 8000300:	edd3 7a00 	vldr	s15, [r3]
 8000304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800030c:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000354 <Rotate_PID+0xe8>
 8000310:	edd7 7a04 	vldr	s15, [r7, #16]
 8000314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800031c:	edc7 7a03 	vstr	s15, [r7, #12]
	  PreValueDif = ValueDif;
 8000320:	4a09      	ldr	r2, [pc, #36]	; (8000348 <Rotate_PID+0xdc>)
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	6013      	str	r3, [r2, #0]
	  return output;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	ee07 3a90 	vmov	s15, r3
}
 800032c:	eeb0 0a67 	vmov.f32	s0, s15
 8000330:	371c      	adds	r7, #28
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	200000f4 	.word	0x200000f4
 8000340:	461c4000 	.word	0x461c4000
 8000344:	42c80000 	.word	0x42c80000
 8000348:	200000f0 	.word	0x200000f0
 800034c:	3d4ccccd 	.word	0x3d4ccccd
 8000350:	39d1b717 	.word	0x39d1b717
 8000354:	00000000 	.word	0x00000000

08000358 <Abs>:

long stopError = 2;
long stopCount = 0;
long Abs(long x){
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	if(x<0)return -1*x;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b00      	cmp	r3, #0
 8000364:	da02      	bge.n	800036c <Abs+0x14>
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	425b      	negs	r3, r3
 800036a:	e000      	b.n	800036e <Abs+0x16>
	return x;
 800036c:	687b      	ldr	r3, [r7, #4]
}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
	...

0800037c <MorterReset>:

void MorterReset(){
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	movingFlag = 0;
 8000380:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MorterReset+0x28>)
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
	Location = 0;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MorterReset+0x2c>)
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
	SumValueDif=0;
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <MorterReset+0x30>)
 800038e:	f04f 0200 	mov.w	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
	stopCount=0;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MorterReset+0x34>)
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	20000110 	.word	0x20000110
 80003a8:	2000010c 	.word	0x2000010c
 80003ac:	200000f4 	.word	0x200000f4
 80003b0:	20000114 	.word	0x20000114

080003b4 <Motor_End>:

int Motor_End(){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	if(  Abs(Location - goal) < stopError){
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <Motor_End+0x44>)
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <Motor_End+0x48>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffc8 	bl	8000358 <Abs>
 80003c8:	4602      	mov	r2, r0
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <Motor_End+0x4c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	da0b      	bge.n	80003ea <Motor_End+0x36>
		stopCount++;
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <Motor_End+0x50>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3301      	adds	r3, #1
 80003d8:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <Motor_End+0x50>)
 80003da:	6013      	str	r3, [r2, #0]
		if(stopCount >= 200){
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <Motor_End+0x50>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2bc7      	cmp	r3, #199	; 0xc7
 80003e2:	dd05      	ble.n	80003f0 <Motor_End+0x3c>
			MorterReset();
 80003e4:	f7ff ffca 	bl	800037c <MorterReset>
 80003e8:	e002      	b.n	80003f0 <Motor_End+0x3c>
		}
	}
	else stopCount = 0;
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <Motor_End+0x50>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
}
 80003f0:	bf00      	nop
 80003f2:	4618      	mov	r0, r3
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	2000010c 	.word	0x2000010c
 80003fc:	200000f8 	.word	0x200000f8
 8000400:	20000000 	.word	0x20000000
 8000404:	20000114 	.word	0x20000114

08000408 <Filter_Init>:
int autoFlag = 1;
int stopFlag = 0;
int secondStep = 0;

CAN_FilterTypeDef filter;
void Filter_Init(){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	filter.FilterIdHigh         = 0;
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <Filter_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
	filter.FilterIdLow          = 0;
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <Filter_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
	filter.FilterMaskIdHigh     = 0;
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <Filter_Init+0x4c>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow      = 0;
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <Filter_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	60da      	str	r2, [r3, #12]
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <Filter_Init+0x4c>)
 8000426:	2201      	movs	r2, #1
 8000428:	61da      	str	r2, [r3, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <Filter_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
	filter.FilterBank           = 0;
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <Filter_Init+0x4c>)
 8000432:	2200      	movs	r2, #0
 8000434:	615a      	str	r2, [r3, #20]
	filter.FilterMode           = CAN_FILTERMODE_IDMASK;
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <Filter_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
	filter.SlaveStartFilterBank = 14;
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <Filter_Init+0x4c>)
 800043e:	220e      	movs	r2, #14
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
	filter.FilterActivation     = ENABLE;
 8000442:	4b04      	ldr	r3, [pc, #16]	; (8000454 <Filter_Init+0x4c>)
 8000444:	2201      	movs	r2, #1
 8000446:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan, &filter);
 8000448:	4902      	ldr	r1, [pc, #8]	; (8000454 <Filter_Init+0x4c>)
 800044a:	4803      	ldr	r0, [pc, #12]	; (8000458 <Filter_Init+0x50>)
 800044c:	f000 fded 	bl	800102a <HAL_CAN_ConfigFilter>
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000120 	.word	0x20000120
 8000458:	20000030 	.word	0x20000030

0800045c <HAL_CAN_RxFifo0MsgPendingCallback>:
const int rotate200=200*85;



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08c      	sub	sp, #48	; 0x30
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	f107 0214 	add.w	r2, r7, #20
 800046c:	2100      	movs	r1, #0
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f000 fee9 	bl	8001246 <HAL_CAN_GetRxMessage>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	f040 809f 	bne.w	80005ba <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
	{
		if(RxHeader.StdId==0x552){
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	f240 5252 	movw	r2, #1362	; 0x552
 8000482:	4293      	cmp	r3, r2
 8000484:	f040 8099 	bne.w	80005ba <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
			id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d101      	bne.n	8000492 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	e000      	b.n	8000494 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8000492:	69bb      	ldr	r3, [r7, #24]
 8000494:	4a4b      	ldr	r2, [pc, #300]	; (80005c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8000496:	6013      	str	r3, [r2, #0]
			dlc = RxHeader.DLC;
 8000498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049a:	4a4b      	ldr	r2, [pc, #300]	; (80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 800049c:	6013      	str	r3, [r2, #0]
			if(RxData[5]=='T'){
 800049e:	7c7b      	ldrb	r3, [r7, #17]
 80004a0:	2b54      	cmp	r3, #84	; 0x54
 80004a2:	d103      	bne.n	80004ac <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
				autoFlag=1;
 80004a4:	4b49      	ldr	r3, [pc, #292]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	e002      	b.n	80004b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
			}
			else{
				autoFlag=0;
 80004ac:	4b47      	ldr	r3, [pc, #284]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
			}

			if(RxData[6]=='T'){
 80004b2:	7cbb      	ldrb	r3, [r7, #18]
 80004b4:	2b54      	cmp	r3, #84	; 0x54
 80004b6:	d110      	bne.n	80004da <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
				if(stopFlag==0){
 80004b8:	4b45      	ldr	r3, [pc, #276]	; (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d10f      	bne.n	80004e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
					stopFlag=1;
 80004c0:	4b43      	ldr	r3, [pc, #268]	; (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	601a      	str	r2, [r3, #0]
					secondStep=0;
 80004c6:	4b43      	ldr	r3, [pc, #268]	; (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
					MorterReset();
 80004cc:	f7ff ff56 	bl	800037c <MorterReset>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 80004d0:	4b41      	ldr	r3, [pc, #260]	; (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	639a      	str	r2, [r3, #56]	; 0x38
 80004d8:	e002      	b.n	80004e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
				}
			}
			else{
				stopFlag=0;
 80004da:	4b3d      	ldr	r3, [pc, #244]	; (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
			}

			if(RxData[1]=='U'){
 80004e0:	7b7b      	ldrb	r3, [r7, #13]
 80004e2:	2b55      	cmp	r3, #85	; 0x55
 80004e4:	d122      	bne.n	800052c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
				if(autoFlag == 1){
 80004e6:	4b39      	ldr	r3, [pc, #228]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d114      	bne.n	8000518 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
					if(secondStep ==0){
 80004ee:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d109      	bne.n	800050a <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
						Rotate_Init( -1 * rotate349);
 80004f6:	f247 33e1 	movw	r3, #29665	; 0x73e1
 80004fa:	425b      	negs	r3, r3
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fe8d 	bl	800021c <Rotate_Init>
						secondStep = 1;
 8000502:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8000504:	2201      	movs	r2, #1
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	e03f      	b.n	800058a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
					}
					else{
						Rotate_Init( -1 * rotate200);
 800050a:	f244 2368 	movw	r3, #17000	; 0x4268
 800050e:	425b      	negs	r3, r3
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe83 	bl	800021c <Rotate_Init>
 8000516:	e038      	b.n	800058a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
					}
				}
				else {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2110      	movs	r1, #16
 800051c:	482f      	ldr	r0, [pc, #188]	; (80005dc <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800051e:	f001 fc7d 	bl	8001e1c <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 200);
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	22c8      	movs	r2, #200	; 0xc8
 8000528:	639a      	str	r2, [r3, #56]	; 0x38
 800052a:	e02e      	b.n	800058a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
				}

				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
				//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 300);
			}
			else if(RxData[1]=='N'){
 800052c:	7b7b      	ldrb	r3, [r7, #13]
 800052e:	2b4e      	cmp	r3, #78	; 0x4e
 8000530:	d108      	bne.n	8000544 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
//				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
				if(autoFlag == 0)__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8000532:	4b26      	ldr	r3, [pc, #152]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d127      	bne.n	800058a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2200      	movs	r2, #0
 8000540:	639a      	str	r2, [r3, #56]	; 0x38
 8000542:	e022      	b.n	800058a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
			}
			else if(RxData[1]=='D'){
 8000544:	7b7b      	ldrb	r3, [r7, #13]
 8000546:	2b44      	cmp	r3, #68	; 0x44
 8000548:	d11f      	bne.n	800058a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>

				if(stopFlag==1){
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d104      	bne.n	800055c <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2200      	movs	r2, #0
 8000558:	639a      	str	r2, [r3, #56]	; 0x38
 800055a:	e016      	b.n	800058a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
				}
				else if(autoFlag == 1){
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d109      	bne.n	8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
					//Rotate_Init(_target);
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2110      	movs	r1, #16
 8000568:	481c      	ldr	r0, [pc, #112]	; (80005dc <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800056a:	f001 fc57 	bl	8001e1c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 200);
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	22c8      	movs	r2, #200	; 0xc8
 8000574:	639a      	str	r2, [r3, #56]	; 0x38
 8000576:	e008      	b.n	800058a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
				}
				else{
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2110      	movs	r1, #16
 800057c:	4817      	ldr	r0, [pc, #92]	; (80005dc <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800057e:	f001 fc4d 	bl	8001e1c <HAL_GPIO_WritePin>
					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 200);
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	22c8      	movs	r2, #200	; 0xc8
 8000588:	639a      	str	r2, [r3, #56]	; 0x38
				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
				//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 300);

			}

			data[0] = RxData[0];
 800058a:	7b3a      	ldrb	r2, [r7, #12]
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800058e:	701a      	strb	r2, [r3, #0]
			data[1] = RxData[1];
 8000590:	7b7a      	ldrb	r2, [r7, #13]
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000594:	705a      	strb	r2, [r3, #1]
			data[2] = RxData[2];
 8000596:	7bba      	ldrb	r2, [r7, #14]
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800059a:	709a      	strb	r2, [r3, #2]
			data[3] = RxData[3];
 800059c:	7bfa      	ldrb	r2, [r7, #15]
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80005a0:	70da      	strb	r2, [r3, #3]
			data[4] = RxData[4];
 80005a2:	7c3a      	ldrb	r2, [r7, #16]
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80005a6:	711a      	strb	r2, [r3, #4]
			data[5] = RxData[5];
 80005a8:	7c7a      	ldrb	r2, [r7, #17]
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80005ac:	715a      	strb	r2, [r3, #5]
			data[6] = RxData[6];
 80005ae:	7cba      	ldrb	r2, [r7, #18]
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80005b2:	719a      	strb	r2, [r3, #6]
			data[7] = RxData[7];
 80005b4:	7cfa      	ldrb	r2, [r7, #19]
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80005b8:	71da      	strb	r2, [r3, #7]
		}
	}
}
 80005ba:	bf00      	nop
 80005bc:	3730      	adds	r7, #48	; 0x30
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000148 	.word	0x20000148
 80005c8:	2000014c 	.word	0x2000014c
 80005cc:	20000004 	.word	0x20000004
 80005d0:	20000118 	.word	0x20000118
 80005d4:	2000011c 	.word	0x2000011c
 80005d8:	200000a4 	.word	0x200000a4
 80005dc:	48000400 	.word	0x48000400
 80005e0:	20000150 	.word	0x20000150

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fbbe 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f8a8 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f9d8 	bl	80009a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005f4:	f000 f91c 	bl	8000830 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005f8:	f000 f96e 	bl	80008d8 <MX_TIM3_Init>
  MX_CAN_Init();
 80005fc:	f000 f8e2 	bl	80007c4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  //char scnt[100];
  overflowcnt = 0;
 8000600:	4b42      	ldr	r3, [pc, #264]	; (800070c <main+0x128>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8000606:	213c      	movs	r1, #60	; 0x3c
 8000608:	4841      	ldr	r0, [pc, #260]	; (8000710 <main+0x12c>)
 800060a:	f003 f889 	bl	8003720 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800060e:	4840      	ldr	r0, [pc, #256]	; (8000710 <main+0x12c>)
 8000610:	f002 fe40 	bl	8003294 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan);
 8000614:	483f      	ldr	r0, [pc, #252]	; (8000714 <main+0x130>)
 8000616:	f000 fdd2 	bl	80011be <HAL_CAN_Start>
  Filter_Init();
 800061a:	f7ff fef5 	bl	8000408 <Filter_Init>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800061e:	2102      	movs	r1, #2
 8000620:	483c      	ldr	r0, [pc, #240]	; (8000714 <main+0x130>)
 8000622:	f000 ff22 	bl	800146a <HAL_CAN_ActivateNotification>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000626:	2104      	movs	r1, #4
 8000628:	483b      	ldr	r0, [pc, #236]	; (8000718 <main+0x134>)
 800062a:	f002 fee7 	bl	80033fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800062e:	210c      	movs	r1, #12
 8000630:	4839      	ldr	r0, [pc, #228]	; (8000718 <main+0x134>)
 8000632:	f002 fee3 	bl	80033fc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cnt = (long)(overflowcnt) * CntPeriod + (long)TIM2 -> CNT;//現在のcntを更新する
 8000636:	4b35      	ldr	r3, [pc, #212]	; (800070c <main+0x128>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800063e:	fb02 f303 	mul.w	r3, r2, r3
 8000642:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000646:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000648:	4413      	add	r3, r2
 800064a:	4a34      	ldr	r2, [pc, #208]	; (800071c <main+0x138>)
 800064c:	6013      	str	r3, [r2, #0]
	  if(movingFlag == 1){
 800064e:	4b34      	ldr	r3, [pc, #208]	; (8000720 <main+0x13c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d140      	bne.n	80006d8 <main+0xf4>
		  Location += -1 * (cnt - precnt);
 8000656:	4b33      	ldr	r3, [pc, #204]	; (8000724 <main+0x140>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <main+0x138>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	1ad2      	subs	r2, r2, r3
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <main+0x144>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4413      	add	r3, r2
 8000666:	4a30      	ldr	r2, [pc, #192]	; (8000728 <main+0x144>)
 8000668:	6013      	str	r3, [r2, #0]
		  output = (long)Rotate_PID(Location, goal);//目標と現在地でPID制御
 800066a:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <main+0x144>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	ee07 3a90 	vmov	s15, r3
 8000672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <main+0x148>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	ee07 3a10 	vmov	s14, r3
 800067e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000682:	eef0 0a47 	vmov.f32	s1, s14
 8000686:	eeb0 0a67 	vmov.f32	s0, s15
 800068a:	f7ff fdef 	bl	800026c <Rotate_PID>
 800068e:	eef0 7a40 	vmov.f32	s15, s0
 8000692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000696:	ee17 2a90 	vmov	r2, s15
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <main+0x14c>)
 800069c:	601a      	str	r2, [r3, #0]
		  if(output<0){
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <main+0x14c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	da0a      	bge.n	80006bc <main+0xd8>
			  output*=-1;
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <main+0x14c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	425b      	negs	r3, r3
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <main+0x14c>)
 80006ae:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2110      	movs	r1, #16
 80006b4:	481f      	ldr	r0, [pc, #124]	; (8000734 <main+0x150>)
 80006b6:	f001 fbb1 	bl	8001e1c <HAL_GPIO_WritePin>
 80006ba:	e004      	b.n	80006c6 <main+0xe2>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	481c      	ldr	r0, [pc, #112]	; (8000734 <main+0x150>)
 80006c2:	f001 fbab 	bl	8001e1c <HAL_GPIO_WritePin>
		  }
		  if(output > 250) output = 250;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <main+0x14c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2bfa      	cmp	r3, #250	; 0xfa
 80006cc:	dd02      	ble.n	80006d4 <main+0xf0>
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <main+0x14c>)
 80006d0:	22fa      	movs	r2, #250	; 0xfa
 80006d2:	601a      	str	r2, [r3, #0]
		  Motor_End();
 80006d4:	f7ff fe6e 	bl	80003b4 <Motor_End>
	  }
	  if(movingFlag == 0){
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <main+0x13c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <main+0x102>
		  output = 0;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <main+0x14c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
	  }
	  if(autoFlag == 1 && data[1] !='D')__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, output);
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <main+0x154>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d108      	bne.n	8000700 <main+0x11c>
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <main+0x158>)
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	2b44      	cmp	r3, #68	; 0x44
 80006f4:	d004      	beq.n	8000700 <main+0x11c>
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <main+0x14c>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <main+0x134>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	639a      	str	r2, [r3, #56]	; 0x38

	  precnt = cnt;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <main+0x138>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <main+0x140>)
 8000706:	6013      	str	r3, [r2, #0]
	  cnt = (long)(overflowcnt) * CntPeriod + (long)TIM2 -> CNT;//現在のcntを更新する
 8000708:	e795      	b.n	8000636 <main+0x52>
 800070a:	bf00      	nop
 800070c:	20000108 	.word	0x20000108
 8000710:	20000058 	.word	0x20000058
 8000714:	20000030 	.word	0x20000030
 8000718:	200000a4 	.word	0x200000a4
 800071c:	20000100 	.word	0x20000100
 8000720:	20000110 	.word	0x20000110
 8000724:	20000104 	.word	0x20000104
 8000728:	2000010c 	.word	0x2000010c
 800072c:	200000f8 	.word	0x200000f8
 8000730:	200000fc 	.word	0x200000fc
 8000734:	48000400 	.word	0x48000400
 8000738:	20000004 	.word	0x20000004
 800073c:	20000150 	.word	0x20000150

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b090      	sub	sp, #64	; 0x40
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	2228      	movs	r2, #40	; 0x28
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f003 fec4 	bl	80044dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000762:	2302      	movs	r3, #2
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000766:	2301      	movs	r3, #1
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076a:	2310      	movs	r3, #16
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000772:	2300      	movs	r3, #0
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000776:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fb63 	bl	8001e4c <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800078c:	f000 f960 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2102      	movs	r1, #2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fb8c 	bl	8002ec8 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007b6:	f000 f94b 	bl	8000a50 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3740      	adds	r7, #64	; 0x40
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_CAN_Init+0x64>)
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <MX_CAN_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_CAN_Init+0x64>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_CAN_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_CAN_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_CAN_Init+0x64>)
 80007e2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80007e6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_CAN_Init+0x64>)
 80007ea:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_CAN_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_CAN_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_CAN_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_CAN_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_CAN_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_CAN_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_CAN_Init+0x64>)
 8000816:	f000 fb0d 	bl	8000e34 <HAL_CAN_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000820:	f000 f916 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000030 	.word	0x20000030
 800082c:	40006400 	.word	0x40006400

08000830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2224      	movs	r2, #36	; 0x24
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f003 fe4c 	bl	80044dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_TIM2_Init+0xa4>)
 8000850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000854:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_TIM2_Init+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_TIM2_Init+0xa4>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_TIM2_Init+0xa4>)
 8000864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000868:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_TIM2_Init+0xa4>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_TIM2_Init+0xa4>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000876:	2303      	movs	r3, #3
 8000878:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800087e:	2301      	movs	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800088e:	2301      	movs	r3, #1
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_TIM2_Init+0xa4>)
 80008a2:	f002 fe97 	bl	80035d4 <HAL_TIM_Encoder_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80008ac:	f000 f8d0 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_TIM2_Init+0xa4>)
 80008be:	f003 fd5d 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80008c8:	f000 f8c2 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3730      	adds	r7, #48	; 0x30
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000058 	.word	0x20000058

080008d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]
 80008fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_TIM3_Init+0xc4>)
 80008fe:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <MX_TIM3_Init+0xc8>)
 8000900:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <MX_TIM3_Init+0xc4>)
 8000904:	221f      	movs	r2, #31
 8000906:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <MX_TIM3_Init+0xc4>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_TIM3_Init+0xc4>)
 8000910:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000914:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_TIM3_Init+0xc4>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_TIM3_Init+0xc4>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000922:	481e      	ldr	r0, [pc, #120]	; (800099c <MX_TIM3_Init+0xc4>)
 8000924:	f002 fd12 	bl	800334c <HAL_TIM_PWM_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800092e:	f000 f88f 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4816      	ldr	r0, [pc, #88]	; (800099c <MX_TIM3_Init+0xc4>)
 8000942:	f003 fd1b 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800094c:	f000 f880 	bl	8000a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000950:	2360      	movs	r3, #96	; 0x60
 8000952:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	2204      	movs	r2, #4
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_TIM3_Init+0xc4>)
 8000968:	f003 f888 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000972:	f000 f86d 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000976:	463b      	mov	r3, r7
 8000978:	220c      	movs	r2, #12
 800097a:	4619      	mov	r1, r3
 800097c:	4807      	ldr	r0, [pc, #28]	; (800099c <MX_TIM3_Init+0xc4>)
 800097e:	f003 f87d 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000988:	f000 f862 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <MX_TIM3_Init+0xc4>)
 800098e:	f000 f93d 	bl	8000c0c <HAL_TIM_MspPostInit>

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000a4 	.word	0x200000a4
 80009a0:	40000400 	.word	0x40000400

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <MX_GPIO_Init+0xa4>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <MX_GPIO_Init+0xa4>)
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_GPIO_Init+0xa4>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_GPIO_Init+0xa4>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_GPIO_Init+0xa4>)
 80009d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_GPIO_Init+0xa4>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f001 fa12 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2110      	movs	r1, #16
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_GPIO_Init+0xa8>)
 80009fe:	f001 fa0d 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f001 f88b 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a22:	2310      	movs	r3, #16
 8000a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0xa8>)
 8000a3a:	f001 f87d 	bl	8001b38 <HAL_GPIO_Init>

}
 8000a3e:	bf00      	nop
 8000a40:	3720      	adds	r7, #32
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000400 	.word	0x48000400

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6193      	str	r3, [r2, #24]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <HAL_CAN_MspInit+0x90>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d131      	bne.n	8000b2a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_CAN_MspInit+0x94>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <HAL_CAN_MspInit+0x94>)
 8000acc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_CAN_MspInit+0x94>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_CAN_MspInit+0x94>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <HAL_CAN_MspInit+0x94>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <HAL_CAN_MspInit+0x94>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000af6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000b08:	2309      	movs	r3, #9
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f001 f80f 	bl	8001b38 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2014      	movs	r0, #20
 8000b20:	f000 ffd3 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000b24:	2014      	movs	r0, #20
 8000b26:	f000 ffec 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40006400 	.word	0x40006400
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b5c:	d130      	bne.n	8000bc0 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	6153      	str	r3, [r2, #20]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f000 ffc4 	bl	8001b38 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	201c      	movs	r0, #28
 8000bb6:	f000 ff88 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bba:	201c      	movs	r0, #28
 8000bbc:	f000 ffa1 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	; 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_TIM_PWM_MspInit+0x38>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_TIM_PWM_MspInit+0x3c>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <HAL_TIM_PWM_MspInit+0x3c>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40000400 	.word	0x40000400
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <HAL_TIM_MspPostInit+0x64>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d11b      	bne.n	8000c66 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_TIM_MspPostInit+0x68>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_TIM_MspPostInit+0x68>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_TIM_MspPostInit+0x68>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000c46:	2322      	movs	r3, #34	; 0x22
 8000c48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_TIM_MspPostInit+0x6c>)
 8000c62:	f000 ff69 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40000400 	.word	0x40000400
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48000400 	.word	0x48000400

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f894 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <CAN_RX0_IRQHandler+0x10>)
 8000cd6:	f000 fbee 	bl	80014b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000030 	.word	0x20000030

08000ce4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <TIM2_IRQHandler+0x10>)
 8000cea:	f002 fda7 	bl	800383c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000058 	.word	0x20000058

08000cf8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:
	.type	Reset_Handler, %function
Reset_Handler:
//112  ldr   sp, =_estack    /* Atollic update: set stack pointer */

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <LoopForever+0x2>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <LoopForever+0x6>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <LoopForever+0xa>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopForever+0xe>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	; (8000d60 <LoopForever+0x12>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d42:	f7ff ffd9 	bl	8000cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f003 fba5 	bl	8004494 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d4a:	f7ff fc4b 	bl	80005e4 <main>

08000d4e <LoopForever>:

LoopForever:
    b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d58:	0800453c 	.word	0x0800453c
  ldr r2, =_sbss
 8000d5c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d60:	2000015c 	.word	0x2000015c

08000d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_2_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x28>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x28>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 fe9b 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe6a 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40022000 	.word	0x40022000

08000d94 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 feb3 	bl	8001b1e <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 fe7b 	bl	8001aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000010 	.word	0x20000010
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000010 	.word	0x20000010
 8000e18:	20000158 	.word	0x20000158

08000e1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000158 	.word	0x20000158

08000e34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e0ed      	b.n	8001022 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff fe26 	bl	8000aa4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0201 	orr.w	r2, r2, #1
 8000e66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e68:	f7ff ffd8 	bl	8000e1c <HAL_GetTick>
 8000e6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e6e:	e012      	b.n	8000e96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e70:	f7ff ffd4 	bl	8000e1c <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b0a      	cmp	r3, #10
 8000e7c:	d90b      	bls.n	8000e96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2205      	movs	r2, #5
 8000e8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e0c5      	b.n	8001022 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0e5      	beq.n	8000e70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0202 	bic.w	r2, r2, #2
 8000eb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb4:	f7ff ffb2 	bl	8000e1c <HAL_GetTick>
 8000eb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eba:	e012      	b.n	8000ee2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ebc:	f7ff ffae 	bl	8000e1c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b0a      	cmp	r3, #10
 8000ec8:	d90b      	bls.n	8000ee2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2205      	movs	r2, #5
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e09f      	b.n	8001022 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1e5      	bne.n	8000ebc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7e1b      	ldrb	r3, [r3, #24]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d108      	bne.n	8000f0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e007      	b.n	8000f1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7e5b      	ldrb	r3, [r3, #25]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d108      	bne.n	8000f34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e007      	b.n	8000f44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7e9b      	ldrb	r3, [r3, #26]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d108      	bne.n	8000f5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 0220 	orr.w	r2, r2, #32
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	e007      	b.n	8000f6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0220 	bic.w	r2, r2, #32
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7edb      	ldrb	r3, [r3, #27]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d108      	bne.n	8000f88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0210 	bic.w	r2, r2, #16
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e007      	b.n	8000f98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 0210 	orr.w	r2, r2, #16
 8000f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7f1b      	ldrb	r3, [r3, #28]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d108      	bne.n	8000fb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0208 	orr.w	r2, r2, #8
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e007      	b.n	8000fc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0208 	bic.w	r2, r2, #8
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7f5b      	ldrb	r3, [r3, #29]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d108      	bne.n	8000fdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0204 	orr.w	r2, r2, #4
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e007      	b.n	8000fec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0204 	bic.w	r2, r2, #4
 8000fea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	ea42 0103 	orr.w	r1, r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800102a:	b480      	push	{r7}
 800102c:	b087      	sub	sp, #28
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001040:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001042:	7cfb      	ldrb	r3, [r7, #19]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d003      	beq.n	8001050 <HAL_CAN_ConfigFilter+0x26>
 8001048:	7cfb      	ldrb	r3, [r7, #19]
 800104a:	2b02      	cmp	r3, #2
 800104c:	f040 80aa 	bne.w	80011a4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001056:	f043 0201 	orr.w	r2, r3, #1
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	2201      	movs	r2, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d123      	bne.n	80010d2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	401a      	ands	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3248      	adds	r2, #72	; 0x48
 80010b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010c8:	6979      	ldr	r1, [r7, #20]
 80010ca:	3348      	adds	r3, #72	; 0x48
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	440b      	add	r3, r1
 80010d0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d122      	bne.n	8001120 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	431a      	orrs	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3248      	adds	r2, #72	; 0x48
 8001100:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001114:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001116:	6979      	ldr	r1, [r7, #20]
 8001118:	3348      	adds	r3, #72	; 0x48
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	440b      	add	r3, r1
 800111e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d109      	bne.n	800113c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43db      	mvns	r3, r3
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800113a:	e007      	b.n	800114c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	431a      	orrs	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d109      	bne.n	8001168 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001166:	e007      	b.n	8001178 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	431a      	orrs	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d107      	bne.n	8001190 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	431a      	orrs	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001196:	f023 0201 	bic.w	r2, r3, #1
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e006      	b.n	80011b2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
  }
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d12e      	bne.n	8001230 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2202      	movs	r2, #2
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0201 	bic.w	r2, r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011ea:	f7ff fe17 	bl	8000e1c <HAL_GetTick>
 80011ee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011f0:	e012      	b.n	8001218 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f2:	f7ff fe13 	bl	8000e1c <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b0a      	cmp	r3, #10
 80011fe:	d90b      	bls.n	8001218 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2205      	movs	r2, #5
 8001210:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e012      	b.n	800123e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1e5      	bne.n	80011f2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	e006      	b.n	800123e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
  }
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001246:	b480      	push	{r7}
 8001248:	b087      	sub	sp, #28
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d003      	beq.n	800126a <HAL_CAN_GetRxMessage+0x24>
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b02      	cmp	r3, #2
 8001266:	f040 80f3 	bne.w	8001450 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10e      	bne.n	800128e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d116      	bne.n	80012ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e0e7      	b.n	800145e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d107      	bne.n	80012ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0d8      	b.n	800145e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	331b      	adds	r3, #27
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0204 	and.w	r2, r3, #4
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10c      	bne.n	80012e4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	331b      	adds	r3, #27
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	0d5b      	lsrs	r3, r3, #21
 80012da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	331b      	adds	r3, #27
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	331b      	adds	r3, #27
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	4413      	add	r3, r2
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0202 	and.w	r2, r3, #2
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	331b      	adds	r3, #27
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	3304      	adds	r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 020f 	and.w	r2, r3, #15
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	331b      	adds	r3, #27
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	3304      	adds	r3, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b2da      	uxtb	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	331b      	adds	r3, #27
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	4413      	add	r3, r2
 800134e:	3304      	adds	r3, #4
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	0c1b      	lsrs	r3, r3, #16
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	4413      	add	r3, r2
 8001364:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	4413      	add	r3, r2
 800137a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0a1a      	lsrs	r2, r3, #8
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4413      	add	r3, r2
 8001394:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	0c1a      	lsrs	r2, r3, #16
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	3302      	adds	r3, #2
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	0e1a      	lsrs	r2, r3, #24
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3303      	adds	r3, #3
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3304      	adds	r3, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	4413      	add	r3, r2
 80013e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	0a1a      	lsrs	r2, r3, #8
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	3305      	adds	r3, #5
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	4413      	add	r3, r2
 80013fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	0c1a      	lsrs	r2, r3, #16
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	3306      	adds	r3, #6
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	4413      	add	r3, r2
 8001414:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	0e1a      	lsrs	r2, r3, #24
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	3307      	adds	r3, #7
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d108      	bne.n	800143c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0220 	orr.w	r2, r2, #32
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	e007      	b.n	800144c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	691a      	ldr	r2, [r3, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0220 	orr.w	r2, r2, #32
 800144a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	e006      	b.n	800145e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
  }
}
 800145e:	4618      	mov	r0, r3
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d002      	beq.n	8001488 <HAL_CAN_ActivateNotification+0x1e>
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d109      	bne.n	800149c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6959      	ldr	r1, [r3, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	e006      	b.n	80014aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
  }
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b08a      	sub	sp, #40	; 0x28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d07c      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d023      	beq.n	800154e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2201      	movs	r2, #1
 800150c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f983 	bl	8001824 <HAL_CAN_TxMailbox0CompleteCallback>
 800151e:	e016      	b.n	800154e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
 8001532:	e00c      	b.n	800154e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d004      	beq.n	8001548 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
 8001546:	e002      	b.n	800154e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f989 	bl	8001860 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d024      	beq.n	80015a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f963 	bl	8001838 <HAL_CAN_TxMailbox1CompleteCallback>
 8001572:	e016      	b.n	80015a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157a:	2b00      	cmp	r3, #0
 800157c:	d004      	beq.n	8001588 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
 8001586:	e00c      	b.n	80015a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
 800159a:	e002      	b.n	80015a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f969 	bl	8001874 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d024      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f943 	bl	800184c <HAL_CAN_TxMailbox2CompleteCallback>
 80015c6:	e016      	b.n	80015f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
 80015da:	e00c      	b.n	80015f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
 80015ee:	e002      	b.n	80015f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f949 	bl	8001888 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00c      	beq.n	800161a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001610:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2210      	movs	r2, #16
 8001618:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2208      	movs	r2, #8
 8001634:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f930 	bl	800189c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7fe ff01 	bl	800045c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00c      	beq.n	800167e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001674:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2210      	movs	r2, #16
 800167c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00b      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2208      	movs	r2, #8
 8001698:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f912 	bl	80018c4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f8f9 	bl	80018b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00b      	beq.n	80016e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2210      	movs	r2, #16
 80016d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8fc 	bl	80018d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2208      	movs	r2, #8
 80016fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f8f5 	bl	80018ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d07b      	beq.n	8001804 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	d072      	beq.n	80017fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d008      	beq.n	8001732 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001770:	2b00      	cmp	r3, #0
 8001772:	d043      	beq.n	80017fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800177a:	2b00      	cmp	r3, #0
 800177c:	d03e      	beq.n	80017fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001784:	2b60      	cmp	r3, #96	; 0x60
 8001786:	d02b      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x32a>
 8001788:	2b60      	cmp	r3, #96	; 0x60
 800178a:	d82e      	bhi.n	80017ea <HAL_CAN_IRQHandler+0x334>
 800178c:	2b50      	cmp	r3, #80	; 0x50
 800178e:	d022      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x320>
 8001790:	2b50      	cmp	r3, #80	; 0x50
 8001792:	d82a      	bhi.n	80017ea <HAL_CAN_IRQHandler+0x334>
 8001794:	2b40      	cmp	r3, #64	; 0x40
 8001796:	d019      	beq.n	80017cc <HAL_CAN_IRQHandler+0x316>
 8001798:	2b40      	cmp	r3, #64	; 0x40
 800179a:	d826      	bhi.n	80017ea <HAL_CAN_IRQHandler+0x334>
 800179c:	2b30      	cmp	r3, #48	; 0x30
 800179e:	d010      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x30c>
 80017a0:	2b30      	cmp	r3, #48	; 0x30
 80017a2:	d822      	bhi.n	80017ea <HAL_CAN_IRQHandler+0x334>
 80017a4:	2b10      	cmp	r3, #16
 80017a6:	d002      	beq.n	80017ae <HAL_CAN_IRQHandler+0x2f8>
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d005      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017ac:	e01d      	b.n	80017ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017b6:	e019      	b.n	80017ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	f043 0310 	orr.w	r3, r3, #16
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017c0:	e014      	b.n	80017ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	f043 0320 	orr.w	r3, r3, #32
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017ca:	e00f      	b.n	80017ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017d4:	e00a      	b.n	80017ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017de:	e005      	b.n	80017ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017e8:	e000      	b.n	80017ec <HAL_CAN_IRQHandler+0x336>
            break;
 80017ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2204      	movs	r2, #4
 8001802:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f872 	bl	8001900 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4907      	ldr	r1, [pc, #28]	; (80019b0 <__NVIC_EnableIRQ+0x38>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	; (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
         );
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	; 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a80:	d301      	bcc.n	8001a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <SysTick_Config+0x40>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8e:	210f      	movs	r1, #15
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f7ff ff8e 	bl	80019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <SysTick_Config+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <SysTick_Config+0x40>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff29 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff3e 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff8e 	bl	8001a08 <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff5d 	bl	80019b4 <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff31 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffa2 	bl	8001a70 <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	e14e      	b.n	8001de6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8140 	beq.w	8001de0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d005      	beq.n	8001b78 <HAL_GPIO_Init+0x40>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d130      	bne.n	8001bda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bae:	2201      	movs	r2, #1
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f003 0201 	and.w	r2, r3, #1
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d017      	beq.n	8001c16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d123      	bne.n	8001c6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	220f      	movs	r2, #15
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3208      	adds	r2, #8
 8001c64:	6939      	ldr	r1, [r7, #16]
 8001c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0203 	and.w	r2, r3, #3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 809a 	beq.w	8001de0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cac:	4b55      	ldr	r3, [pc, #340]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a54      	ldr	r2, [pc, #336]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b52      	ldr	r3, [pc, #328]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc4:	4a50      	ldr	r2, [pc, #320]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cee:	d013      	beq.n	8001d18 <HAL_GPIO_Init+0x1e0>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a46      	ldr	r2, [pc, #280]	; (8001e0c <HAL_GPIO_Init+0x2d4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00d      	beq.n	8001d14 <HAL_GPIO_Init+0x1dc>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a45      	ldr	r2, [pc, #276]	; (8001e10 <HAL_GPIO_Init+0x2d8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d007      	beq.n	8001d10 <HAL_GPIO_Init+0x1d8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a44      	ldr	r2, [pc, #272]	; (8001e14 <HAL_GPIO_Init+0x2dc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d101      	bne.n	8001d0c <HAL_GPIO_Init+0x1d4>
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e006      	b.n	8001d1a <HAL_GPIO_Init+0x1e2>
 8001d0c:	2305      	movs	r3, #5
 8001d0e:	e004      	b.n	8001d1a <HAL_GPIO_Init+0x1e2>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x1e2>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_GPIO_Init+0x1e2>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	f002 0203 	and.w	r2, r2, #3
 8001d20:	0092      	lsls	r2, r2, #2
 8001d22:	4093      	lsls	r3, r2
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d2a:	4937      	ldr	r1, [pc, #220]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d38:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <HAL_GPIO_Init+0x2e0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d5c:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <HAL_GPIO_Init+0x2e0>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_GPIO_Init+0x2e0>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d86:	4a24      	ldr	r2, [pc, #144]	; (8001e18 <HAL_GPIO_Init+0x2e0>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8c:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <HAL_GPIO_Init+0x2e0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001db0:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <HAL_GPIO_Init+0x2e0>)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <HAL_GPIO_Init+0x2e0>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dda:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <HAL_GPIO_Init+0x2e0>)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f47f aea9 	bne.w	8001b48 <HAL_GPIO_Init+0x10>
  }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	48000400 	.word	0x48000400
 8001e10:	48000800 	.word	0x48000800
 8001e14:	48000c00 	.word	0x48000c00
 8001e18:	40010400 	.word	0x40010400

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f001 b823 	b.w	8002eb8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 817d 	beq.w	8002182 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e88:	4bbc      	ldr	r3, [pc, #752]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d00c      	beq.n	8001eae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e94:	4bb9      	ldr	r3, [pc, #740]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d15c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x10e>
 8001ea0:	4bb6      	ldr	r3, [pc, #728]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d155      	bne.n	8001f5a <HAL_RCC_OscConfig+0x10e>
 8001eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ec2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x94>
 8001eda:	4ba8      	ldr	r3, [pc, #672]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	e015      	b.n	8001f0c <HAL_RCC_OscConfig+0xc0>
 8001ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001efc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f08:	4b9c      	ldr	r3, [pc, #624]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f10:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f14:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f18:	fa92 f2a2 	rbit	r2, r2
 8001f1c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f20:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f24:	fab2 f282 	clz	r2, r2
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f002 021f 	and.w	r2, r2, #31
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 811f 	beq.w	8002180 <HAL_RCC_OscConfig+0x334>
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 8116 	bne.w	8002180 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f000 bfaf 	b.w	8002eb8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12e>
 8001f6c:	4b83      	ldr	r3, [pc, #524]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a82      	ldr	r2, [pc, #520]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	e036      	b.n	8001fe8 <HAL_RCC_OscConfig+0x19c>
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x158>
 8001f8a:	4b7c      	ldr	r3, [pc, #496]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a7b      	ldr	r2, [pc, #492]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b79      	ldr	r3, [pc, #484]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a78      	ldr	r2, [pc, #480]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e021      	b.n	8001fe8 <HAL_RCC_OscConfig+0x19c>
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x184>
 8001fb6:	4b71      	ldr	r3, [pc, #452]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a70      	ldr	r2, [pc, #448]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b6e      	ldr	r3, [pc, #440]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6d      	ldr	r2, [pc, #436]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x19c>
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a69      	ldr	r2, [pc, #420]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a66      	ldr	r2, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fe8:	4b64      	ldr	r3, [pc, #400]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	f023 020f 	bic.w	r2, r3, #15
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	495f      	ldr	r1, [pc, #380]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d059      	beq.n	80020c6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7fe ff03 	bl	8000e1c <HAL_GetTick>
 8002016:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	e00a      	b.n	8002032 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201c:	f7fe fefe 	bl	8000e1c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	; 0x64
 800202a:	d902      	bls.n	8002032 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	f000 bf43 	b.w	8002eb8 <HAL_RCC_OscConfig+0x106c>
 8002032:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002036:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002046:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d102      	bne.n	8002064 <HAL_RCC_OscConfig+0x218>
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	e015      	b.n	8002090 <HAL_RCC_OscConfig+0x244>
 8002064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002068:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002080:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800208c:	4b3b      	ldr	r3, [pc, #236]	; (800217c <HAL_RCC_OscConfig+0x330>)
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002094:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002098:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800209c:	fa92 f2a2 	rbit	r2, r2
 80020a0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80020a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020a8:	fab2 f282 	clz	r2, r2
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f042 0220 	orr.w	r2, r2, #32
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f002 021f 	and.w	r2, r2, #31
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ab      	beq.n	800201c <HAL_RCC_OscConfig+0x1d0>
 80020c4:	e05d      	b.n	8002182 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7fe fea9 	bl	8000e1c <HAL_GetTick>
 80020ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe fea4 	bl	8000e1c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d902      	bls.n	80020e6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f000 bee9 	b.w	8002eb8 <HAL_RCC_OscConfig+0x106c>
 80020e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80020fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_RCC_OscConfig+0x2cc>
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	e015      	b.n	8002144 <HAL_RCC_OscConfig+0x2f8>
 8002118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800211c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800212c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002130:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002134:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_RCC_OscConfig+0x330>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002148:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800214c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002150:	fa92 f2a2 	rbit	r2, r2
 8002154:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002158:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f002 021f 	and.w	r2, r2, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f202 	lsl.w	r2, r1, r2
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ab      	bne.n	80020d0 <HAL_RCC_OscConfig+0x284>
 8002178:	e003      	b.n	8002182 <HAL_RCC_OscConfig+0x336>
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 817d 	beq.w	8002492 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002198:	4ba6      	ldr	r3, [pc, #664]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00b      	beq.n	80021bc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021a4:	4ba3      	ldr	r3, [pc, #652]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d172      	bne.n	8002296 <HAL_RCC_OscConfig+0x44a>
 80021b0:	4ba0      	ldr	r3, [pc, #640]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d16c      	bne.n	8002296 <HAL_RCC_OscConfig+0x44a>
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80021ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d102      	bne.n	80021ec <HAL_RCC_OscConfig+0x3a0>
 80021e6:	4b93      	ldr	r3, [pc, #588]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	e013      	b.n	8002214 <HAL_RCC_OscConfig+0x3c8>
 80021ec:	2302      	movs	r3, #2
 80021ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002204:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002210:	4b88      	ldr	r3, [pc, #544]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2202      	movs	r2, #2
 8002216:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800221a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800221e:	fa92 f2a2 	rbit	r2, r2
 8002222:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002226:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800222a:	fab2 f282 	clz	r2, r2
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	f042 0220 	orr.w	r2, r2, #32
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	f002 021f 	and.w	r2, r2, #31
 800223a:	2101      	movs	r1, #1
 800223c:	fa01 f202 	lsl.w	r2, r1, r2
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCC_OscConfig+0x410>
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d002      	beq.n	800225c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	f000 be2e 	b.w	8002eb8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b75      	ldr	r3, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002268:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	21f8      	movs	r1, #248	; 0xf8
 8002272:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800227a:	fa91 f1a1 	rbit	r1, r1
 800227e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002282:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002286:	fab1 f181 	clz	r1, r1
 800228a:	b2c9      	uxtb	r1, r1
 800228c:	408b      	lsls	r3, r1
 800228e:	4969      	ldr	r1, [pc, #420]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002294:	e0fd      	b.n	8002492 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8088 	beq.w	80023b8 <HAL_RCC_OscConfig+0x56c>
 80022a8:	2301      	movs	r3, #1
 80022aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80022ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	461a      	mov	r2, r3
 80022d0:	2301      	movs	r3, #1
 80022d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fda2 	bl	8000e1c <HAL_GetTick>
 80022d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022de:	f7fe fd9d 	bl	8000e1c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d902      	bls.n	80022f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	f000 bde2 	b.w	8002eb8 <HAL_RCC_OscConfig+0x106c>
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002306:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d102      	bne.n	8002324 <HAL_RCC_OscConfig+0x4d8>
 800231e:	4b45      	ldr	r3, [pc, #276]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	e013      	b.n	800234c <HAL_RCC_OscConfig+0x500>
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002336:	2302      	movs	r3, #2
 8002338:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800233c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002348:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2202      	movs	r2, #2
 800234e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002352:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002356:	fa92 f2a2 	rbit	r2, r2
 800235a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800235e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002362:	fab2 f282 	clz	r2, r2
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f042 0220 	orr.w	r2, r2, #32
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f002 021f 	and.w	r2, r2, #31
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0af      	beq.n	80022de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	21f8      	movs	r1, #248	; 0xf8
 8002394:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800239c:	fa91 f1a1 	rbit	r1, r1
 80023a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80023a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80023a8:	fab1 f181 	clz	r1, r1
 80023ac:	b2c9      	uxtb	r1, r1
 80023ae:	408b      	lsls	r3, r1
 80023b0:	4920      	ldr	r1, [pc, #128]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
 80023b6:	e06c      	b.n	8002492 <HAL_RCC_OscConfig+0x646>
 80023b8:	2301      	movs	r3, #1
 80023ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80023ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	461a      	mov	r2, r3
 80023e0:	2300      	movs	r3, #0
 80023e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe fd1a 	bl	8000e1c <HAL_GetTick>
 80023e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ee:	f7fe fd15 	bl	8000e1c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d902      	bls.n	8002404 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	f000 bd5a 	b.w	8002eb8 <HAL_RCC_OscConfig+0x106c>
 8002404:	2302      	movs	r3, #2
 8002406:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d104      	bne.n	8002438 <HAL_RCC_OscConfig+0x5ec>
 800242e:	4b01      	ldr	r3, [pc, #4]	; (8002434 <HAL_RCC_OscConfig+0x5e8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	e015      	b.n	8002460 <HAL_RCC_OscConfig+0x614>
 8002434:	40021000 	.word	0x40021000
 8002438:	2302      	movs	r3, #2
 800243a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002450:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800245c:	4bc8      	ldr	r3, [pc, #800]	; (8002780 <HAL_RCC_OscConfig+0x934>)
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	2202      	movs	r2, #2
 8002462:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002466:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800246a:	fa92 f2a2 	rbit	r2, r2
 800246e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002472:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002476:	fab2 f282 	clz	r2, r2
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f042 0220 	orr.w	r2, r2, #32
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f002 021f 	and.w	r2, r2, #31
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f202 	lsl.w	r2, r1, r2
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1ad      	bne.n	80023ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8110 	beq.w	80026c8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d079      	beq.n	80025ac <HAL_RCC_OscConfig+0x760>
 80024b8:	2301      	movs	r3, #1
 80024ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80024ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	4bab      	ldr	r3, [pc, #684]	; (8002784 <HAL_RCC_OscConfig+0x938>)
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	461a      	mov	r2, r3
 80024de:	2301      	movs	r3, #1
 80024e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7fe fc9b 	bl	8000e1c <HAL_GetTick>
 80024e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ec:	f7fe fc96 	bl	8000e1c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d902      	bls.n	8002502 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	f000 bcdb 	b.w	8002eb8 <HAL_RCC_OscConfig+0x106c>
 8002502:	2302      	movs	r3, #2
 8002504:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002518:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800251c:	2202      	movs	r2, #2
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002540:	2202      	movs	r2, #2
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800255a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255c:	4b88      	ldr	r3, [pc, #544]	; (8002780 <HAL_RCC_OscConfig+0x934>)
 800255e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002568:	2102      	movs	r1, #2
 800256a:	6019      	str	r1, [r3, #0]
 800256c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002570:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	fa93 f1a3 	rbit	r1, r3
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002582:	6019      	str	r1, [r3, #0]
  return result;
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0a0      	beq.n	80024ec <HAL_RCC_OscConfig+0x6a0>
 80025aa:	e08d      	b.n	80026c8 <HAL_RCC_OscConfig+0x87c>
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f2a3 	rbit	r2, r3
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025ce:	601a      	str	r2, [r3, #0]
  return result;
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x938>)
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	461a      	mov	r2, r3
 80025ea:	2300      	movs	r3, #0
 80025ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7fe fc15 	bl	8000e1c <HAL_GetTick>
 80025f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fe fc10 	bl	8000e1c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d902      	bls.n	800260e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	f000 bc55 	b.w	8002eb8 <HAL_RCC_OscConfig+0x106c>
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002616:	2202      	movs	r2, #2
 8002618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	fa93 f2a3 	rbit	r2, r3
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800263a:	2202      	movs	r2, #2
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	fa93 f2a3 	rbit	r2, r3
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800265e:	2202      	movs	r2, #2
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002674:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002678:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_OscConfig+0x934>)
 800267c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002686:	2102      	movs	r1, #2
 8002688:	6019      	str	r1, [r3, #0]
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f1a3 	rbit	r1, r3
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026a0:	6019      	str	r1, [r3, #0]
  return result;
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d197      	bne.n	80025f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 81a1 	beq.w	8002a20 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <HAL_RCC_OscConfig+0x934>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d116      	bne.n	800271e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_RCC_OscConfig+0x934>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	4a22      	ldr	r2, [pc, #136]	; (8002780 <HAL_RCC_OscConfig+0x934>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	61d3      	str	r3, [r2, #28]
 80026fc:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_OscConfig+0x934>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002712:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002716:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271e:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_RCC_OscConfig+0x93c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d11a      	bne.n	8002760 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272a:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_RCC_OscConfig+0x93c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a16      	ldr	r2, [pc, #88]	; (8002788 <HAL_RCC_OscConfig+0x93c>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002736:	f7fe fb71 	bl	8000e1c <HAL_GetTick>
 800273a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	e009      	b.n	8002754 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002740:	f7fe fb6c 	bl	8000e1c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e3b1      	b.n	8002eb8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_RCC_OscConfig+0x93c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10d      	bne.n	800278c <HAL_RCC_OscConfig+0x940>
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_RCC_OscConfig+0x934>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4a02      	ldr	r2, [pc, #8]	; (8002780 <HAL_RCC_OscConfig+0x934>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6213      	str	r3, [r2, #32]
 800277c:	e03c      	b.n	80027f8 <HAL_RCC_OscConfig+0x9ac>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	10908120 	.word	0x10908120
 8002788:	40007000 	.word	0x40007000
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10c      	bne.n	80027b6 <HAL_RCC_OscConfig+0x96a>
 800279c:	4bc1      	ldr	r3, [pc, #772]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4ac0      	ldr	r2, [pc, #768]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	4bbe      	ldr	r3, [pc, #760]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4abd      	ldr	r2, [pc, #756]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	6213      	str	r3, [r2, #32]
 80027b4:	e020      	b.n	80027f8 <HAL_RCC_OscConfig+0x9ac>
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x994>
 80027c6:	4bb7      	ldr	r3, [pc, #732]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4ab6      	ldr	r2, [pc, #728]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	4bb4      	ldr	r3, [pc, #720]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4ab3      	ldr	r2, [pc, #716]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6213      	str	r3, [r2, #32]
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0x9ac>
 80027e0:	4bb0      	ldr	r3, [pc, #704]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4aaf      	ldr	r2, [pc, #700]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	4bad      	ldr	r3, [pc, #692]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4aac      	ldr	r2, [pc, #688]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80027f2:	f023 0304 	bic.w	r3, r3, #4
 80027f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8081 	beq.w	800290c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280a:	f7fe fb07 	bl	8000e1c <HAL_GetTick>
 800280e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	e00b      	b.n	800282c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7fe fb02 	bl	8000e1c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e345      	b.n	8002eb8 <HAL_RCC_OscConfig+0x106c>
 800282c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002830:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002834:	2202      	movs	r2, #2
 8002836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	fa93 f2a3 	rbit	r2, r3
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002858:	2202      	movs	r2, #2
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002872:	601a      	str	r2, [r3, #0]
  return result;
 8002874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002878:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800287c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d102      	bne.n	8002898 <HAL_RCC_OscConfig+0xa4c>
 8002892:	4b84      	ldr	r3, [pc, #528]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	e013      	b.n	80028c0 <HAL_RCC_OscConfig+0xa74>
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028a0:	2202      	movs	r2, #2
 80028a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	fa93 f2a3 	rbit	r2, r3
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	4b79      	ldr	r3, [pc, #484]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028c8:	2102      	movs	r1, #2
 80028ca:	6011      	str	r1, [r2, #0]
 80028cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	fa92 f1a2 	rbit	r1, r2
 80028da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80028e2:	6011      	str	r1, [r2, #0]
  return result;
 80028e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	fab2 f282 	clz	r2, r2
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f002 021f 	and.w	r2, r2, #31
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f202 	lsl.w	r2, r1, r2
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d084      	beq.n	8002814 <HAL_RCC_OscConfig+0x9c8>
 800290a:	e07f      	b.n	8002a0c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290c:	f7fe fa86 	bl	8000e1c <HAL_GetTick>
 8002910:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002914:	e00b      	b.n	800292e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7fe fa81 	bl	8000e1c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e2c4      	b.n	8002eb8 <HAL_RCC_OscConfig+0x106c>
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002936:	2202      	movs	r2, #2
 8002938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	fa93 f2a3 	rbit	r2, r3
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800295a:	2202      	movs	r2, #2
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	fa93 f2a3 	rbit	r2, r3
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002974:	601a      	str	r2, [r3, #0]
  return result;
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800297e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f043 0302 	orr.w	r3, r3, #2
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d102      	bne.n	800299a <HAL_RCC_OscConfig+0xb4e>
 8002994:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	e013      	b.n	80029c2 <HAL_RCC_OscConfig+0xb76>
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029a2:	2202      	movs	r2, #2
 80029a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	fa93 f2a3 	rbit	r2, r3
 80029b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029ca:	2102      	movs	r1, #2
 80029cc:	6011      	str	r1, [r2, #0]
 80029ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	fa92 f1a2 	rbit	r1, r2
 80029dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029e0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029e4:	6011      	str	r1, [r2, #0]
  return result;
 80029e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	fab2 f282 	clz	r2, r2
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	f002 021f 	and.w	r2, r2, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d184      	bne.n	8002916 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8242 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <HAL_RCC_OscConfig+0xc58>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	f000 8213 	beq.w	8002e66 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	f040 8162 	bne.w	8002d16 <HAL_RCC_OscConfig+0xeca>
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	fa93 f2a3 	rbit	r2, r3
 8002a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a72:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a76:	601a      	str	r2, [r3, #0]
  return result;
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	461a      	mov	r2, r3
 8002a94:	2300      	movs	r3, #0
 8002a96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe f9c0 	bl	8000e1c <HAL_GetTick>
 8002a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa0:	e00c      	b.n	8002abc <HAL_RCC_OscConfig+0xc70>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe f9b8 	bl	8000e1c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e1fd      	b.n	8002eb8 <HAL_RCC_OscConfig+0x106c>
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	fa93 f2a3 	rbit	r2, r3
 8002ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002adc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ae0:	601a      	str	r2, [r3, #0]
  return result;
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002aea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d102      	bne.n	8002b06 <HAL_RCC_OscConfig+0xcba>
 8002b00:	4bb0      	ldr	r3, [pc, #704]	; (8002dc4 <HAL_RCC_OscConfig+0xf78>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	e027      	b.n	8002b56 <HAL_RCC_OscConfig+0xd0a>
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	fa93 f2a3 	rbit	r2, r3
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	4b9c      	ldr	r3, [pc, #624]	; (8002dc4 <HAL_RCC_OscConfig+0xf78>)
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b5a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b62:	6011      	str	r1, [r2, #0]
 8002b64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b68:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	fa92 f1a2 	rbit	r1, r2
 8002b72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b76:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b7a:	6011      	str	r1, [r2, #0]
  return result;
 8002b7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b80:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	fab2 f282 	clz	r2, r2
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	f042 0220 	orr.w	r2, r2, #32
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	f002 021f 	and.w	r2, r2, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d182      	bne.n	8002aa8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba2:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <HAL_RCC_OscConfig+0xf78>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	497f      	ldr	r1, [pc, #508]	; (8002dc4 <HAL_RCC_OscConfig+0xf78>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002bd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bdc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002bee:	601a      	str	r2, [r3, #0]
  return result;
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002bf8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe f904 	bl	8000e1c <HAL_GetTick>
 8002c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c18:	e009      	b.n	8002c2e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe f8ff 	bl	8000e1c <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e144      	b.n	8002eb8 <HAL_RCC_OscConfig+0x106c>
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	fa93 f2a3 	rbit	r2, r3
 8002c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c52:	601a      	str	r2, [r3, #0]
  return result;
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d102      	bne.n	8002c78 <HAL_RCC_OscConfig+0xe2c>
 8002c72:	4b54      	ldr	r3, [pc, #336]	; (8002dc4 <HAL_RCC_OscConfig+0xf78>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	e027      	b.n	8002cc8 <HAL_RCC_OscConfig+0xe7c>
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fa93 f2a3 	rbit	r2, r3
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	fa93 f2a3 	rbit	r2, r3
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_OscConfig+0xf78>)
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ccc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002cd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cd4:	6011      	str	r1, [r2, #0]
 8002cd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cda:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	fa92 f1a2 	rbit	r1, r2
 8002ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ce8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002cec:	6011      	str	r1, [r2, #0]
  return result;
 8002cee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	fab2 f282 	clz	r2, r2
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	f042 0220 	orr.w	r2, r2, #32
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f002 021f 	and.w	r2, r2, #31
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d082      	beq.n	8002c1a <HAL_RCC_OscConfig+0xdce>
 8002d14:	e0cf      	b.n	8002eb6 <HAL_RCC_OscConfig+0x106a>
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	fa93 f2a3 	rbit	r2, r3
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d3a:	601a      	str	r2, [r3, #0]
  return result;
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	461a      	mov	r2, r3
 8002d58:	2300      	movs	r3, #0
 8002d5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe f85e 	bl	8000e1c <HAL_GetTick>
 8002d60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d64:	e009      	b.n	8002d7a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe f859 	bl	8000e1c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e09e      	b.n	8002eb8 <HAL_RCC_OscConfig+0x106c>
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fa93 f2a3 	rbit	r2, r3
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d9e:	601a      	str	r2, [r3, #0]
  return result;
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002da8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d104      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xf7c>
 8002dbe:	4b01      	ldr	r3, [pc, #4]	; (8002dc4 <HAL_RCC_OscConfig+0xf78>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	e029      	b.n	8002e18 <HAL_RCC_OscConfig+0xfcc>
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dda:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f2a3 	rbit	r2, r3
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	fa93 f2a3 	rbit	r2, r3
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_RCC_OscConfig+0x1078>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e1c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e24:	6011      	str	r1, [r2, #0]
 8002e26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e2a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	fa92 f1a2 	rbit	r1, r2
 8002e34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e38:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e3c:	6011      	str	r1, [r2, #0]
  return result;
 8002e3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e42:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	fab2 f282 	clz	r2, r2
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f042 0220 	orr.w	r2, r2, #32
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f002 021f 	and.w	r2, r2, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d180      	bne.n	8002d66 <HAL_RCC_OscConfig+0xf1a>
 8002e64:	e027      	b.n	8002eb6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e01e      	b.n	8002eb8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_RCC_OscConfig+0x1078>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e86:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d10b      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b09e      	sub	sp, #120	; 0x78
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e162      	b.n	80031a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b90      	ldr	r3, [pc, #576]	; (8003124 <HAL_RCC_ClockConfig+0x25c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d910      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b8d      	ldr	r3, [pc, #564]	; (8003124 <HAL_RCC_ClockConfig+0x25c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 0207 	bic.w	r2, r3, #7
 8002ef6:	498b      	ldr	r1, [pc, #556]	; (8003124 <HAL_RCC_ClockConfig+0x25c>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b89      	ldr	r3, [pc, #548]	; (8003124 <HAL_RCC_ClockConfig+0x25c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e14a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f1c:	4b82      	ldr	r3, [pc, #520]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	497f      	ldr	r1, [pc, #508]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80dc 	beq.w	80030f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d13c      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xf6>
 8002f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xa6>
 8002f68:	4b6f      	ldr	r3, [pc, #444]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	e00f      	b.n	8002f8e <HAL_RCC_ClockConfig+0xc6>
 8002f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	667b      	str	r3, [r7, #100]	; 0x64
 8002f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f80:	663b      	str	r3, [r7, #96]	; 0x60
 8002f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f8a:	4b67      	ldr	r3, [pc, #412]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f92:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f96:	fa92 f2a2 	rbit	r2, r2
 8002f9a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f9e:	fab2 f282 	clz	r2, r2
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	f042 0220 	orr.w	r2, r2, #32
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	f002 021f 	and.w	r2, r2, #31
 8002fae:	2101      	movs	r1, #1
 8002fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d17b      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0f3      	b.n	80031a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d13c      	bne.n	8003040 <HAL_RCC_ClockConfig+0x178>
 8002fc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x128>
 8002fea:	4b4f      	ldr	r3, [pc, #316]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	e00f      	b.n	8003010 <HAL_RCC_ClockConfig+0x148>
 8002ff0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003002:	643b      	str	r3, [r7, #64]	; 0x40
 8003004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800300c:	4b46      	ldr	r3, [pc, #280]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003014:	63ba      	str	r2, [r7, #56]	; 0x38
 8003016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003018:	fa92 f2a2 	rbit	r2, r2
 800301c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800301e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003020:	fab2 f282 	clz	r2, r2
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	f042 0220 	orr.w	r2, r2, #32
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	f002 021f 	and.w	r2, r2, #31
 8003030:	2101      	movs	r1, #1
 8003032:	fa01 f202 	lsl.w	r2, r1, r2
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d13a      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0b2      	b.n	80031a6 <HAL_RCC_ClockConfig+0x2de>
 8003040:	2302      	movs	r3, #2
 8003042:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d102      	bne.n	8003068 <HAL_RCC_ClockConfig+0x1a0>
 8003062:	4b31      	ldr	r3, [pc, #196]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	e00d      	b.n	8003084 <HAL_RCC_ClockConfig+0x1bc>
 8003068:	2302      	movs	r3, #2
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
 8003074:	2302      	movs	r3, #2
 8003076:	623b      	str	r3, [r7, #32]
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	2202      	movs	r2, #2
 8003086:	61ba      	str	r2, [r7, #24]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	fa92 f2a2 	rbit	r2, r2
 800308e:	617a      	str	r2, [r7, #20]
  return result;
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	fab2 f282 	clz	r2, r2
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f042 0220 	orr.w	r2, r2, #32
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f002 021f 	and.w	r2, r2, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f202 	lsl.w	r2, r1, r2
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e079      	b.n	80031a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030b2:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f023 0203 	bic.w	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	491a      	ldr	r1, [pc, #104]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c4:	f7fd feaa 	bl	8000e1c <HAL_GetTick>
 80030c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030cc:	f7fd fea6 	bl	8000e1c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e061      	b.n	80031a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 020c 	and.w	r2, r3, #12
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d1eb      	bne.n	80030cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_ClockConfig+0x25c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d214      	bcs.n	800312c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_RCC_ClockConfig+0x25c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 0207 	bic.w	r2, r3, #7
 800310a:	4906      	ldr	r1, [pc, #24]	; (8003124 <HAL_RCC_ClockConfig+0x25c>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <HAL_RCC_ClockConfig+0x25c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e040      	b.n	80031a6 <HAL_RCC_ClockConfig+0x2de>
 8003124:	40022000 	.word	0x40022000
 8003128:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCC_ClockConfig+0x2e8>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	491a      	ldr	r1, [pc, #104]	; (80031b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003156:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4912      	ldr	r1, [pc, #72]	; (80031b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003166:	4313      	orrs	r3, r2
 8003168:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800316a:	f000 f829 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800316e:	4601      	mov	r1, r0
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003178:	22f0      	movs	r2, #240	; 0xf0
 800317a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	fa92 f2a2 	rbit	r2, r2
 8003182:	60fa      	str	r2, [r7, #12]
  return result;
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	fab2 f282 	clz	r2, r2
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	40d3      	lsrs	r3, r2
 800318e:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <HAL_RCC_ClockConfig+0x2ec>)
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	fa21 f303 	lsr.w	r3, r1, r3
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <HAL_RCC_ClockConfig+0x2f0>)
 8003198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_RCC_ClockConfig+0x2f4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd fdf8 	bl	8000d94 <HAL_InitTick>
  
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3778      	adds	r7, #120	; 0x78
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	08004504 	.word	0x08004504
 80031b8:	20000008 	.word	0x20000008
 80031bc:	2000000c 	.word	0x2000000c

080031c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b08b      	sub	sp, #44	; 0x2c
 80031c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031da:	4b29      	ldr	r3, [pc, #164]	; (8003280 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d002      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x30>
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_GetSysClockFreq+0x36>
 80031ee:	e03c      	b.n	800326a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031f0:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031f2:	623b      	str	r3, [r7, #32]
      break;
 80031f4:	e03c      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003200:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	fa92 f2a2 	rbit	r2, r2
 8003208:	607a      	str	r2, [r7, #4]
  return result;
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	fab2 f282 	clz	r2, r2
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	40d3      	lsrs	r3, r2
 8003214:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800321a:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_GetSysClockFreq+0xc0>)
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	220f      	movs	r2, #15
 8003224:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	fa92 f2a2 	rbit	r2, r2
 800322c:	60fa      	str	r2, [r7, #12]
  return result;
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	fab2 f282 	clz	r2, r2
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	40d3      	lsrs	r3, r2
 8003238:	4a14      	ldr	r2, [pc, #80]	; (800328c <HAL_RCC_GetSysClockFreq+0xcc>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003248:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <HAL_RCC_GetSysClockFreq+0xc4>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
 8003258:	e004      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	4a0c      	ldr	r2, [pc, #48]	; (8003290 <HAL_RCC_GetSysClockFreq+0xd0>)
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	623b      	str	r3, [r7, #32]
      break;
 8003268:	e002      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_RCC_GetSysClockFreq+0xc4>)
 800326c:	623b      	str	r3, [r7, #32]
      break;
 800326e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003270:	6a3b      	ldr	r3, [r7, #32]
}
 8003272:	4618      	mov	r0, r3
 8003274:	372c      	adds	r7, #44	; 0x2c
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	007a1200 	.word	0x007a1200
 8003288:	08004514 	.word	0x08004514
 800328c:	08004524 	.word	0x08004524
 8003290:	003d0900 	.word	0x003d0900

08003294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d001      	beq.n	80032ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e040      	b.n	800332e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1c      	ldr	r2, [pc, #112]	; (800333c <HAL_TIM_Base_Start_IT+0xa8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00e      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x58>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d6:	d009      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x58>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a18      	ldr	r2, [pc, #96]	; (8003340 <HAL_TIM_Base_Start_IT+0xac>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x58>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a17      	ldr	r2, [pc, #92]	; (8003344 <HAL_TIM_Base_Start_IT+0xb0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d115      	bne.n	8003318 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_TIM_Base_Start_IT+0xb4>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d015      	beq.n	800332a <HAL_TIM_Base_Start_IT+0x96>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d011      	beq.n	800332a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003316:	e008      	b.n	800332a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	e000      	b.n	800332c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40012c00 	.word	0x40012c00
 8003340:	40000400 	.word	0x40000400
 8003344:	40014000 	.word	0x40014000
 8003348:	00010007 	.word	0x00010007

0800334c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e049      	b.n	80033f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fc2a 	bl	8000bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 fcb2 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <HAL_TIM_PWM_Start+0x24>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e03c      	b.n	800349a <HAL_TIM_PWM_Start+0x9e>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b04      	cmp	r3, #4
 8003424:	d109      	bne.n	800343a <HAL_TIM_PWM_Start+0x3e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e02f      	b.n	800349a <HAL_TIM_PWM_Start+0x9e>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d109      	bne.n	8003454 <HAL_TIM_PWM_Start+0x58>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e022      	b.n	800349a <HAL_TIM_PWM_Start+0x9e>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d109      	bne.n	800346e <HAL_TIM_PWM_Start+0x72>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	e015      	b.n	800349a <HAL_TIM_PWM_Start+0x9e>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b10      	cmp	r3, #16
 8003472:	d109      	bne.n	8003488 <HAL_TIM_PWM_Start+0x8c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e008      	b.n	800349a <HAL_TIM_PWM_Start+0x9e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	bf14      	ite	ne
 8003494:	2301      	movne	r3, #1
 8003496:	2300      	moveq	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e088      	b.n	80035b4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_PWM_Start+0xb6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b0:	e023      	b.n	80034fa <HAL_TIM_PWM_Start+0xfe>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d104      	bne.n	80034c2 <HAL_TIM_PWM_Start+0xc6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c0:	e01b      	b.n	80034fa <HAL_TIM_PWM_Start+0xfe>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d104      	bne.n	80034d2 <HAL_TIM_PWM_Start+0xd6>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d0:	e013      	b.n	80034fa <HAL_TIM_PWM_Start+0xfe>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	d104      	bne.n	80034e2 <HAL_TIM_PWM_Start+0xe6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034e0:	e00b      	b.n	80034fa <HAL_TIM_PWM_Start+0xfe>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d104      	bne.n	80034f2 <HAL_TIM_PWM_Start+0xf6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f0:	e003      	b.n	80034fa <HAL_TIM_PWM_Start+0xfe>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2201      	movs	r2, #1
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 ff14 	bl	8004330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a2b      	ldr	r2, [pc, #172]	; (80035bc <HAL_TIM_PWM_Start+0x1c0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00e      	beq.n	8003530 <HAL_TIM_PWM_Start+0x134>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2a      	ldr	r2, [pc, #168]	; (80035c0 <HAL_TIM_PWM_Start+0x1c4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d009      	beq.n	8003530 <HAL_TIM_PWM_Start+0x134>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a28      	ldr	r2, [pc, #160]	; (80035c4 <HAL_TIM_PWM_Start+0x1c8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_TIM_PWM_Start+0x134>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <HAL_TIM_PWM_Start+0x1cc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <HAL_TIM_PWM_Start+0x138>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_TIM_PWM_Start+0x13a>
 8003534:	2300      	movs	r3, #0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_TIM_PWM_Start+0x1c0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00e      	beq.n	8003572 <HAL_TIM_PWM_Start+0x176>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d009      	beq.n	8003572 <HAL_TIM_PWM_Start+0x176>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1a      	ldr	r2, [pc, #104]	; (80035cc <HAL_TIM_PWM_Start+0x1d0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d004      	beq.n	8003572 <HAL_TIM_PWM_Start+0x176>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <HAL_TIM_PWM_Start+0x1c4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d115      	bne.n	800359e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <HAL_TIM_PWM_Start+0x1d4>)
 800357a:	4013      	ands	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b06      	cmp	r3, #6
 8003582:	d015      	beq.n	80035b0 <HAL_TIM_PWM_Start+0x1b4>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358a:	d011      	beq.n	80035b0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359c:	e008      	b.n	80035b0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e000      	b.n	80035b2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800
 80035cc:	40000400 	.word	0x40000400
 80035d0:	00010007 	.word	0x00010007

080035d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e097      	b.n	8003718 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7fd fa9d 	bl	8000b3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003618:	f023 0307 	bic.w	r3, r3, #7
 800361c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f000 fb63 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	4313      	orrs	r3, r2
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003674:	f023 030c 	bic.w	r3, r3, #12
 8003678:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	4313      	orrs	r3, r2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	011a      	lsls	r2, r3, #4
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	031b      	lsls	r3, r3, #12
 80036a4:	4313      	orrs	r3, r2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80036ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	4313      	orrs	r3, r2
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003730:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003738:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003740:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003748:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d110      	bne.n	8003772 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d102      	bne.n	800375c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003756:	7b7b      	ldrb	r3, [r7, #13]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d001      	beq.n	8003760 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e069      	b.n	8003834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003770:	e031      	b.n	80037d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d110      	bne.n	800379a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003778:	7bbb      	ldrb	r3, [r7, #14]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800377e:	7b3b      	ldrb	r3, [r7, #12]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d001      	beq.n	8003788 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e055      	b.n	8003834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003798:	e01d      	b.n	80037d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d108      	bne.n	80037b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037a6:	7b7b      	ldrb	r3, [r7, #13]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d102      	bne.n	80037b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037ac:	7b3b      	ldrb	r3, [r7, #12]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d001      	beq.n	80037b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e03e      	b.n	8003834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_TIM_Encoder_Start+0xc4>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d008      	beq.n	80037f4 <HAL_TIM_Encoder_Start+0xd4>
 80037e2:	e00f      	b.n	8003804 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2201      	movs	r2, #1
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fd9f 	bl	8004330 <TIM_CCxChannelCmd>
      break;
 80037f2:	e016      	b.n	8003822 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2201      	movs	r2, #1
 80037fa:	2104      	movs	r1, #4
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fd97 	bl	8004330 <TIM_CCxChannelCmd>
      break;
 8003802:	e00e      	b.n	8003822 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fd8f 	bl	8004330 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2201      	movs	r2, #1
 8003818:	2104      	movs	r1, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fd88 	bl	8004330 <TIM_CCxChannelCmd>
      break;
 8003820:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d122      	bne.n	8003898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b02      	cmp	r3, #2
 800385e:	d11b      	bne.n	8003898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0202 	mvn.w	r2, #2
 8003868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa1a 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fa0c 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fa1d 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d122      	bne.n	80038ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d11b      	bne.n	80038ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0204 	mvn.w	r2, #4
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f9f0 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f9e2 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f9f3 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d122      	bne.n	8003940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b08      	cmp	r3, #8
 8003906:	d11b      	bne.n	8003940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0208 	mvn.w	r2, #8
 8003910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2204      	movs	r2, #4
 8003916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9c6 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9b8 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f9c9 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b10      	cmp	r3, #16
 800394c:	d122      	bne.n	8003994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b10      	cmp	r3, #16
 800395a:	d11b      	bne.n	8003994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0210 	mvn.w	r2, #16
 8003964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2208      	movs	r2, #8
 800396a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f99c 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f98e 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f99f 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d10e      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0201 	mvn.w	r2, #1
 80039b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fc fc04 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	d10e      	bne.n	80039ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d107      	bne.n	80039ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fd40 	bl	800446c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fa:	d10e      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b80      	cmp	r3, #128	; 0x80
 8003a08:	d107      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fd33 	bl	8004480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d10e      	bne.n	8003a46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	d107      	bne.n	8003a46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f94d 	bl	8003ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d10e      	bne.n	8003a72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d107      	bne.n	8003a72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f06f 0220 	mvn.w	r2, #32
 8003a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fcf3 	bl	8004458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0ff      	b.n	8003c9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b14      	cmp	r3, #20
 8003aa6:	f200 80f0 	bhi.w	8003c8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003b05 	.word	0x08003b05
 8003ab4:	08003c8b 	.word	0x08003c8b
 8003ab8:	08003c8b 	.word	0x08003c8b
 8003abc:	08003c8b 	.word	0x08003c8b
 8003ac0:	08003b45 	.word	0x08003b45
 8003ac4:	08003c8b 	.word	0x08003c8b
 8003ac8:	08003c8b 	.word	0x08003c8b
 8003acc:	08003c8b 	.word	0x08003c8b
 8003ad0:	08003b87 	.word	0x08003b87
 8003ad4:	08003c8b 	.word	0x08003c8b
 8003ad8:	08003c8b 	.word	0x08003c8b
 8003adc:	08003c8b 	.word	0x08003c8b
 8003ae0:	08003bc7 	.word	0x08003bc7
 8003ae4:	08003c8b 	.word	0x08003c8b
 8003ae8:	08003c8b 	.word	0x08003c8b
 8003aec:	08003c8b 	.word	0x08003c8b
 8003af0:	08003c09 	.word	0x08003c09
 8003af4:	08003c8b 	.word	0x08003c8b
 8003af8:	08003c8b 	.word	0x08003c8b
 8003afc:	08003c8b 	.word	0x08003c8b
 8003b00:	08003c49 	.word	0x08003c49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f96a 	bl	8003de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0208 	orr.w	r2, r2, #8
 8003b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6999      	ldr	r1, [r3, #24]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	619a      	str	r2, [r3, #24]
      break;
 8003b42:	e0a5      	b.n	8003c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f9d0 	bl	8003ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6999      	ldr	r1, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	619a      	str	r2, [r3, #24]
      break;
 8003b84:	e084      	b.n	8003c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fa2f 	bl	8003ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0208 	orr.w	r2, r2, #8
 8003ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0204 	bic.w	r2, r2, #4
 8003bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69d9      	ldr	r1, [r3, #28]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	61da      	str	r2, [r3, #28]
      break;
 8003bc4:	e064      	b.n	8003c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fa8d 	bl	80040ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	021a      	lsls	r2, r3, #8
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	61da      	str	r2, [r3, #28]
      break;
 8003c06:	e043      	b.n	8003c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fad0 	bl	80041b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0208 	orr.w	r2, r2, #8
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0204 	bic.w	r2, r2, #4
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c46:	e023      	b.n	8003c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fb0e 	bl	8004270 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	021a      	lsls	r2, r3, #8
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c88:	e002      	b.n	8003c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop

08003ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a32      	ldr	r2, [pc, #200]	; (8003dd0 <TIM_Base_SetConfig+0xdc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_Base_SetConfig+0x28>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0x28>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a2f      	ldr	r2, [pc, #188]	; (8003dd4 <TIM_Base_SetConfig+0xe0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d108      	bne.n	8003d2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <TIM_Base_SetConfig+0xdc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <TIM_Base_SetConfig+0x6a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3c:	d00f      	beq.n	8003d5e <TIM_Base_SetConfig+0x6a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a24      	ldr	r2, [pc, #144]	; (8003dd4 <TIM_Base_SetConfig+0xe0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00b      	beq.n	8003d5e <TIM_Base_SetConfig+0x6a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a23      	ldr	r2, [pc, #140]	; (8003dd8 <TIM_Base_SetConfig+0xe4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <TIM_Base_SetConfig+0x6a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <TIM_Base_SetConfig+0xe8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d003      	beq.n	8003d5e <TIM_Base_SetConfig+0x6a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a21      	ldr	r2, [pc, #132]	; (8003de0 <TIM_Base_SetConfig+0xec>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d108      	bne.n	8003d70 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <TIM_Base_SetConfig+0xdc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <TIM_Base_SetConfig+0xc0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <TIM_Base_SetConfig+0xe4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d007      	beq.n	8003db4 <TIM_Base_SetConfig+0xc0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <TIM_Base_SetConfig+0xe8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0xc0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a0c      	ldr	r2, [pc, #48]	; (8003de0 <TIM_Base_SetConfig+0xec>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d103      	bne.n	8003dbc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	615a      	str	r2, [r3, #20]
}
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800

08003de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f023 0201 	bic.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 0302 	bic.w	r3, r3, #2
 8003e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a28      	ldr	r2, [pc, #160]	; (8003ee0 <TIM_OC1_SetConfig+0xfc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00b      	beq.n	8003e5c <TIM_OC1_SetConfig+0x78>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <TIM_OC1_SetConfig+0x100>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_OC1_SetConfig+0x78>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a26      	ldr	r2, [pc, #152]	; (8003ee8 <TIM_OC1_SetConfig+0x104>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_OC1_SetConfig+0x78>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a25      	ldr	r2, [pc, #148]	; (8003eec <TIM_OC1_SetConfig+0x108>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10c      	bne.n	8003e76 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0308 	bic.w	r3, r3, #8
 8003e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f023 0304 	bic.w	r3, r3, #4
 8003e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <TIM_OC1_SetConfig+0xfc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <TIM_OC1_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <TIM_OC1_SetConfig+0x100>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <TIM_OC1_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <TIM_OC1_SetConfig+0x104>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_OC1_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a16      	ldr	r2, [pc, #88]	; (8003eec <TIM_OC1_SetConfig+0x108>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d111      	bne.n	8003eba <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40014400 	.word	0x40014400
 8003eec:	40014800 	.word	0x40014800

08003ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f023 0210 	bic.w	r2, r3, #16
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0320 	bic.w	r3, r3, #32
 8003f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <TIM_OC2_SetConfig+0xf0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d10d      	bne.n	8003f70 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <TIM_OC2_SetConfig+0xf0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <TIM_OC2_SetConfig+0xa0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <TIM_OC2_SetConfig+0xf4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <TIM_OC2_SetConfig+0xa0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <TIM_OC2_SetConfig+0xf8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_OC2_SetConfig+0xa0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a18      	ldr	r2, [pc, #96]	; (8003fec <TIM_OC2_SetConfig+0xfc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d113      	bne.n	8003fb8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f96:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f9e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40014400 	.word	0x40014400
 8003fec:	40014800 	.word	0x40014800

08003ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0303 	bic.w	r3, r3, #3
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800403c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a23      	ldr	r2, [pc, #140]	; (80040dc <TIM_OC3_SetConfig+0xec>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10d      	bne.n	800406e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004058:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800406c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a1a      	ldr	r2, [pc, #104]	; (80040dc <TIM_OC3_SetConfig+0xec>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00b      	beq.n	800408e <TIM_OC3_SetConfig+0x9e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <TIM_OC3_SetConfig+0xf0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <TIM_OC3_SetConfig+0x9e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <TIM_OC3_SetConfig+0xf4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d003      	beq.n	800408e <TIM_OC3_SetConfig+0x9e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <TIM_OC3_SetConfig+0xf8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d113      	bne.n	80040b6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800409c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	621a      	str	r2, [r3, #32]
}
 80040d0:	bf00      	nop
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40012c00 	.word	0x40012c00
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800

080040ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800413a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	031b      	lsls	r3, r3, #12
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <TIM_OC4_SetConfig+0xb8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00b      	beq.n	8004168 <TIM_OC4_SetConfig+0x7c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <TIM_OC4_SetConfig+0xbc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d007      	beq.n	8004168 <TIM_OC4_SetConfig+0x7c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a14      	ldr	r2, [pc, #80]	; (80041ac <TIM_OC4_SetConfig+0xc0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d003      	beq.n	8004168 <TIM_OC4_SetConfig+0x7c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <TIM_OC4_SetConfig+0xc4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d109      	bne.n	800417c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800416e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	019b      	lsls	r3, r3, #6
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40014000 	.word	0x40014000
 80041ac:	40014400 	.word	0x40014400
 80041b0:	40014800 	.word	0x40014800

080041b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	041b      	lsls	r3, r3, #16
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a15      	ldr	r2, [pc, #84]	; (8004260 <TIM_OC5_SetConfig+0xac>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00b      	beq.n	8004226 <TIM_OC5_SetConfig+0x72>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a14      	ldr	r2, [pc, #80]	; (8004264 <TIM_OC5_SetConfig+0xb0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d007      	beq.n	8004226 <TIM_OC5_SetConfig+0x72>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a13      	ldr	r2, [pc, #76]	; (8004268 <TIM_OC5_SetConfig+0xb4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d003      	beq.n	8004226 <TIM_OC5_SetConfig+0x72>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a12      	ldr	r2, [pc, #72]	; (800426c <TIM_OC5_SetConfig+0xb8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d109      	bne.n	800423a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	621a      	str	r2, [r3, #32]
}
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40014000 	.word	0x40014000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800

08004270 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800429e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	051b      	lsls	r3, r3, #20
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <TIM_OC6_SetConfig+0xb0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00b      	beq.n	80042e4 <TIM_OC6_SetConfig+0x74>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a15      	ldr	r2, [pc, #84]	; (8004324 <TIM_OC6_SetConfig+0xb4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d007      	beq.n	80042e4 <TIM_OC6_SetConfig+0x74>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a14      	ldr	r2, [pc, #80]	; (8004328 <TIM_OC6_SetConfig+0xb8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_OC6_SetConfig+0x74>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a13      	ldr	r2, [pc, #76]	; (800432c <TIM_OC6_SetConfig+0xbc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d109      	bne.n	80042f8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	029b      	lsls	r3, r3, #10
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40014000 	.word	0x40014000
 8004328:	40014400 	.word	0x40014400
 800432c:	40014800 	.word	0x40014800

08004330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	2201      	movs	r2, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1a      	ldr	r2, [r3, #32]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	43db      	mvns	r3, r3
 8004352:	401a      	ands	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1a      	ldr	r2, [r3, #32]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	fa01 f303 	lsl.w	r3, r1, r3
 8004368:	431a      	orrs	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e054      	b.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a24      	ldr	r2, [pc, #144]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a17      	ldr	r2, [pc, #92]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fc:	d009      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a13      	ldr	r2, [pc, #76]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a11      	ldr	r2, [pc, #68]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10c      	bne.n	800442c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	4313      	orrs	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40000400 	.word	0x40000400
 8004454:	40014000 	.word	0x40014000

08004458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <__libc_init_array>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4d0d      	ldr	r5, [pc, #52]	; (80044cc <__libc_init_array+0x38>)
 8004498:	4c0d      	ldr	r4, [pc, #52]	; (80044d0 <__libc_init_array+0x3c>)
 800449a:	1b64      	subs	r4, r4, r5
 800449c:	10a4      	asrs	r4, r4, #2
 800449e:	2600      	movs	r6, #0
 80044a0:	42a6      	cmp	r6, r4
 80044a2:	d109      	bne.n	80044b8 <__libc_init_array+0x24>
 80044a4:	4d0b      	ldr	r5, [pc, #44]	; (80044d4 <__libc_init_array+0x40>)
 80044a6:	4c0c      	ldr	r4, [pc, #48]	; (80044d8 <__libc_init_array+0x44>)
 80044a8:	f000 f820 	bl	80044ec <_init>
 80044ac:	1b64      	subs	r4, r4, r5
 80044ae:	10a4      	asrs	r4, r4, #2
 80044b0:	2600      	movs	r6, #0
 80044b2:	42a6      	cmp	r6, r4
 80044b4:	d105      	bne.n	80044c2 <__libc_init_array+0x2e>
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044bc:	4798      	blx	r3
 80044be:	3601      	adds	r6, #1
 80044c0:	e7ee      	b.n	80044a0 <__libc_init_array+0xc>
 80044c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c6:	4798      	blx	r3
 80044c8:	3601      	adds	r6, #1
 80044ca:	e7f2      	b.n	80044b2 <__libc_init_array+0x1e>
 80044cc:	08004534 	.word	0x08004534
 80044d0:	08004534 	.word	0x08004534
 80044d4:	08004534 	.word	0x08004534
 80044d8:	08004538 	.word	0x08004538

080044dc <memset>:
 80044dc:	4402      	add	r2, r0
 80044de:	4603      	mov	r3, r0
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d100      	bne.n	80044e6 <memset+0xa>
 80044e4:	4770      	bx	lr
 80044e6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ea:	e7f9      	b.n	80044e0 <memset+0x4>

080044ec <_init>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr

080044f8 <_fini>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr
