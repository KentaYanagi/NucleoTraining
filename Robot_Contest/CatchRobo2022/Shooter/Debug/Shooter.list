
Shooter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b4  080036b4  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080036b4  080036b4  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036b4  080036b4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b4  080036b4  000136b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080036bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000003c  080036f8  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080036f8  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b27a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001673  00000000  00000000  0002b2e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002c960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a00  00000000  00000000  0002d418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a281  00000000  00000000  0002de18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008aa9  00000000  00000000  00048099  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e648  00000000  00000000  00050b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef18a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf4  00000000  00000000  000ef208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800366c 	.word	0x0800366c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	0800366c 	.word	0x0800366c

080001c8 <Filter_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

CAN_FilterTypeDef filter;
void Filter_Init(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	filter.FilterIdHigh         = 0;
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <Filter_Init+0x4c>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
	filter.FilterIdLow          = 0;
 80001d2:	4b10      	ldr	r3, [pc, #64]	; (8000214 <Filter_Init+0x4c>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	605a      	str	r2, [r3, #4]
	filter.FilterMaskIdHigh     = 0;
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <Filter_Init+0x4c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow      = 0;
 80001de:	4b0d      	ldr	r3, [pc, #52]	; (8000214 <Filter_Init+0x4c>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	60da      	str	r2, [r3, #12]
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;
 80001e4:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <Filter_Init+0x4c>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	61da      	str	r2, [r3, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <Filter_Init+0x4c>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	611a      	str	r2, [r3, #16]
	filter.FilterBank           = 0;
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <Filter_Init+0x4c>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	615a      	str	r2, [r3, #20]
	filter.FilterMode           = CAN_FILTERMODE_IDMASK;
 80001f6:	4b07      	ldr	r3, [pc, #28]	; (8000214 <Filter_Init+0x4c>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	619a      	str	r2, [r3, #24]
	filter.SlaveStartFilterBank = 14;
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <Filter_Init+0x4c>)
 80001fe:	220e      	movs	r2, #14
 8000200:	625a      	str	r2, [r3, #36]	; 0x24
	filter.FilterActivation     = ENABLE;
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <Filter_Init+0x4c>)
 8000204:	2201      	movs	r2, #1
 8000206:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan, &filter);
 8000208:	4902      	ldr	r1, [pc, #8]	; (8000214 <Filter_Init+0x4c>)
 800020a:	4803      	ldr	r0, [pc, #12]	; (8000218 <Filter_Init+0x50>)
 800020c:	f000 fdb1 	bl	8000d72 <HAL_CAN_ConfigFilter>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	2000009c 	.word	0x2000009c
 8000218:	2000006c 	.word	0x2000006c

0800021c <HAL_CAN_RxFifo0MsgPendingCallback>:
int steppint_roate_times[3]={5400,3600,1800};
int stepping_step[2]={0,0};
#define WAIT_TIME 3500

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b08c      	sub	sp, #48	; 0x30
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000224:	f107 030c 	add.w	r3, r7, #12
 8000228:	f107 0214 	add.w	r2, r7, #20
 800022c:	2100      	movs	r1, #0
 800022e:	6878      	ldr	r0, [r7, #4]
 8000230:	f000 fead 	bl	8000f8e <HAL_CAN_GetRxMessage>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d16b      	bne.n	8000312 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
    {
    	if(RxHeader.StdId==0x552){
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	f240 5252 	movw	r2, #1362	; 0x552
 8000240:	4293      	cmp	r3, r2
 8000242:	d140      	bne.n	80002c6 <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
			id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 8000244:	69fb      	ldr	r3, [r7, #28]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d101      	bne.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	e000      	b.n	8000250 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 800024e:	69bb      	ldr	r3, [r7, #24]
 8000250:	4a32      	ldr	r2, [pc, #200]	; (800031c <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8000252:	6013      	str	r3, [r2, #0]
			dlc = RxHeader.DLC;
 8000254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000256:	4a32      	ldr	r2, [pc, #200]	; (8000320 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8000258:	6013      	str	r3, [r2, #0]


			if(RxData[6]=='T' && devide_step==-2){
 800025a:	7cbb      	ldrb	r3, [r7, #18]
 800025c:	2b54      	cmp	r3, #84	; 0x54
 800025e:	d10c      	bne.n	800027a <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 8000260:	4b30      	ldr	r3, [pc, #192]	; (8000324 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f113 0f02 	cmn.w	r3, #2
 8000268:	d107      	bne.n	800027a <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
				time_count=WAIT_TIME;
 800026a:	4b2f      	ldr	r3, [pc, #188]	; (8000328 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800026c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000270:	601a      	str	r2, [r3, #0]
				devide_step=-1;
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000274:	f04f 32ff 	mov.w	r2, #4294967295
 8000278:	601a      	str	r2, [r3, #0]
			}

			if(RxData[6]=='T' && devide_step==6){
 800027a:	7cbb      	ldrb	r3, [r7, #18]
 800027c:	2b54      	cmp	r3, #84	; 0x54
 800027e:	d10a      	bne.n	8000296 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
 8000280:	4b28      	ldr	r3, [pc, #160]	; (8000324 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b06      	cmp	r3, #6
 8000286:	d106      	bne.n	8000296 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
				time_count=WAIT_TIME;
 8000288:	4b27      	ldr	r3, [pc, #156]	; (8000328 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800028a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800028e:	601a      	str	r2, [r3, #0]
				devide_step=7;
 8000290:	4b24      	ldr	r3, [pc, #144]	; (8000324 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000292:	2207      	movs	r2, #7
 8000294:	601a      	str	r2, [r3, #0]
			}

			data[0] = RxData[0];
 8000296:	7b3a      	ldrb	r2, [r7, #12]
 8000298:	4b24      	ldr	r3, [pc, #144]	; (800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800029a:	701a      	strb	r2, [r3, #0]
			data[1] = RxData[1];
 800029c:	7b7a      	ldrb	r2, [r7, #13]
 800029e:	4b23      	ldr	r3, [pc, #140]	; (800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80002a0:	705a      	strb	r2, [r3, #1]
			data[2] = RxData[2];
 80002a2:	7bba      	ldrb	r2, [r7, #14]
 80002a4:	4b21      	ldr	r3, [pc, #132]	; (800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80002a6:	709a      	strb	r2, [r3, #2]
			data[3] = RxData[3];
 80002a8:	7bfa      	ldrb	r2, [r7, #15]
 80002aa:	4b20      	ldr	r3, [pc, #128]	; (800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80002ac:	70da      	strb	r2, [r3, #3]
			data[4] = RxData[4];
 80002ae:	7c3a      	ldrb	r2, [r7, #16]
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80002b2:	711a      	strb	r2, [r3, #4]
			data[5] = RxData[5];
 80002b4:	7c7a      	ldrb	r2, [r7, #17]
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80002b8:	715a      	strb	r2, [r3, #5]
			data[6] = RxData[6];
 80002ba:	7cba      	ldrb	r2, [r7, #18]
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80002be:	719a      	strb	r2, [r3, #6]
			data[7] = RxData[7];
 80002c0:	7cfa      	ldrb	r2, [r7, #19]
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80002c4:	71da      	strb	r2, [r3, #7]
    	}

    	if(RxHeader.StdId==0x334){
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80002cc:	d121      	bne.n	8000312 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
			id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 80002ce:	69fb      	ldr	r3, [r7, #28]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d101      	bne.n	80002d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	e000      	b.n	80002da <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
 80002d8:	69bb      	ldr	r3, [r7, #24]
 80002da:	4a10      	ldr	r2, [pc, #64]	; (800031c <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80002dc:	6013      	str	r3, [r2, #0]
			dlc = RxHeader.DLC;
 80002de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002e0:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80002e2:	6013      	str	r3, [r2, #0]
			switch_data[0] = RxData[0];
 80002e4:	7b3a      	ldrb	r2, [r7, #12]
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80002e8:	701a      	strb	r2, [r3, #0]
			switch_data[1] = RxData[1];
 80002ea:	7b7a      	ldrb	r2, [r7, #13]
 80002ec:	4b10      	ldr	r3, [pc, #64]	; (8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80002ee:	705a      	strb	r2, [r3, #1]

			if(devide_step==-3 && switch_data[0] =='T'  && switch_data[1] =='T'){
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f113 0f03 	cmn.w	r3, #3
 80002f8:	d10b      	bne.n	8000312 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
 80002fa:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b54      	cmp	r3, #84	; 0x54
 8000300:	d107      	bne.n	8000312 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000304:	785b      	ldrb	r3, [r3, #1]
 8000306:	2b54      	cmp	r3, #84	; 0x54
 8000308:	d103      	bne.n	8000312 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
				devide_step=-2;
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800030c:	f06f 0201 	mvn.w	r2, #1
 8000310:	601a      	str	r2, [r3, #0]
    	}

    }


}
 8000312:	bf00      	nop
 8000314:	3730      	adds	r7, #48	; 0x30
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000094 	.word	0x20000094
 8000320:	20000098 	.word	0x20000098
 8000324:	20000000 	.word	0x20000000
 8000328:	20000058 	.word	0x20000058
 800032c:	200000c4 	.word	0x200000c4
 8000330:	20000068 	.word	0x20000068

08000334 <Rotate>:


int stepping_output[4][2]={{0,0},{0,1},{1,1},{1,0}};


void Rotate(){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

	if(stepping_output[stepping_step[0]%4][0]==0){
 8000338:	4b24      	ldr	r3, [pc, #144]	; (80003cc <Rotate+0x98>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	425a      	negs	r2, r3
 800033e:	f003 0303 	and.w	r3, r3, #3
 8000342:	f002 0203 	and.w	r2, r2, #3
 8000346:	bf58      	it	pl
 8000348:	4253      	negpl	r3, r2
 800034a:	4a21      	ldr	r2, [pc, #132]	; (80003d0 <Rotate+0x9c>)
 800034c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d10a      	bne.n	800036a <Rotate+0x36>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2102      	movs	r1, #2
 8000358:	481e      	ldr	r0, [pc, #120]	; (80003d4 <Rotate+0xa0>)
 800035a:	f001 fbfd 	bl	8001b58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2120      	movs	r1, #32
 8000362:	481c      	ldr	r0, [pc, #112]	; (80003d4 <Rotate+0xa0>)
 8000364:	f001 fbf8 	bl	8001b58 <HAL_GPIO_WritePin>
 8000368:	e009      	b.n	800037e <Rotate+0x4a>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 800036a:	2201      	movs	r2, #1
 800036c:	2102      	movs	r1, #2
 800036e:	4819      	ldr	r0, [pc, #100]	; (80003d4 <Rotate+0xa0>)
 8000370:	f001 fbf2 	bl	8001b58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2120      	movs	r1, #32
 8000378:	4816      	ldr	r0, [pc, #88]	; (80003d4 <Rotate+0xa0>)
 800037a:	f001 fbed 	bl	8001b58 <HAL_GPIO_WritePin>
	}

	if(stepping_output[stepping_step[1]%4][1]==0){
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <Rotate+0x98>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	425a      	negs	r2, r3
 8000384:	f003 0303 	and.w	r3, r3, #3
 8000388:	f002 0203 	and.w	r2, r2, #3
 800038c:	bf58      	it	pl
 800038e:	4253      	negpl	r3, r2
 8000390:	4a0f      	ldr	r2, [pc, #60]	; (80003d0 <Rotate+0x9c>)
 8000392:	00db      	lsls	r3, r3, #3
 8000394:	4413      	add	r3, r2
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d10a      	bne.n	80003b2 <Rotate+0x7e>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0,GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2101      	movs	r1, #1
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <Rotate+0xa4>)
 80003a2:	f001 fbd9 	bl	8001b58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2110      	movs	r1, #16
 80003aa:	480a      	ldr	r0, [pc, #40]	; (80003d4 <Rotate+0xa0>)
 80003ac:	f001 fbd4 	bl	8001b58 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
	}
}
 80003b0:	e009      	b.n	80003c6 <Rotate+0x92>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0,GPIO_PIN_SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	2101      	movs	r1, #1
 80003b6:	4808      	ldr	r0, [pc, #32]	; (80003d8 <Rotate+0xa4>)
 80003b8:	f001 fbce 	bl	8001b58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2110      	movs	r1, #16
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <Rotate+0xa0>)
 80003c2:	f001 fbc9 	bl	8001b58 <HAL_GPIO_WritePin>
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000060 	.word	0x20000060
 80003d0:	20000010 	.word	0x20000010
 80003d4:	48000400 	.word	0x48000400
 80003d8:	48001400 	.word	0x48001400

080003dc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a74      	ldr	r2, [pc, #464]	; (80005b8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	f040 80e1 	bne.w	80005b0 <HAL_TIM_PeriodElapsedCallback+0x1d4>
    	if( (0<=devide_step && devide_step<=5) || (devide_step==8 || devide_step==9 )){
 80003ee:	4b73      	ldr	r3, [pc, #460]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db03      	blt.n	80003fe <HAL_TIM_PeriodElapsedCallback+0x22>
 80003f6:	4b71      	ldr	r3, [pc, #452]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b05      	cmp	r3, #5
 80003fc:	dd08      	ble.n	8000410 <HAL_TIM_PeriodElapsedCallback+0x34>
 80003fe:	4b6f      	ldr	r3, [pc, #444]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b08      	cmp	r3, #8
 8000404:	d004      	beq.n	8000410 <HAL_TIM_PeriodElapsedCallback+0x34>
 8000406:	4b6d      	ldr	r3, [pc, #436]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b09      	cmp	r3, #9
 800040c:	f040 8083 	bne.w	8000516 <HAL_TIM_PeriodElapsedCallback+0x13a>

			if(devide_step%2==0 ){
 8000410:	4b6a      	ldr	r3, [pc, #424]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	2b00      	cmp	r3, #0
 800041a:	d127      	bne.n	800046c <HAL_TIM_PeriodElapsedCallback+0x90>
				for(i=0;i<2;i++){
 800041c:	4b68      	ldr	r3, [pc, #416]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	e01e      	b.n	8000462 <HAL_TIM_PeriodElapsedCallback+0x86>
					stepping_step[i]++;
 8000424:	4b66      	ldr	r3, [pc, #408]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a66      	ldr	r2, [pc, #408]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800042a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800042e:	3201      	adds	r2, #1
 8000430:	4964      	ldr	r1, [pc, #400]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					stepping_step[i]%=4;
 8000436:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a62      	ldr	r2, [pc, #392]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800043c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000440:	4a5f      	ldr	r2, [pc, #380]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000442:	6812      	ldr	r2, [r2, #0]
 8000444:	4259      	negs	r1, r3
 8000446:	f003 0303 	and.w	r3, r3, #3
 800044a:	f001 0103 	and.w	r1, r1, #3
 800044e:	bf58      	it	pl
 8000450:	424b      	negpl	r3, r1
 8000452:	495c      	ldr	r1, [pc, #368]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000454:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
				for(i=0;i<2;i++){
 8000458:	4b59      	ldr	r3, [pc, #356]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	4a58      	ldr	r2, [pc, #352]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000460:	6013      	str	r3, [r2, #0]
 8000462:	4b57      	ldr	r3, [pc, #348]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b01      	cmp	r3, #1
 8000468:	dddc      	ble.n	8000424 <HAL_TIM_PeriodElapsedCallback+0x48>
 800046a:	e027      	b.n	80004bc <HAL_TIM_PeriodElapsedCallback+0xe0>
				}
			}
			else{
				for(i=0;i<2;i++){
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	e01f      	b.n	80004b4 <HAL_TIM_PeriodElapsedCallback+0xd8>
					stepping_step[i]--;
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a52      	ldr	r2, [pc, #328]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800047a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047e:	3a01      	subs	r2, #1
 8000480:	4950      	ldr	r1, [pc, #320]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(stepping_step[i]<0){
 8000486:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a4e      	ldr	r2, [pc, #312]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800048c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000490:	2b00      	cmp	r3, #0
 8000492:	da0a      	bge.n	80004aa <HAL_TIM_PeriodElapsedCallback+0xce>
						stepping_step[i]+=4;
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a4a      	ldr	r2, [pc, #296]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800049a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800049e:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3204      	adds	r2, #4
 80004a4:	4947      	ldr	r1, [pc, #284]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(i=0;i<2;i++){
 80004aa:	4b45      	ldr	r3, [pc, #276]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	3301      	adds	r3, #1
 80004b0:	4a43      	ldr	r2, [pc, #268]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80004b2:	6013      	str	r3, [r2, #0]
 80004b4:	4b42      	ldr	r3, [pc, #264]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	dddb      	ble.n	8000474 <HAL_TIM_PeriodElapsedCallback+0x98>
					}
				}
			}

			Rotate();
 80004bc:	f7ff ff3a 	bl	8000334 <Rotate>
			if(time_count>0){
 80004c0:	4b41      	ldr	r3, [pc, #260]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	dd72      	ble.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x1d2>
				time_count--;
 80004c8:	4b3f      	ldr	r3, [pc, #252]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4a3e      	ldr	r2, [pc, #248]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80004d0:	6013      	str	r3, [r2, #0]
				if(time_count==0){
 80004d2:	4b3d      	ldr	r3, [pc, #244]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d169      	bne.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x1d2>
					devide_step++;
 80004da:	4b38      	ldr	r3, [pc, #224]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	4a36      	ldr	r2, [pc, #216]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80004e2:	6013      	str	r3, [r2, #0]
					if( (0<= devide_step && devide_step<6) || devide_step==8 ){
 80004e4:	4b35      	ldr	r3, [pc, #212]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	db03      	blt.n	80004f4 <HAL_TIM_PeriodElapsedCallback+0x118>
 80004ec:	4b33      	ldr	r3, [pc, #204]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b05      	cmp	r3, #5
 80004f2:	dd03      	ble.n	80004fc <HAL_TIM_PeriodElapsedCallback+0x120>
 80004f4:	4b31      	ldr	r3, [pc, #196]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b08      	cmp	r3, #8
 80004fa:	d104      	bne.n	8000506 <HAL_TIM_PeriodElapsedCallback+0x12a>
						time_count=steppint_roate_times[0];
 80004fc:	4b33      	ldr	r3, [pc, #204]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a31      	ldr	r2, [pc, #196]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000502:	6013      	str	r3, [r2, #0]
			if(time_count>0){
 8000504:	e053      	b.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x1d2>
					}
					else if(devide_step==9){
 8000506:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b09      	cmp	r3, #9
 800050c:	d14f      	bne.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x1d2>
						devide_step=10;
 800050e:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000510:	220a      	movs	r2, #10
 8000512:	601a      	str	r2, [r3, #0]
			if(time_count>0){
 8000514:	e04b      	b.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x1d2>
					}
				}
			}

    	}
    	else if(devide_step==-3 ){
 8000516:	4b29      	ldr	r3, [pc, #164]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f113 0f03 	cmn.w	r3, #3
 800051e:	d126      	bne.n	800056e <HAL_TIM_PeriodElapsedCallback+0x192>
    		if(switch_data[0]=='F'){
 8000520:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b46      	cmp	r3, #70	; 0x46
 8000526:	d10d      	bne.n	8000544 <HAL_TIM_PeriodElapsedCallback+0x168>
    			stepping_step[0]--;
 8000528:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3b01      	subs	r3, #1
 800052e:	4a25      	ldr	r2, [pc, #148]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000530:	6013      	str	r3, [r2, #0]
				if(stepping_step[0]<0){
 8000532:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	da04      	bge.n	8000544 <HAL_TIM_PeriodElapsedCallback+0x168>
					stepping_step[0]+=4;
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3304      	adds	r3, #4
 8000540:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000542:	6013      	str	r3, [r2, #0]
				}
    		}

    		if(switch_data[1]=='F'){
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000546:	785b      	ldrb	r3, [r3, #1]
 8000548:	2b46      	cmp	r3, #70	; 0x46
 800054a:	d10d      	bne.n	8000568 <HAL_TIM_PeriodElapsedCallback+0x18c>
    			stepping_step[1]--;
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000554:	6053      	str	r3, [r2, #4]
				if(stepping_step[1]<0){
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	da04      	bge.n	8000568 <HAL_TIM_PeriodElapsedCallback+0x18c>
					stepping_step[1]+=4;
 800055e:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	3304      	adds	r3, #4
 8000564:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000566:	6053      	str	r3, [r2, #4]
				}
    		}

    		Rotate();
 8000568:	f7ff fee4 	bl	8000334 <Rotate>
			}

    	}

    }
}
 800056c:	e020      	b.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0x1d4>
    	else if(devide_step==-1 || devide_step==7){
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000576:	d003      	beq.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8000578:	4b10      	ldr	r3, [pc, #64]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b07      	cmp	r3, #7
 800057e:	d117      	bne.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0x1d4>
    		if(time_count>0){
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	dd13      	ble.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0x1d4>
				time_count--;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000590:	6013      	str	r3, [r2, #0]
				if(time_count==0){
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10a      	bne.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0x1d4>
					devide_step++;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80005a2:	6013      	str	r3, [r2, #0]
					time_count=steppint_roate_times[0];
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	e000      	b.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			if(time_count>0){
 80005ae:	bf00      	nop
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000d8 	.word	0x200000d8
 80005bc:	20000000 	.word	0x20000000
 80005c0:	2000005c 	.word	0x2000005c
 80005c4:	20000060 	.word	0x20000060
 80005c8:	20000058 	.word	0x20000058
 80005cc:	20000004 	.word	0x20000004
 80005d0:	20000068 	.word	0x20000068

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fa6a 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f830 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f8f4 	bl	80007cc <MX_GPIO_Init>
  MX_CAN_Init();
 80005e4:	f000 f86e 	bl	80006c4 <MX_CAN_Init>
  MX_TIM2_Init();
 80005e8:	f000 f8a2 	bl	8000730 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005ec:	4810      	ldr	r0, [pc, #64]	; (8000630 <main+0x5c>)
 80005ee:	f002 fc11 	bl	8002e14 <HAL_TIM_Base_Start_IT>

	HAL_CAN_Start(&hcan);
 80005f2:	4810      	ldr	r0, [pc, #64]	; (8000634 <main+0x60>)
 80005f4:	f000 fc87 	bl	8000f06 <HAL_CAN_Start>
	Filter_Init();
 80005f8:	f7ff fde6 	bl	80001c8 <Filter_Init>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005fc:	2102      	movs	r1, #2
 80005fe:	480d      	ldr	r0, [pc, #52]	; (8000634 <main+0x60>)
 8000600:	f000 fdd7 	bl	80011b2 <HAL_CAN_ActivateNotification>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2102      	movs	r1, #2
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <main+0x64>)
 800060a:	f001 faa5 	bl	8001b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0,GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2101      	movs	r1, #1
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <main+0x68>)
 8000614:	f001 faa0 	bl	8001b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2110      	movs	r1, #16
 800061c:	4806      	ldr	r0, [pc, #24]	; (8000638 <main+0x64>)
 800061e:	f001 fa9b 	bl	8001b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2120      	movs	r1, #32
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <main+0x64>)
 8000628:	f001 fa96 	bl	8001b58 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x58>
 800062e:	bf00      	nop
 8000630:	200000d8 	.word	0x200000d8
 8000634:	2000006c 	.word	0x2000006c
 8000638:	48000400 	.word	0x48000400
 800063c:	48001400 	.word	0x48001400

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	; 0x40
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2228      	movs	r2, #40	; 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 f804 	bl	800365c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	2301      	movs	r3, #1
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2310      	movs	r3, #16
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000672:	2300      	movs	r3, #0
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000676:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0318 	add.w	r3, r7, #24
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fa81 	bl	8001b88 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800068c:	f000 f8fe 	bl	800088c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 f974 	bl	8002998 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006b6:	f000 f8e9 	bl	800088c <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3740      	adds	r7, #64	; 0x40
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_CAN_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_CAN_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_CAN_Init+0x64>)
 80006d0:	2204      	movs	r2, #4
 80006d2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_CAN_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_CAN_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_CAN_Init+0x64>)
 80006e2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80006e6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_CAN_Init+0x64>)
 80006ea:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80006ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_CAN_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_CAN_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_CAN_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_CAN_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_CAN_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_CAN_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_CAN_Init+0x64>)
 8000716:	f000 fa31 	bl	8000b7c <HAL_CAN_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 f8b4 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000006c 	.word	0x2000006c
 800072c:	40006400 	.word	0x40006400

08000730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_TIM2_Init+0x98>)
 8000750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000754:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_TIM2_Init+0x98>)
 8000758:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800075c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_TIM2_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_TIM2_Init+0x98>)
 8000766:	2214      	movs	r2, #20
 8000768:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_TIM2_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_TIM2_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000776:	4814      	ldr	r0, [pc, #80]	; (80007c8 <MX_TIM2_Init+0x98>)
 8000778:	f002 faf4 	bl	8002d64 <HAL_TIM_Base_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000782:	f000 f883 	bl	800088c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4619      	mov	r1, r3
 8000792:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_TIM2_Init+0x98>)
 8000794:	f002 fcb9 	bl	800310a <HAL_TIM_ConfigClockSource>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800079e:	f000 f875 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <MX_TIM2_Init+0x98>)
 80007b0:	f002 fea4 	bl	80034fc <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007ba:	f000 f867 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	3720      	adds	r7, #32
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000d8 	.word	0x200000d8

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_GPIO_Init+0xb4>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a26      	ldr	r2, [pc, #152]	; (8000880 <MX_GPIO_Init+0xb4>)
 80007e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_GPIO_Init+0xb4>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_GPIO_Init+0xb4>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a20      	ldr	r2, [pc, #128]	; (8000880 <MX_GPIO_Init+0xb4>)
 8000800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_GPIO_Init+0xb4>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_GPIO_Init+0xb4>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <MX_GPIO_Init+0xb4>)
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_GPIO_Init+0xb4>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	4815      	ldr	r0, [pc, #84]	; (8000884 <MX_GPIO_Init+0xb8>)
 8000830:	f001 f992 	bl	8001b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2132      	movs	r1, #50	; 0x32
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <MX_GPIO_Init+0xbc>)
 800083a:	f001 f98d 	bl	8001b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800083e:	2301      	movs	r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <MX_GPIO_Init+0xb8>)
 8000856:	f001 f80d 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800085a:	2332      	movs	r3, #50	; 0x32
 800085c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_GPIO_Init+0xbc>)
 8000872:	f000 ffff 	bl	8001874 <HAL_GPIO_Init>

}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000
 8000884:	48001400 	.word	0x48001400
 8000888:	48000400 	.word	0x48000400

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000892:	e7fe      	b.n	8000892 <Error_Handler+0x6>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x44>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_MspInit+0x44>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_MspInit+0x44>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x44>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_MspInit+0x44>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x44>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a1c      	ldr	r2, [pc, #112]	; (800096c <HAL_CAN_MspInit+0x90>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d131      	bne.n	8000962 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_CAN_MspInit+0x94>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <HAL_CAN_MspInit+0x94>)
 8000904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_CAN_MspInit+0x94>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_CAN_MspInit+0x94>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <HAL_CAN_MspInit+0x94>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_CAN_MspInit+0x94>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800092e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000940:	2309      	movs	r3, #9
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094e:	f000 ff91 	bl	8001874 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2014      	movs	r0, #20
 8000958:	f000 ff55 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800095c:	2014      	movs	r0, #20
 800095e:	f000 ff6e 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40006400 	.word	0x40006400
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000984:	d113      	bne.n	80009ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_TIM_Base_MspInit+0x44>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <HAL_TIM_Base_MspInit+0x44>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_TIM_Base_MspInit+0x44>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	201c      	movs	r0, #28
 80009a4:	f000 ff2f 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009a8:	201c      	movs	r0, #28
 80009aa:	f000 ff48 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f898 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <CAN_RX0_IRQHandler+0x10>)
 8000a16:	f000 fbf2 	bl	80011fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000006c 	.word	0x2000006c

08000a24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <TIM2_IRQHandler+0x10>)
 8000a2a:	f002 fa4f 	bl	8002ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000d8 	.word	0x200000d8

08000a38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490e      	ldr	r1, [pc, #56]	; (8000a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0b      	ldr	r4, [pc, #44]	; (8000aa8 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a86:	f7ff ffd7 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f002 fdc3 	bl	8003614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8e:	f7ff fda1 	bl	80005d4 <main>

08000a92 <LoopForever>:

LoopForever:
    b LoopForever
 8000a92:	e7fe      	b.n	8000a92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a94:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000aa0:	080036bc 	.word	0x080036bc
  ldr r2, =_sbss
 8000aa4:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000aa8:	20000140 	.word	0x20000140

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x28>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x28>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 fe95 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fee2 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fead 	bl	800185a <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 fe75 	bl	8001806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000030 	.word	0x20000030
 8000b34:	20000038 	.word	0x20000038
 8000b38:	20000034 	.word	0x20000034

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000038 	.word	0x20000038
 8000b60:	2000013c 	.word	0x2000013c

08000b64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	2000013c 	.word	0x2000013c

08000b7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e0ed      	b.n	8000d6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fe9e 	bl	80008dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f042 0201 	orr.w	r2, r2, #1
 8000bae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb0:	f7ff ffd8 	bl	8000b64 <HAL_GetTick>
 8000bb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bb6:	e012      	b.n	8000bde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bb8:	f7ff ffd4 	bl	8000b64 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d90b      	bls.n	8000bde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2205      	movs	r2, #5
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e0c5      	b.n	8000d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0e5      	beq.n	8000bb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 0202 	bic.w	r2, r2, #2
 8000bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bfc:	f7ff ffb2 	bl	8000b64 <HAL_GetTick>
 8000c00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c02:	e012      	b.n	8000c2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c04:	f7ff ffae 	bl	8000b64 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b0a      	cmp	r3, #10
 8000c10:	d90b      	bls.n	8000c2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2205      	movs	r2, #5
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e09f      	b.n	8000d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1e5      	bne.n	8000c04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7e1b      	ldrb	r3, [r3, #24]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d108      	bne.n	8000c52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	e007      	b.n	8000c62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7e5b      	ldrb	r3, [r3, #25]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d108      	bne.n	8000c7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e007      	b.n	8000c8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7e9b      	ldrb	r3, [r3, #26]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d108      	bne.n	8000ca6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 0220 	orr.w	r2, r2, #32
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	e007      	b.n	8000cb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0220 	bic.w	r2, r2, #32
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7edb      	ldrb	r3, [r3, #27]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d108      	bne.n	8000cd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 0210 	bic.w	r2, r2, #16
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e007      	b.n	8000ce0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 0210 	orr.w	r2, r2, #16
 8000cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7f1b      	ldrb	r3, [r3, #28]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d108      	bne.n	8000cfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f042 0208 	orr.w	r2, r2, #8
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	e007      	b.n	8000d0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0208 	bic.w	r2, r2, #8
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7f5b      	ldrb	r3, [r3, #29]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d108      	bne.n	8000d24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f042 0204 	orr.w	r2, r2, #4
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	e007      	b.n	8000d34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0204 	bic.w	r2, r2, #4
 8000d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	ea42 0103 	orr.w	r1, r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	1e5a      	subs	r2, r3, #1
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b087      	sub	sp, #28
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d88:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d003      	beq.n	8000d98 <HAL_CAN_ConfigFilter+0x26>
 8000d90:	7cfb      	ldrb	r3, [r7, #19]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	f040 80aa 	bne.w	8000eec <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d9e:	f043 0201 	orr.w	r2, r3, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	f003 031f 	and.w	r3, r3, #31
 8000db0:	2201      	movs	r2, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d123      	bne.n	8000e1a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	401a      	ands	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000df4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3248      	adds	r2, #72	; 0x48
 8000dfa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e10:	6979      	ldr	r1, [r7, #20]
 8000e12:	3348      	adds	r3, #72	; 0x48
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	440b      	add	r3, r1
 8000e18:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d122      	bne.n	8000e68 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3248      	adds	r2, #72	; 0x48
 8000e48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e5e:	6979      	ldr	r1, [r7, #20]
 8000e60:	3348      	adds	r3, #72	; 0x48
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	440b      	add	r3, r1
 8000e66:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d109      	bne.n	8000e84 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e82:	e007      	b.n	8000e94 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d109      	bne.n	8000eb0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000eae:	e007      	b.n	8000ec0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d107      	bne.n	8000ed8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ede:	f023 0201 	bic.w	r2, r3, #1
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	e006      	b.n	8000efa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
  }
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d12e      	bne.n	8000f78 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0201 	bic.w	r2, r2, #1
 8000f30:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f32:	f7ff fe17 	bl	8000b64 <HAL_GetTick>
 8000f36:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f38:	e012      	b.n	8000f60 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f3a:	f7ff fe13 	bl	8000b64 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b0a      	cmp	r3, #10
 8000f46:	d90b      	bls.n	8000f60 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2205      	movs	r2, #5
 8000f58:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e012      	b.n	8000f86 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1e5      	bne.n	8000f3a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e006      	b.n	8000f86 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
  }
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b087      	sub	sp, #28
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d003      	beq.n	8000fb2 <HAL_CAN_GetRxMessage+0x24>
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	f040 80f3 	bne.w	8001198 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10e      	bne.n	8000fd6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d116      	bne.n	8000ff4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0e7      	b.n	80011a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d107      	bne.n	8000ff4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e0d8      	b.n	80011a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	331b      	adds	r3, #27
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	4413      	add	r3, r2
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0204 	and.w	r2, r3, #4
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10c      	bne.n	800102c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	331b      	adds	r3, #27
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	4413      	add	r3, r2
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0d5b      	lsrs	r3, r3, #21
 8001022:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	e00b      	b.n	8001044 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	331b      	adds	r3, #27
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	4413      	add	r3, r2
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	331b      	adds	r3, #27
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	4413      	add	r3, r2
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0202 	and.w	r2, r3, #2
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	331b      	adds	r3, #27
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	4413      	add	r3, r2
 8001066:	3304      	adds	r3, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 020f 	and.w	r2, r3, #15
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	331b      	adds	r3, #27
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	3304      	adds	r3, #4
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	b2da      	uxtb	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	331b      	adds	r3, #27
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	4413      	add	r3, r2
 8001096:	3304      	adds	r3, #4
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0c1b      	lsrs	r3, r3, #16
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	4413      	add	r3, r2
 80010ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4413      	add	r3, r2
 80010c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0a1a      	lsrs	r2, r3, #8
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	4413      	add	r3, r2
 80010dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	0c1a      	lsrs	r2, r3, #16
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	3302      	adds	r3, #2
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	4413      	add	r3, r2
 80010f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	0e1a      	lsrs	r2, r3, #24
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	3303      	adds	r3, #3
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	4413      	add	r3, r2
 8001110:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	3304      	adds	r3, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	4413      	add	r3, r2
 8001128:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0a1a      	lsrs	r2, r3, #8
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	3305      	adds	r3, #5
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	4413      	add	r3, r2
 8001142:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	0c1a      	lsrs	r2, r3, #16
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	3306      	adds	r3, #6
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	4413      	add	r3, r2
 800115c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0e1a      	lsrs	r2, r3, #24
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	3307      	adds	r3, #7
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d108      	bne.n	8001184 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0220 	orr.w	r2, r2, #32
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	e007      	b.n	8001194 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0220 	orr.w	r2, r2, #32
 8001192:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	e006      	b.n	80011a6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
  }
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d002      	beq.n	80011d0 <HAL_CAN_ActivateNotification+0x1e>
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d109      	bne.n	80011e4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6959      	ldr	r1, [r3, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e006      	b.n	80011f2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
  }
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b08a      	sub	sp, #40	; 0x28
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d07c      	beq.n	800133e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d023      	beq.n	8001296 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2201      	movs	r2, #1
 8001254:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f97d 	bl	8001560 <HAL_CAN_TxMailbox0CompleteCallback>
 8001266:	e016      	b.n	8001296 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	e00c      	b.n	8001296 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d004      	beq.n	8001290 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
 800128e:	e002      	b.n	8001296 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f983 	bl	800159c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d024      	beq.n	80012ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f95d 	bl	8001574 <HAL_CAN_TxMailbox1CompleteCallback>
 80012ba:	e016      	b.n	80012ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
 80012ce:	e00c      	b.n	80012ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
 80012e2:	e002      	b.n	80012ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f963 	bl	80015b0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d024      	beq.n	800133e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f93d 	bl	8001588 <HAL_CAN_TxMailbox2CompleteCallback>
 800130e:	e016      	b.n	800133e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
 8001322:	e00c      	b.n	800133e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	e002      	b.n	800133e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f943 	bl	80015c4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00c      	beq.n	8001362 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	2b00      	cmp	r3, #0
 8001350:	d007      	beq.n	8001362 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001358:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2210      	movs	r2, #16
 8001360:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00b      	beq.n	8001384 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d006      	beq.n	8001384 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2208      	movs	r2, #8
 800137c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f92a 	bl	80015d8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7fe ff3d 	bl	800021c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00c      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2210      	movs	r2, #16
 80013c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00b      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2208      	movs	r2, #8
 80013e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f90c 	bl	8001600 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d009      	beq.n	8001406 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f8f3 	bl	80015ec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2210      	movs	r2, #16
 8001420:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f8f6 	bl	8001614 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2208      	movs	r2, #8
 8001442:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f8ef 	bl	8001628 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d075      	beq.n	8001540 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	2b00      	cmp	r3, #0
 800145c:	d06c      	beq.n	8001538 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d03d      	beq.n	8001538 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d038      	beq.n	8001538 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014cc:	2b30      	cmp	r3, #48	; 0x30
 80014ce:	d017      	beq.n	8001500 <HAL_CAN_IRQHandler+0x302>
 80014d0:	2b30      	cmp	r3, #48	; 0x30
 80014d2:	d804      	bhi.n	80014de <HAL_CAN_IRQHandler+0x2e0>
 80014d4:	2b10      	cmp	r3, #16
 80014d6:	d009      	beq.n	80014ec <HAL_CAN_IRQHandler+0x2ee>
 80014d8:	2b20      	cmp	r3, #32
 80014da:	d00c      	beq.n	80014f6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80014dc:	e024      	b.n	8001528 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80014de:	2b50      	cmp	r3, #80	; 0x50
 80014e0:	d018      	beq.n	8001514 <HAL_CAN_IRQHandler+0x316>
 80014e2:	2b60      	cmp	r3, #96	; 0x60
 80014e4:	d01b      	beq.n	800151e <HAL_CAN_IRQHandler+0x320>
 80014e6:	2b40      	cmp	r3, #64	; 0x40
 80014e8:	d00f      	beq.n	800150a <HAL_CAN_IRQHandler+0x30c>
            break;
 80014ea:	e01d      	b.n	8001528 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014f4:	e018      	b.n	8001528 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	f043 0310 	orr.w	r3, r3, #16
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014fe:	e013      	b.n	8001528 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	f043 0320 	orr.w	r3, r3, #32
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001508:	e00e      	b.n	8001528 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001512:	e009      	b.n	8001528 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800151c:	e004      	b.n	8001528 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001526:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	699a      	ldr	r2, [r3, #24]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001536:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2204      	movs	r2, #4
 800153e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	2b00      	cmp	r3, #0
 8001544:	d008      	beq.n	8001558 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f872 	bl	800163c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	; 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4907      	ldr	r1, [pc, #28]	; (80016ec <__NVIC_EnableIRQ+0x38>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f7ff ff8e 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff29 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff3e 	bl	8001698 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff8e 	bl	8001744 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff31 	bl	80016b4 <__NVIC_EnableIRQ>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffa2 	bl	80017ac <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001882:	e14e      	b.n	8001b22 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8140 	beq.w	8001b1c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d005      	beq.n	80018b4 <HAL_GPIO_Init+0x40>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d130      	bne.n	8001916 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ea:	2201      	movs	r2, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	f003 0201 	and.w	r2, r3, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b03      	cmp	r3, #3
 8001920:	d017      	beq.n	8001952 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d123      	bne.n	80019a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	220f      	movs	r2, #15
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	6939      	ldr	r1, [r7, #16]
 80019a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0203 	and.w	r2, r3, #3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 809a 	beq.w	8001b1c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e8:	4b55      	ldr	r3, [pc, #340]	; (8001b40 <HAL_GPIO_Init+0x2cc>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a54      	ldr	r2, [pc, #336]	; (8001b40 <HAL_GPIO_Init+0x2cc>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b52      	ldr	r3, [pc, #328]	; (8001b40 <HAL_GPIO_Init+0x2cc>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a00:	4a50      	ldr	r2, [pc, #320]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a2a:	d013      	beq.n	8001a54 <HAL_GPIO_Init+0x1e0>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a46      	ldr	r2, [pc, #280]	; (8001b48 <HAL_GPIO_Init+0x2d4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d00d      	beq.n	8001a50 <HAL_GPIO_Init+0x1dc>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a45      	ldr	r2, [pc, #276]	; (8001b4c <HAL_GPIO_Init+0x2d8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d007      	beq.n	8001a4c <HAL_GPIO_Init+0x1d8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a44      	ldr	r2, [pc, #272]	; (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d101      	bne.n	8001a48 <HAL_GPIO_Init+0x1d4>
 8001a44:	2303      	movs	r3, #3
 8001a46:	e006      	b.n	8001a56 <HAL_GPIO_Init+0x1e2>
 8001a48:	2305      	movs	r3, #5
 8001a4a:	e004      	b.n	8001a56 <HAL_GPIO_Init+0x1e2>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e002      	b.n	8001a56 <HAL_GPIO_Init+0x1e2>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_GPIO_Init+0x1e2>
 8001a54:	2300      	movs	r3, #0
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	f002 0203 	and.w	r2, r2, #3
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	4093      	lsls	r3, r2
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a66:	4937      	ldr	r1, [pc, #220]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a74:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <HAL_GPIO_Init+0x2e0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a98:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <HAL_GPIO_Init+0x2e0>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_GPIO_Init+0x2e0>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ac2:	4a24      	ldr	r2, [pc, #144]	; (8001b54 <HAL_GPIO_Init+0x2e0>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac8:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <HAL_GPIO_Init+0x2e0>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <HAL_GPIO_Init+0x2e0>)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_GPIO_Init+0x2e0>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b16:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <HAL_GPIO_Init+0x2e0>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f47f aea9 	bne.w	8001884 <HAL_GPIO_Init+0x10>
  }
}
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	48000800 	.word	0x48000800
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
 8001b64:	4613      	mov	r3, r2
 8001b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b68:	787b      	ldrb	r3, [r7, #1]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b74:	e002      	b.n	8001b7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f000 bef4 	b.w	800298a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 816a 	beq.w	8001e86 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bb2:	4bb3      	ldr	r3, [pc, #716]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d00c      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bbe:	4bb0      	ldr	r3, [pc, #704]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d159      	bne.n	8001c7e <HAL_RCC_OscConfig+0xf6>
 8001bca:	4bad      	ldr	r3, [pc, #692]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd6:	d152      	bne.n	8001c7e <HAL_RCC_OscConfig+0xf6>
 8001bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bdc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_OscConfig+0x82>
 8001c04:	4b9e      	ldr	r3, [pc, #632]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	e015      	b.n	8001c36 <HAL_RCC_OscConfig+0xae>
 8001c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c22:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c26:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c32:	4b93      	ldr	r3, [pc, #588]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c3a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c3e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c42:	fa92 f2a2 	rbit	r2, r2
 8001c46:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c4a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c4e:	fab2 f282 	clz	r2, r2
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f042 0220 	orr.w	r2, r2, #32
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f002 021f 	and.w	r2, r2, #31
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 810c 	beq.w	8001e84 <HAL_RCC_OscConfig+0x2fc>
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 8106 	bne.w	8001e84 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f000 be86 	b.w	800298a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x110>
 8001c8a:	4b7d      	ldr	r3, [pc, #500]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a7c      	ldr	r2, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e030      	b.n	8001cfa <HAL_RCC_OscConfig+0x172>
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x134>
 8001ca2:	4b77      	ldr	r3, [pc, #476]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a76      	ldr	r2, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b74      	ldr	r3, [pc, #464]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a73      	ldr	r2, [pc, #460]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01e      	b.n	8001cfa <HAL_RCC_OscConfig+0x172>
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x15a>
 8001cc8:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a6c      	ldr	r2, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a69      	ldr	r2, [pc, #420]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCC_OscConfig+0x172>
 8001ce2:	4b67      	ldr	r3, [pc, #412]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a66      	ldr	r2, [pc, #408]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a63      	ldr	r2, [pc, #396]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cfa:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	f023 020f 	bic.w	r2, r3, #15
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	495d      	ldr	r1, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d059      	beq.n	8001dcc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe ff24 	bl	8000b64 <HAL_GetTick>
 8001d1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d22:	f7fe ff1f 	bl	8000b64 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d902      	bls.n	8001d38 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	f000 be29 	b.w	800298a <HAL_RCC_OscConfig+0xe02>
 8001d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d3c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d4c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d102      	bne.n	8001d6a <HAL_RCC_OscConfig+0x1e2>
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	e015      	b.n	8001d96 <HAL_RCC_OscConfig+0x20e>
 8001d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d82:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d86:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d9a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d9e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001da2:	fa92 f2a2 	rbit	r2, r2
 8001da6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001daa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001dae:	fab2 f282 	clz	r2, r2
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	f042 0220 	orr.w	r2, r2, #32
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f002 021f 	and.w	r2, r2, #31
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0ab      	beq.n	8001d22 <HAL_RCC_OscConfig+0x19a>
 8001dca:	e05c      	b.n	8001e86 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7fe feca 	bl	8000b64 <HAL_GetTick>
 8001dd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd6:	f7fe fec5 	bl	8000b64 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d902      	bls.n	8001dec <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	f000 bdcf 	b.w	800298a <HAL_RCC_OscConfig+0xe02>
 8001dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001e00:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_OscConfig+0x296>
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	e015      	b.n	8001e4a <HAL_RCC_OscConfig+0x2c2>
 8001e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e22:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e36:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e3a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_RCC_OscConfig+0x2f8>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e4e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e52:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e56:	fa92 f2a2 	rbit	r2, r2
 8001e5a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e5e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	f002 021f 	and.w	r2, r2, #31
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ab      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x24e>
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_OscConfig+0x2fe>
 8001e80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 816f 	beq.w	8002174 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e96:	4bd0      	ldr	r3, [pc, #832]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ea2:	4bcd      	ldr	r3, [pc, #820]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d16c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x400>
 8001eae:	4bca      	ldr	r3, [pc, #808]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d166      	bne.n	8001f88 <HAL_RCC_OscConfig+0x400>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ecc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d102      	bne.n	8001eea <HAL_RCC_OscConfig+0x362>
 8001ee4:	4bbc      	ldr	r3, [pc, #752]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	e013      	b.n	8001f12 <HAL_RCC_OscConfig+0x38a>
 8001eea:	2302      	movs	r3, #2
 8001eec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f0e:	4bb2      	ldr	r3, [pc, #712]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	2202      	movs	r2, #2
 8001f14:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f18:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f1c:	fa92 f2a2 	rbit	r2, r2
 8001f20:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f24:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f28:	fab2 f282 	clz	r2, r2
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	f042 0220 	orr.w	r2, r2, #32
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	f002 021f 	and.w	r2, r2, #31
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_RCC_OscConfig+0x3cc>
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d002      	beq.n	8001f54 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f000 bd1b 	b.w	800298a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	4ba0      	ldr	r3, [pc, #640]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	21f8      	movs	r1, #248	; 0xf8
 8001f64:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f6c:	fa91 f1a1 	rbit	r1, r1
 8001f70:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f74:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f78:	fab1 f181 	clz	r1, r1
 8001f7c:	b2c9      	uxtb	r1, r1
 8001f7e:	408b      	lsls	r3, r1
 8001f80:	4995      	ldr	r1, [pc, #596]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	e0f5      	b.n	8002174 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8085 	beq.w	800209e <HAL_RCC_OscConfig+0x516>
 8001f94:	2301      	movs	r3, #1
 8001f96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001fa6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe fdd0 	bl	8000b64 <HAL_GetTick>
 8001fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fca:	f7fe fdcb 	bl	8000b64 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d902      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	f000 bcd5 	b.w	800298a <HAL_RCC_OscConfig+0xe02>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ff2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d102      	bne.n	8002010 <HAL_RCC_OscConfig+0x488>
 800200a:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	e013      	b.n	8002038 <HAL_RCC_OscConfig+0x4b0>
 8002010:	2302      	movs	r3, #2
 8002012:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002028:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002034:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	2202      	movs	r2, #2
 800203a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800203e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002042:	fa92 f2a2 	rbit	r2, r2
 8002046:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800204a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800204e:	fab2 f282 	clz	r2, r2
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f042 0220 	orr.w	r2, r2, #32
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f002 021f 	and.w	r2, r2, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0af      	beq.n	8001fca <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b5b      	ldr	r3, [pc, #364]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	21f8      	movs	r1, #248	; 0xf8
 800207a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002082:	fa91 f1a1 	rbit	r1, r1
 8002086:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800208a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800208e:	fab1 f181 	clz	r1, r1
 8002092:	b2c9      	uxtb	r1, r1
 8002094:	408b      	lsls	r3, r1
 8002096:	4950      	ldr	r1, [pc, #320]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
 800209c:	e06a      	b.n	8002174 <HAL_RCC_OscConfig+0x5ec>
 800209e:	2301      	movs	r3, #1
 80020a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80020b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	461a      	mov	r2, r3
 80020c6:	2300      	movs	r3, #0
 80020c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7fe fd4b 	bl	8000b64 <HAL_GetTick>
 80020ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d4:	f7fe fd46 	bl	8000b64 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d902      	bls.n	80020ea <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	f000 bc50 	b.w	800298a <HAL_RCC_OscConfig+0xe02>
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80020fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d102      	bne.n	800211a <HAL_RCC_OscConfig+0x592>
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	e013      	b.n	8002142 <HAL_RCC_OscConfig+0x5ba>
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800212c:	2302      	movs	r3, #2
 800212e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002132:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_RCC_OscConfig+0x650>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	2202      	movs	r2, #2
 8002144:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002148:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002154:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002158:	fab2 f282 	clz	r2, r2
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	f042 0220 	orr.w	r2, r2, #32
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	f002 021f 	and.w	r2, r2, #31
 8002168:	2101      	movs	r1, #1
 800216a:	fa01 f202 	lsl.w	r2, r1, r2
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1af      	bne.n	80020d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80da 	beq.w	8002338 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d069      	beq.n	8002262 <HAL_RCC_OscConfig+0x6da>
 800218e:	2301      	movs	r3, #1
 8002190:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80021a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x654>)
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	461a      	mov	r2, r3
 80021b4:	2301      	movs	r3, #1
 80021b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7fe fcd4 	bl	8000b64 <HAL_GetTick>
 80021bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c0:	e00e      	b.n	80021e0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c2:	f7fe fccf 	bl	8000b64 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d906      	bls.n	80021e0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e3d9      	b.n	800298a <HAL_RCC_OscConfig+0xe02>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	10908120 	.word	0x10908120
 80021e0:	2302      	movs	r3, #2
 80021e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021f6:	2202      	movs	r2, #2
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	fa93 f2a3 	rbit	r2, r3
 8002204:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002220:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002222:	4ba5      	ldr	r3, [pc, #660]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 8002224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002226:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800222a:	2102      	movs	r1, #2
 800222c:	6019      	str	r1, [r3, #0]
 800222e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	fa93 f1a3 	rbit	r1, r3
 8002238:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800223c:	6019      	str	r1, [r3, #0]
  return result;
 800223e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0b0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x63a>
 8002260:	e06a      	b.n	8002338 <HAL_RCC_OscConfig+0x7b0>
 8002262:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	fa93 f2a3 	rbit	r2, r3
 8002274:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002278:	601a      	str	r2, [r3, #0]
  return result;
 800227a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800227e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	4b8c      	ldr	r3, [pc, #560]	; (80024bc <HAL_RCC_OscConfig+0x934>)
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	461a      	mov	r2, r3
 8002290:	2300      	movs	r3, #0
 8002292:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7fe fc66 	bl	8000b64 <HAL_GetTick>
 8002298:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	e009      	b.n	80022b2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229e:	f7fe fc61 	bl	8000b64 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e36b      	b.n	800298a <HAL_RCC_OscConfig+0xe02>
 80022b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	fa93 f2a3 	rbit	r2, r3
 80022c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022ce:	2202      	movs	r2, #2
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f2a3 	rbit	r2, r3
 80022dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022e6:	2202      	movs	r2, #2
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fa93 f2a3 	rbit	r2, r3
 80022f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fa:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 80022fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002302:	2102      	movs	r1, #2
 8002304:	6019      	str	r1, [r3, #0]
 8002306:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f1a3 	rbit	r1, r3
 8002310:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002314:	6019      	str	r1, [r3, #0]
  return result;
 8002316:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1b2      	bne.n	800229e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8158 	beq.w	80025f8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234e:	4b5a      	ldr	r3, [pc, #360]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d112      	bne.n	8002380 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	4b57      	ldr	r3, [pc, #348]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a56      	ldr	r2, [pc, #344]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	61d3      	str	r3, [r2, #28]
 8002366:	4b54      	ldr	r3, [pc, #336]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800236e:	f107 0308 	add.w	r3, r7, #8
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f107 0308 	add.w	r3, r7, #8
 8002378:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800237a:	2301      	movs	r3, #1
 800237c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b4f      	ldr	r3, [pc, #316]	; (80024c0 <HAL_RCC_OscConfig+0x938>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d11a      	bne.n	80023c2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238c:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <HAL_RCC_OscConfig+0x938>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a4b      	ldr	r2, [pc, #300]	; (80024c0 <HAL_RCC_OscConfig+0x938>)
 8002392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002396:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002398:	f7fe fbe4 	bl	8000b64 <HAL_GetTick>
 800239c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	e009      	b.n	80023b6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a2:	f7fe fbdf 	bl	8000b64 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e2e9      	b.n	800298a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b42      	ldr	r3, [pc, #264]	; (80024c0 <HAL_RCC_OscConfig+0x938>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0ef      	beq.n	80023a2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x852>
 80023cc:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a39      	ldr	r2, [pc, #228]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	e02f      	b.n	800243a <HAL_RCC_OscConfig+0x8b2>
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x876>
 80023e4:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a33      	ldr	r2, [pc, #204]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a30      	ldr	r2, [pc, #192]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 80023f6:	f023 0304 	bic.w	r3, r3, #4
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e01d      	b.n	800243a <HAL_RCC_OscConfig+0x8b2>
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0x89a>
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a2a      	ldr	r2, [pc, #168]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4a27      	ldr	r2, [pc, #156]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6213      	str	r3, [r2, #32]
 8002420:	e00b      	b.n	800243a <HAL_RCC_OscConfig+0x8b2>
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d06b      	beq.n	800251c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002444:	f7fe fb8e 	bl	8000b64 <HAL_GetTick>
 8002448:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fb89 	bl	8000b64 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e291      	b.n	800298a <HAL_RCC_OscConfig+0xe02>
 8002466:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800246a:	2202      	movs	r2, #2
 800246c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	fa93 f2a3 	rbit	r2, r3
 8002478:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002482:	2202      	movs	r2, #2
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	fa93 f2a3 	rbit	r2, r3
 8002490:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002494:	601a      	str	r2, [r3, #0]
  return result;
 8002496:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800249a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d109      	bne.n	80024c4 <HAL_RCC_OscConfig+0x93c>
 80024b0:	4b01      	ldr	r3, [pc, #4]	; (80024b8 <HAL_RCC_OscConfig+0x930>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x958>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	10908120 	.word	0x10908120
 80024c0:	40007000 	.word	0x40007000
 80024c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024c8:	2202      	movs	r2, #2
 80024ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	4bbb      	ldr	r3, [pc, #748]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024e4:	2102      	movs	r1, #2
 80024e6:	6011      	str	r1, [r2, #0]
 80024e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	fa92 f1a2 	rbit	r1, r2
 80024f2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80024f6:	6011      	str	r1, [r2, #0]
  return result;
 80024f8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	fab2 f282 	clz	r2, r2
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f002 021f 	and.w	r2, r2, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d099      	beq.n	800244e <HAL_RCC_OscConfig+0x8c6>
 800251a:	e063      	b.n	80025e4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7fe fb22 	bl	8000b64 <HAL_GetTick>
 8002520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	e00b      	b.n	800253e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe fb1d 	bl	8000b64 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f241 3288 	movw	r2, #5000	; 0x1388
 8002536:	4293      	cmp	r3, r2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e225      	b.n	800298a <HAL_RCC_OscConfig+0xe02>
 800253e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002542:	2202      	movs	r2, #2
 8002544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	fa93 f2a3 	rbit	r2, r3
 8002550:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800255a:	2202      	movs	r2, #2
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800256c:	601a      	str	r2, [r3, #0]
  return result;
 800256e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002572:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f043 0302 	orr.w	r3, r3, #2
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d102      	bne.n	800258e <HAL_RCC_OscConfig+0xa06>
 8002588:	4b90      	ldr	r3, [pc, #576]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	e00d      	b.n	80025aa <HAL_RCC_OscConfig+0xa22>
 800258e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002592:	2202      	movs	r2, #2
 8002594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	4b89      	ldr	r3, [pc, #548]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025ae:	2102      	movs	r1, #2
 80025b0:	6011      	str	r1, [r2, #0]
 80025b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	fa92 f1a2 	rbit	r1, r2
 80025bc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80025c0:	6011      	str	r1, [r2, #0]
  return result;
 80025c2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	fab2 f282 	clz	r2, r2
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	f002 021f 	and.w	r2, r2, #31
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1a0      	bne.n	8002526 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b77      	ldr	r3, [pc, #476]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4a76      	ldr	r2, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 81c2 	beq.w	8002988 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002604:	4b71      	ldr	r3, [pc, #452]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	f000 819c 	beq.w	800294a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b02      	cmp	r3, #2
 800261a:	f040 8114 	bne.w	8002846 <HAL_RCC_OscConfig+0xcbe>
 800261e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002622:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	fa93 f2a3 	rbit	r2, r3
 8002632:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002636:	601a      	str	r2, [r3, #0]
  return result;
 8002638:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800263c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002648:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	461a      	mov	r2, r3
 8002650:	2300      	movs	r3, #0
 8002652:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fe fa86 	bl	8000b64 <HAL_GetTick>
 8002658:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265c:	e009      	b.n	8002672 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265e:	f7fe fa81 	bl	8000b64 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e18b      	b.n	800298a <HAL_RCC_OscConfig+0xe02>
 8002672:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002676:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800267a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fa93 f2a3 	rbit	r2, r3
 8002686:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800268a:	601a      	str	r2, [r3, #0]
  return result;
 800268c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002690:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d102      	bne.n	80026ac <HAL_RCC_OscConfig+0xb24>
 80026a6:	4b49      	ldr	r3, [pc, #292]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	e01b      	b.n	80026e4 <HAL_RCC_OscConfig+0xb5c>
 80026ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	fa93 f2a3 	rbit	r2, r3
 80026da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	4b3a      	ldr	r3, [pc, #232]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026ec:	6011      	str	r1, [r2, #0]
 80026ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	fa92 f1a2 	rbit	r1, r2
 80026f8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80026fc:	6011      	str	r1, [r2, #0]
  return result;
 80026fe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	fab2 f282 	clz	r2, r2
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	f042 0220 	orr.w	r2, r2, #32
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f002 021f 	and.w	r2, r2, #31
 8002714:	2101      	movs	r1, #1
 8002716:	fa01 f202 	lsl.w	r2, r1, r2
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d19e      	bne.n	800265e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002720:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	430b      	orrs	r3, r1
 8002736:	4925      	ldr	r1, [pc, #148]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
 800273c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	fa93 f2a3 	rbit	r2, r3
 8002750:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002754:	601a      	str	r2, [r3, #0]
  return result;
 8002756:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800275a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002766:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	461a      	mov	r2, r3
 800276e:	2301      	movs	r3, #1
 8002770:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe f9f7 	bl	8000b64 <HAL_GetTick>
 8002776:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800277a:	e009      	b.n	8002790 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe f9f2 	bl	8000b64 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0fc      	b.n	800298a <HAL_RCC_OscConfig+0xe02>
 8002790:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fa93 f2a3 	rbit	r2, r3
 80027a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027a8:	601a      	str	r2, [r3, #0]
  return result;
 80027aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d105      	bne.n	80027d0 <HAL_RCC_OscConfig+0xc48>
 80027c4:	4b01      	ldr	r3, [pc, #4]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	e01e      	b.n	8002808 <HAL_RCC_OscConfig+0xc80>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	fa93 f2a3 	rbit	r2, r3
 80027e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	fa93 f2a3 	rbit	r2, r3
 80027fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	4b63      	ldr	r3, [pc, #396]	; (8002994 <HAL_RCC_OscConfig+0xe0c>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800280c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002810:	6011      	str	r1, [r2, #0]
 8002812:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fa92 f1a2 	rbit	r1, r2
 800281c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002820:	6011      	str	r1, [r2, #0]
  return result;
 8002822:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	fab2 f282 	clz	r2, r2
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f042 0220 	orr.w	r2, r2, #32
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f002 021f 	and.w	r2, r2, #31
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d09b      	beq.n	800277c <HAL_RCC_OscConfig+0xbf4>
 8002844:	e0a0      	b.n	8002988 <HAL_RCC_OscConfig+0xe00>
 8002846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800284a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800284e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285e:	601a      	str	r2, [r3, #0]
  return result;
 8002860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002864:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002870:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	461a      	mov	r2, r3
 8002878:	2300      	movs	r3, #0
 800287a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe f972 	bl	8000b64 <HAL_GetTick>
 8002880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	e009      	b.n	800289a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe f96d 	bl	8000b64 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e077      	b.n	800298a <HAL_RCC_OscConfig+0xe02>
 800289a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800289e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	fa93 f2a3 	rbit	r2, r3
 80028ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b2:	601a      	str	r2, [r3, #0]
  return result;
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_OscConfig+0xd4c>
 80028ce:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCC_OscConfig+0xe0c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	e01b      	b.n	800290c <HAL_RCC_OscConfig+0xd84>
 80028d4:	f107 0320 	add.w	r3, r7, #32
 80028d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f107 0320 	add.w	r3, r7, #32
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f107 0318 	add.w	r3, r7, #24
 80028f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	f107 0318 	add.w	r3, r7, #24
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f2a3 	rbit	r2, r3
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_RCC_OscConfig+0xe0c>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f107 0210 	add.w	r2, r7, #16
 8002910:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002914:	6011      	str	r1, [r2, #0]
 8002916:	f107 0210 	add.w	r2, r7, #16
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	fa92 f1a2 	rbit	r1, r2
 8002920:	f107 020c 	add.w	r2, r7, #12
 8002924:	6011      	str	r1, [r2, #0]
  return result;
 8002926:	f107 020c 	add.w	r2, r7, #12
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f042 0220 	orr.w	r2, r2, #32
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f002 021f 	and.w	r2, r2, #31
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d19e      	bne.n	8002886 <HAL_RCC_OscConfig+0xcfe>
 8002948:	e01e      	b.n	8002988 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e018      	b.n	800298a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_RCC_OscConfig+0xe0c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002960:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002964:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	429a      	cmp	r2, r3
 8002970:	d108      	bne.n	8002984 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002972:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002976:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000

08002998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b09e      	sub	sp, #120	; 0x78
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e162      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b90      	ldr	r3, [pc, #576]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d910      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b8d      	ldr	r3, [pc, #564]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	498b      	ldr	r1, [pc, #556]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b89      	ldr	r3, [pc, #548]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e14a      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b82      	ldr	r3, [pc, #520]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	497f      	ldr	r1, [pc, #508]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80dc 	beq.w	8002bc4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d13c      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xf6>
 8002a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d102      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xa6>
 8002a38:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	e00f      	b.n	8002a5e <HAL_RCC_ClockConfig+0xc6>
 8002a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a50:	663b      	str	r3, [r7, #96]	; 0x60
 8002a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a5a:	4b67      	ldr	r3, [pc, #412]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a62:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a66:	fa92 f2a2 	rbit	r2, r2
 8002a6a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a6e:	fab2 f282 	clz	r2, r2
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f042 0220 	orr.w	r2, r2, #32
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f002 021f 	and.w	r2, r2, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d17b      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0f3      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d13c      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x178>
 8002a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d102      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x128>
 8002aba:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	e00f      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
 8002ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002adc:	4b46      	ldr	r3, [pc, #280]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ae8:	fa92 f2a2 	rbit	r2, r2
 8002aec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af0:	fab2 f282 	clz	r2, r2
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f042 0220 	orr.w	r2, r2, #32
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f002 021f 	and.w	r2, r2, #31
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f202 	lsl.w	r2, r1, r2
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d13a      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0b2      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
 8002b10:	2302      	movs	r3, #2
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d102      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x1a0>
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e00d      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1bc>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
 8002b44:	2302      	movs	r3, #2
 8002b46:	623b      	str	r3, [r7, #32]
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	61fb      	str	r3, [r7, #28]
 8002b50:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	2202      	movs	r2, #2
 8002b56:	61ba      	str	r2, [r7, #24]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	fa92 f2a2 	rbit	r2, r2
 8002b5e:	617a      	str	r2, [r7, #20]
  return result;
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	fab2 f282 	clz	r2, r2
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	f042 0220 	orr.w	r2, r2, #32
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	f002 021f 	and.w	r2, r2, #31
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f202 	lsl.w	r2, r1, r2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e079      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	491a      	ldr	r1, [pc, #104]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b94:	f7fd ffe6 	bl	8000b64 <HAL_GetTick>
 8002b98:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9c:	f7fd ffe2 	bl	8000b64 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e061      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 020c 	and.w	r2, r3, #12
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1eb      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d214      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	4906      	ldr	r1, [pc, #24]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e040      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
 8002bf4:	40022000 	.word	0x40022000
 8002bf8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <HAL_RCC_ClockConfig+0x2e8>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	491a      	ldr	r1, [pc, #104]	; (8002c80 <HAL_RCC_ClockConfig+0x2e8>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_RCC_ClockConfig+0x2e8>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4912      	ldr	r1, [pc, #72]	; (8002c80 <HAL_RCC_ClockConfig+0x2e8>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c3a:	f000 f829 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4601      	mov	r1, r0
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <HAL_RCC_ClockConfig+0x2e8>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c48:	22f0      	movs	r2, #240	; 0xf0
 8002c4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	fa92 f2a2 	rbit	r2, r2
 8002c52:	60fa      	str	r2, [r7, #12]
  return result;
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	fab2 f282 	clz	r2, r2
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	40d3      	lsrs	r3, r2
 8002c5e:	4a09      	ldr	r2, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x2ec>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	fa21 f303 	lsr.w	r3, r1, r3
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_RCC_ClockConfig+0x2f0>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_RCC_ClockConfig+0x2f4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd ff34 	bl	8000adc <HAL_InitTick>
  
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3778      	adds	r7, #120	; 0x78
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	08003684 	.word	0x08003684
 8002c88:	20000030 	.word	0x20000030
 8002c8c:	20000034 	.word	0x20000034

08002c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b08b      	sub	sp, #44	; 0x2c
 8002c94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002caa:	4b29      	ldr	r3, [pc, #164]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d002      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x30>
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cbe:	e03c      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cc0:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cc2:	623b      	str	r3, [r7, #32]
      break;
 8002cc4:	e03c      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ccc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cd0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	fa92 f2a2 	rbit	r2, r2
 8002cd8:	607a      	str	r2, [r7, #4]
  return result;
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	fab2 f282 	clz	r2, r2
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	40d3      	lsrs	r3, r2
 8002ce4:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cea:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	fa92 f2a2 	rbit	r2, r2
 8002cfc:	60fa      	str	r2, [r7, #12]
  return result;
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	fab2 f282 	clz	r2, r2
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	40d3      	lsrs	r3, r2
 8002d08:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d0a:	5cd3      	ldrb	r3, [r2, r3]
 8002d0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d18:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	e004      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	623b      	str	r3, [r7, #32]
      break;
 8002d38:	e002      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d3c:	623b      	str	r3, [r7, #32]
      break;
 8002d3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	372c      	adds	r7, #44	; 0x2c
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	007a1200 	.word	0x007a1200
 8002d58:	08003694 	.word	0x08003694
 8002d5c:	080036a4 	.word	0x080036a4
 8002d60:	003d0900 	.word	0x003d0900

08002d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e049      	b.n	8002e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fdf2 	bl	8000974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f000 fa98 	bl	80032d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d001      	beq.n	8002e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e040      	b.n	8002eae <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_TIM_Base_Start_IT+0xa8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00e      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x58>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e56:	d009      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x58>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_TIM_Base_Start_IT+0xac>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x58>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d115      	bne.n	8002e98 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d015      	beq.n	8002eaa <HAL_TIM_Base_Start_IT+0x96>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e84:	d011      	beq.n	8002eaa <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e96:	e008      	b.n	8002eaa <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e000      	b.n	8002eac <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40014000 	.word	0x40014000
 8002ec8:	00010007 	.word	0x00010007

08002ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d122      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d11b      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0202 	mvn.w	r2, #2
 8002ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f9c3 	bl	800329a <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f9b5 	bl	8003286 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f9c6 	bl	80032ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d122      	bne.n	8002f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d11b      	bne.n	8002f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0204 	mvn.w	r2, #4
 8002f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f999 	bl	800329a <HAL_TIM_IC_CaptureCallback>
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f98b 	bl	8003286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f99c 	bl	80032ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d122      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d11b      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0208 	mvn.w	r2, #8
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f96f 	bl	800329a <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f961 	bl	8003286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f972 	bl	80032ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d122      	bne.n	8003024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0210 	mvn.w	r2, #16
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f945 	bl	800329a <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f937 	bl	8003286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f948 	bl	80032ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10e      	bne.n	8003050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d107      	bne.n	8003050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0201 	mvn.w	r2, #1
 8003048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd f9c6 	bl	80003dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b80      	cmp	r3, #128	; 0x80
 800305c:	d10e      	bne.n	800307c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003068:	2b80      	cmp	r3, #128	; 0x80
 800306a:	d107      	bne.n	800307c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fab8 	bl	80035ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308a:	d10e      	bne.n	80030aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b80      	cmp	r3, #128	; 0x80
 8003098:	d107      	bne.n	80030aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 faab 	bl	8003600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d10e      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d107      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f8f6 	bl	80032c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d10e      	bne.n	8003102 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d107      	bne.n	8003102 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f06f 0220 	mvn.w	r2, #32
 80030fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fa6b 	bl	80035d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_TIM_ConfigClockSource+0x1c>
 8003122:	2302      	movs	r3, #2
 8003124:	e0ab      	b.n	800327e <HAL_TIM_ConfigClockSource+0x174>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003144:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003148:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003150:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d067      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x128>
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d80b      	bhi.n	800317e <HAL_TIM_ConfigClockSource+0x74>
 8003166:	2b10      	cmp	r3, #16
 8003168:	d073      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x148>
 800316a:	2b10      	cmp	r3, #16
 800316c:	d802      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x6a>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d06f      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x148>
 8003172:	e077      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x15a>
 8003174:	2b20      	cmp	r3, #32
 8003176:	d06c      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x148>
 8003178:	2b30      	cmp	r3, #48	; 0x30
 800317a:	d06a      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x148>
 800317c:	e072      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x15a>
 800317e:	2b70      	cmp	r3, #112	; 0x70
 8003180:	d00d      	beq.n	800319e <HAL_TIM_ConfigClockSource+0x94>
 8003182:	2b70      	cmp	r3, #112	; 0x70
 8003184:	d804      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x86>
 8003186:	2b50      	cmp	r3, #80	; 0x50
 8003188:	d033      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0xe8>
 800318a:	2b60      	cmp	r3, #96	; 0x60
 800318c:	d041      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x108>
 800318e:	e069      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x15a>
 8003190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003194:	d069      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x160>
 8003196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319a:	d017      	beq.n	80031cc <HAL_TIM_ConfigClockSource+0xc2>
 800319c:	e062      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6899      	ldr	r1, [r3, #8]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f000 f985 	bl	80034bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	609a      	str	r2, [r3, #8]
      break;
 80031ca:	e04f      	b.n	800326c <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f000 f96e 	bl	80034bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ee:	609a      	str	r2, [r3, #8]
      break;
 80031f0:	e03c      	b.n	800326c <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	461a      	mov	r2, r3
 8003200:	f000 f8e2 	bl	80033c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2150      	movs	r1, #80	; 0x50
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f93b 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8003210:	e02c      	b.n	800326c <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	461a      	mov	r2, r3
 8003220:	f000 f901 	bl	8003426 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2160      	movs	r1, #96	; 0x60
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f92b 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8003230:	e01c      	b.n	800326c <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	461a      	mov	r2, r3
 8003240:	f000 f8c2 	bl	80033c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2140      	movs	r1, #64	; 0x40
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f91b 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8003250:	e00c      	b.n	800326c <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4619      	mov	r1, r3
 800325c:	4610      	mov	r0, r2
 800325e:	f000 f912 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8003262:	e003      	b.n	800326c <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      break;
 8003268:	e000      	b.n	800326c <HAL_TIM_ConfigClockSource+0x162>
      break;
 800326a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800327c:	7bfb      	ldrb	r3, [r7, #15]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a32      	ldr	r2, [pc, #200]	; (80033b4 <TIM_Base_SetConfig+0xdc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_Base_SetConfig+0x28>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x28>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a2f      	ldr	r2, [pc, #188]	; (80033b8 <TIM_Base_SetConfig+0xe0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <TIM_Base_SetConfig+0xdc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <TIM_Base_SetConfig+0x6a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d00f      	beq.n	8003342 <TIM_Base_SetConfig+0x6a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a24      	ldr	r2, [pc, #144]	; (80033b8 <TIM_Base_SetConfig+0xe0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0x6a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a23      	ldr	r2, [pc, #140]	; (80033bc <TIM_Base_SetConfig+0xe4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0x6a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <TIM_Base_SetConfig+0xe8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0x6a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a21      	ldr	r2, [pc, #132]	; (80033c4 <TIM_Base_SetConfig+0xec>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d108      	bne.n	8003354 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <TIM_Base_SetConfig+0xdc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00b      	beq.n	8003398 <TIM_Base_SetConfig+0xc0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <TIM_Base_SetConfig+0xe4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <TIM_Base_SetConfig+0xc0>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <TIM_Base_SetConfig+0xe8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0xc0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <TIM_Base_SetConfig+0xec>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d103      	bne.n	80033a0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	615a      	str	r2, [r3, #20]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40014400 	.word	0x40014400
 80033c4:	40014800 	.word	0x40014800

080033c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 030a 	bic.w	r3, r3, #10
 8003404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003426:	b480      	push	{r7}
 8003428:	b087      	sub	sp, #28
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0210 	bic.w	r2, r3, #16
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	031b      	lsls	r3, r3, #12
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f043 0307 	orr.w	r3, r3, #7
 80034a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	021a      	lsls	r2, r3, #8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	431a      	orrs	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	609a      	str	r2, [r3, #8]
}
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003510:	2302      	movs	r3, #2
 8003512:	e054      	b.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d108      	bne.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003544:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357c:	d009      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a11      	ldr	r2, [pc, #68]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d10c      	bne.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40012c00 	.word	0x40012c00
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40014000 	.word	0x40014000

080035d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <__libc_init_array>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	4e0d      	ldr	r6, [pc, #52]	; (800364c <__libc_init_array+0x38>)
 8003618:	4c0d      	ldr	r4, [pc, #52]	; (8003650 <__libc_init_array+0x3c>)
 800361a:	1ba4      	subs	r4, r4, r6
 800361c:	10a4      	asrs	r4, r4, #2
 800361e:	2500      	movs	r5, #0
 8003620:	42a5      	cmp	r5, r4
 8003622:	d109      	bne.n	8003638 <__libc_init_array+0x24>
 8003624:	4e0b      	ldr	r6, [pc, #44]	; (8003654 <__libc_init_array+0x40>)
 8003626:	4c0c      	ldr	r4, [pc, #48]	; (8003658 <__libc_init_array+0x44>)
 8003628:	f000 f820 	bl	800366c <_init>
 800362c:	1ba4      	subs	r4, r4, r6
 800362e:	10a4      	asrs	r4, r4, #2
 8003630:	2500      	movs	r5, #0
 8003632:	42a5      	cmp	r5, r4
 8003634:	d105      	bne.n	8003642 <__libc_init_array+0x2e>
 8003636:	bd70      	pop	{r4, r5, r6, pc}
 8003638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800363c:	4798      	blx	r3
 800363e:	3501      	adds	r5, #1
 8003640:	e7ee      	b.n	8003620 <__libc_init_array+0xc>
 8003642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003646:	4798      	blx	r3
 8003648:	3501      	adds	r5, #1
 800364a:	e7f2      	b.n	8003632 <__libc_init_array+0x1e>
 800364c:	080036b4 	.word	0x080036b4
 8003650:	080036b4 	.word	0x080036b4
 8003654:	080036b4 	.word	0x080036b4
 8003658:	080036b8 	.word	0x080036b8

0800365c <memset>:
 800365c:	4402      	add	r2, r0
 800365e:	4603      	mov	r3, r0
 8003660:	4293      	cmp	r3, r2
 8003662:	d100      	bne.n	8003666 <memset+0xa>
 8003664:	4770      	bx	lr
 8003666:	f803 1b01 	strb.w	r1, [r3], #1
 800366a:	e7f9      	b.n	8003660 <memset+0x4>

0800366c <_init>:
 800366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366e:	bf00      	nop
 8003670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003672:	bc08      	pop	{r3}
 8003674:	469e      	mov	lr, r3
 8003676:	4770      	bx	lr

08003678 <_fini>:
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	bf00      	nop
 800367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367e:	bc08      	pop	{r3}
 8003680:	469e      	mov	lr, r3
 8003682:	4770      	bx	lr
