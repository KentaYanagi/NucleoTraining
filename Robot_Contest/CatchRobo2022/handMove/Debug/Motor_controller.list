
Motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002894  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a4c  08002a4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a4c  08002a4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a4c  08002a4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000090  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097cd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015b9  00000000  00000000  00029809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  0002adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b8  00000000  00000000  0002b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a8e9  00000000  00000000  0002bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a840  00000000  00000000  000468c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fac2  00000000  00000000  00051109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f0bcb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026ec  00000000  00000000  000f0c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a04 	.word	0x08002a04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002a04 	.word	0x08002a04

080001c8 <HAL_TIM_PeriodElapsedCallback>:
float precnt = 0;
long overflowcnt = 0;
const long CntPeriod = 65535;
long Location;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80001d8:	d116      	bne.n	8000208 <HAL_TIM_PeriodElapsedCallback+0x40>
		__HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f06f 0201 	mvn.w	r2, #1
 80001e2:	611a      	str	r2, [r3, #16]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 80001e4:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f003 0310 	and.w	r3, r3, #16
 80001ee:	2b10      	cmp	r3, #16
 80001f0:	d105      	bne.n	80001fe <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			overflowcnt --;
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	3b01      	subs	r3, #1
 80001f8:	4a07      	ldr	r2, [pc, #28]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80001fa:	6013      	str	r3, [r2, #0]
		else
		{
			overflowcnt ++;
		}
	}
}
 80001fc:	e004      	b.n	8000208 <HAL_TIM_PeriodElapsedCallback+0x40>
			overflowcnt ++;
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	3301      	adds	r3, #1
 8000204:	4a04      	ldr	r2, [pc, #16]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	20000028 	.word	0x20000028
 8000218:	2000008c 	.word	0x2000008c

0800021c <Rotate_PID>:
	//ÂàùÊúüÂåñ„Åô?øΩ?
	Location = 0;//ÁèæÂú®Âú∞?øΩ?0„Å´
	goal = target;
	return 0;
}
float Rotate_PID(float _now, float _goal){
 800021c:	b480      	push	{r7}
 800021e:	b087      	sub	sp, #28
 8000220:	af00      	add	r7, sp, #0
 8000222:	ed87 0a01 	vstr	s0, [r7, #4]
 8000226:	edc7 0a00 	vstr	s1, [r7]
	  float ValueDif = _goal - _now;
 800022a:	ed97 7a00 	vldr	s14, [r7]
 800022e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000236:	edc7 7a05 	vstr	s15, [r7, #20]
	  SumValueDif += ValueDif;
 800023a:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <Rotate_PID+0x90>)
 800023c:	ed93 7a00 	vldr	s14, [r3]
 8000240:	edd7 7a05 	vldr	s15, [r7, #20]
 8000244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <Rotate_PID+0x90>)
 800024a:	edc3 7a00 	vstr	s15, [r3]
	  float DValueDif = ValueDif - PreValueDif;
 800024e:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <Rotate_PID+0x94>)
 8000250:	edd3 7a00 	vldr	s15, [r3]
 8000254:	ed97 7a05 	vldr	s14, [r7, #20]
 8000258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800025c:	edc7 7a04 	vstr	s15, [r7, #16]
	  float output = Kp * ValueDif + Ki * SumValueDif + Kd * DValueDif;
 8000260:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000264:	edd7 7a05 	vldr	s15, [r7, #20]
 8000268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800026c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <Rotate_PID+0x90>)
 8000272:	edd3 7a00 	vldr	s15, [r3]
 8000276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800027a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800027e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000282:	edd7 7a04 	vldr	s15, [r7, #16]
 8000286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800028a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800028e:	edc7 7a03 	vstr	s15, [r7, #12]
	  PreValueDif = ValueDif;
 8000292:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <Rotate_PID+0x94>)
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	6013      	str	r3, [r2, #0]
	  return output;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	ee07 3a90 	vmov	s15, r3
}
 800029e:	eeb0 0a67 	vmov.f32	s0, s15
 80002a2:	371c      	adds	r7, #28
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	20000078 	.word	0x20000078
 80002b0:	20000074 	.word	0x20000074

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b8:	f000 fa2c 	bl	8000714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002bc:	f000 f866 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c0:	f000 f8f4 	bl	80004ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80002c4:	f000 f89e 	bl	8000404 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80002c8:	213c      	movs	r1, #60	; 0x3c
 80002ca:	4828      	ldr	r0, [pc, #160]	; (800036c <main+0xb8>)
 80002cc:	f002 f86e 	bl	80023ac <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80002d0:	4826      	ldr	r0, [pc, #152]	; (800036c <main+0xb8>)
 80002d2:	f001 ff69 	bl	80021a8 <HAL_TIM_Base_Start_IT>
  //char scnt[100];
  overflowcnt = 0;
 80002d6:	4b26      	ldr	r3, [pc, #152]	; (8000370 <main+0xbc>)
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  cnt = (long)(overflowcnt) * CntPeriod + (long)TIM2 -> CNT;//ÁèæÂú®„ÅÆcnt„ÇíÊõ¥Êñ∞„Åô„Çã
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <main+0xbc>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002e4:	fb02 f303 	mul.w	r3, r2, r3
 80002e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80002ee:	4413      	add	r3, r2
 80002f0:	4a20      	ldr	r2, [pc, #128]	; (8000374 <main+0xc0>)
 80002f2:	6013      	str	r3, [r2, #0]
	  if(movingFlag == 1){
 80002f4:	4b20      	ldr	r3, [pc, #128]	; (8000378 <main+0xc4>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d125      	bne.n	8000348 <main+0x94>
		  Location =+ cnt - precnt;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <main+0xc0>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	ee07 3a90 	vmov	s15, r3
 8000304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <main+0xc8>)
 800030a:	edd3 7a00 	vldr	s15, [r3]
 800030e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000316:	ee17 2a90 	vmov	r2, s15
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <main+0xcc>)
 800031c:	601a      	str	r2, [r3, #0]
		  output = Rotate_PID(Location, goal);//ÁõÆÊ®ô„Å®ÁèæÂú®Âú∞„ÅßPIDÂà∂Âæ°
 800031e:	4b18      	ldr	r3, [pc, #96]	; (8000380 <main+0xcc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	ee07 3a90 	vmov	s15, r3
 8000326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800032a:	4b16      	ldr	r3, [pc, #88]	; (8000384 <main+0xd0>)
 800032c:	ed93 7a00 	vldr	s14, [r3]
 8000330:	eef0 0a47 	vmov.f32	s1, s14
 8000334:	eeb0 0a67 	vmov.f32	s0, s15
 8000338:	f7ff ff70 	bl	800021c <Rotate_PID>
 800033c:	eef0 7a40 	vmov.f32	s15, s0
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <main+0xd4>)
 8000342:	edc3 7a00 	vstr	s15, [r3]
 8000346:	e003      	b.n	8000350 <main+0x9c>

	  }
	  else output = 0;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <main+0xd4>)
 800034a:	f04f 0200 	mov.w	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
	  precnt = cnt;
 8000350:	4b08      	ldr	r3, [pc, #32]	; (8000374 <main+0xc0>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	ee07 3a90 	vmov	s15, r3
 8000358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800035c:	4b07      	ldr	r3, [pc, #28]	; (800037c <main+0xc8>)
 800035e:	edc3 7a00 	vstr	s15, [r3]

	  HAL_Delay( 100 );
 8000362:	2064      	movs	r0, #100	; 0x64
 8000364:	f000 fa3c 	bl	80007e0 <HAL_Delay>
	  cnt = (long)(overflowcnt) * CntPeriod + (long)TIM2 -> CNT;//ÁèæÂú®„ÅÆcnt„ÇíÊõ¥Êñ∞„Åô„Çã
 8000368:	e7b8      	b.n	80002dc <main+0x28>
 800036a:	bf00      	nop
 800036c:	20000028 	.word	0x20000028
 8000370:	2000008c 	.word	0x2000008c
 8000374:	20000084 	.word	0x20000084
 8000378:	20000094 	.word	0x20000094
 800037c:	20000088 	.word	0x20000088
 8000380:	20000090 	.word	0x20000090
 8000384:	2000007c 	.word	0x2000007c
 8000388:	20000080 	.word	0x20000080

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b090      	sub	sp, #64	; 0x40
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fb2a 	bl	80029f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b2:	2301      	movs	r3, #1
 80003b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b6:	2310      	movs	r3, #16
 80003b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fccc 	bl	8000d60 <HAL_RCC_OscConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ce:	f000 f8c3 	bl	8000558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	230f      	movs	r3, #15
 80003d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 fcf6 	bl	8001ddc <HAL_RCC_ClockConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003f6:	f000 f8af 	bl	8000558 <Error_Handler>
  }
}
 80003fa:	bf00      	nop
 80003fc:	3740      	adds	r7, #64	; 0x40
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08c      	sub	sp, #48	; 0x30
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	2224      	movs	r2, #36	; 0x24
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f002 faee 	bl	80029f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000418:	463b      	mov	r3, r7
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000422:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <MX_TIM2_Init+0xa4>)
 8000424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000428:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <MX_TIM2_Init+0xa4>)
 800042c:	2200      	movs	r2, #0
 800042e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000430:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <MX_TIM2_Init+0xa4>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000436:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <MX_TIM2_Init+0xa4>)
 8000438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800043c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_TIM2_Init+0xa4>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_TIM2_Init+0xa4>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800044a:	2303      	movs	r3, #3
 800044c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000452:	2301      	movs	r3, #1
 8000454:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800045e:	2300      	movs	r3, #0
 8000460:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000462:	2301      	movs	r3, #1
 8000464:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800046e:	f107 030c 	add.w	r3, r7, #12
 8000472:	4619      	mov	r1, r3
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <MX_TIM2_Init+0xa4>)
 8000476:	f001 fef3 	bl	8002260 <HAL_TIM_Encoder_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000480:	f000 f86a 	bl	8000558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800048c:	463b      	mov	r3, r7
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_TIM2_Init+0xa4>)
 8000492:	f002 f9ff 	bl	8002894 <HAL_TIMEx_MasterConfigSynchronization>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800049c:	f000 f85c 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	3730      	adds	r7, #48	; 0x30
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000028 	.word	0x20000028

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b23      	ldr	r3, [pc, #140]	; (8000550 <MX_GPIO_Init+0xa4>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a22      	ldr	r2, [pc, #136]	; (8000550 <MX_GPIO_Init+0xa4>)
 80004c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b20      	ldr	r3, [pc, #128]	; (8000550 <MX_GPIO_Init+0xa4>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <MX_GPIO_Init+0xa4>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <MX_GPIO_Init+0xa4>)
 80004e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <MX_GPIO_Init+0xa4>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fc:	f000 fc18 	bl	8000d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2110      	movs	r1, #16
 8000504:	4813      	ldr	r0, [pc, #76]	; (8000554 <MX_GPIO_Init+0xa8>)
 8000506:	f000 fc13 	bl	8000d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800050a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800050e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2300      	movs	r3, #0
 800051a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	4619      	mov	r1, r3
 8000522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000526:	f000 fa91 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800052a:	2310      	movs	r3, #16
 800052c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	4619      	mov	r1, r3
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <MX_GPIO_Init+0xa8>)
 8000542:	f000 fa83 	bl	8000a4c <HAL_GPIO_Init>

}
 8000546:	bf00      	nop
 8000548:	3720      	adds	r7, #32
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	48000400 	.word	0x48000400

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	e7fe      	b.n	8000560 <Error_Handler+0x8>
	...

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <HAL_MspInit+0x44>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <HAL_MspInit+0x44>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_MspInit+0x44>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <HAL_MspInit+0x44>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <HAL_MspInit+0x44>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_MspInit+0x44>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005cc:	d130      	bne.n	8000630 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a19      	ldr	r2, [pc, #100]	; (8000638 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005fe:	230f      	movs	r3, #15
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800060e:	2301      	movs	r3, #1
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f000 fa16 	bl	8000a4c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	201c      	movs	r0, #28
 8000626:	f000 f9da 	bl	80009de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800062a:	201c      	movs	r0, #28
 800062c:	f000 f9f3 	bl	8000a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <NMI_Handler+0x4>

08000642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <MemManage_Handler+0x4>

0800064e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <BusFault_Handler+0x4>

08000654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <UsageFault_Handler+0x4>

0800065a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000688:	f000 f88a 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <TIM2_IRQHandler+0x10>)
 8000696:	f001 ff17 	bl	80024c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000028 	.word	0x20000028

080006a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <SystemInit+0x20>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <SystemInit+0x20>)
 80006b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <Reset_Handler>:
	.type	Reset_Handler, %function
Reset_Handler:
//112  ldr   sp, =_estack    /* Atollic update: set stack pointer */

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <LoopForever+0x2>)
  ldr r1, =_edata
 80006ca:	490d      	ldr	r1, [pc, #52]	; (8000700 <LoopForever+0x6>)
  ldr r2, =_sidata
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <LoopForever+0xa>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopForever+0xe>)
  ldr r4, =_ebss
 80006e0:	4c0a      	ldr	r4, [pc, #40]	; (800070c <LoopForever+0x12>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ee:	f7ff ffd9 	bl	80006a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f2:	f002 f95b 	bl	80029ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006f6:	f7ff fddd 	bl	80002b4 <main>

080006fa <LoopForever>:

LoopForever:
    b LoopForever
 80006fa:	e7fe      	b.n	80006fa <LoopForever>
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000704:	08002a54 	.word	0x08002a54
  ldr r2, =_sbss
 8000708:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800070c:	2000009c 	.word	0x2000009c

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_Init+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <HAL_Init+0x28>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f94f 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072a:	200f      	movs	r0, #15
 800072c:	f000 f808 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000730:	f7ff ff18 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_InitTick+0x54>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x58>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	fbb3 f3f1 	udiv	r3, r3, r1
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f967 	bl	8000a32 <HAL_SYSTICK_Config>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e00e      	b.n	800078c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d80a      	bhi.n	800078a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000774:	2200      	movs	r2, #0
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f000 f92f 	bl	80009de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000780:	4a06      	ldr	r2, [pc, #24]	; (800079c <HAL_InitTick+0x5c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e000      	b.n	800078c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	20000004 	.word	0x20000004

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_IncTick+0x20>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_IncTick+0x24>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_IncTick+0x24>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000098 	.word	0x20000098

080007c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <HAL_GetTick+0x14>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000098 	.word	0x20000098

080007e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e8:	f7ff ffee 	bl	80007c8 <HAL_GetTick>
 80007ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f8:	d005      	beq.n	8000806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_Delay+0x44>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000806:	bf00      	nop
 8000808:	f7ff ffde 	bl	80007c8 <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f7      	bhi.n	8000808 <HAL_Delay+0x28>
  {
  }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4907      	ldr	r1, [pc, #28]	; (80008c4 <__NVIC_EnableIRQ+0x38>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000994:	d301      	bcc.n	800099a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000996:	2301      	movs	r3, #1
 8000998:	e00f      	b.n	80009ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <SysTick_Config+0x40>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a2:	210f      	movs	r1, #15
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f7ff ff8e 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <SysTick_Config+0x40>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SysTick_Config+0x40>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	e000e010 	.word	0xe000e010

080009c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff29 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f0:	f7ff ff3e 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f7ff ff8e 	bl	800091c <NVIC_EncodePriority>
 8000a00:	4602      	mov	r2, r0
 8000a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff5d 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff31 	bl	800088c <__NVIC_EnableIRQ>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffa2 	bl	8000984 <SysTick_Config>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	e14e      	b.n	8000cfa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 8140 	beq.w	8000cf4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d005      	beq.n	8000a8c <HAL_GPIO_Init+0x40>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d130      	bne.n	8000aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2203      	movs	r2, #3
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	f003 0201 	and.w	r2, r3, #1
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d017      	beq.n	8000b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d123      	bne.n	8000b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	08da      	lsrs	r2, r3, #3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691a      	ldr	r2, [r3, #16]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f003 0307 	and.w	r3, r3, #7
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	08da      	lsrs	r2, r3, #3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3208      	adds	r2, #8
 8000b78:	6939      	ldr	r1, [r7, #16]
 8000b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0203 	and.w	r2, r3, #3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 809a 	beq.w	8000cf4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <HAL_GPIO_Init+0x2cc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a54      	ldr	r2, [pc, #336]	; (8000d18 <HAL_GPIO_Init+0x2cc>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b52      	ldr	r3, [pc, #328]	; (8000d18 <HAL_GPIO_Init+0x2cc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd8:	4a50      	ldr	r2, [pc, #320]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c02:	d013      	beq.n	8000c2c <HAL_GPIO_Init+0x1e0>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a46      	ldr	r2, [pc, #280]	; (8000d20 <HAL_GPIO_Init+0x2d4>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d00d      	beq.n	8000c28 <HAL_GPIO_Init+0x1dc>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a45      	ldr	r2, [pc, #276]	; (8000d24 <HAL_GPIO_Init+0x2d8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d007      	beq.n	8000c24 <HAL_GPIO_Init+0x1d8>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a44      	ldr	r2, [pc, #272]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d101      	bne.n	8000c20 <HAL_GPIO_Init+0x1d4>
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	e006      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c20:	2305      	movs	r3, #5
 8000c22:	e004      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e002      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	f002 0203 	and.w	r2, r2, #3
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	4093      	lsls	r3, r2
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c3e:	4937      	ldr	r1, [pc, #220]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3302      	adds	r3, #2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c4c:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c70:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c9a:	4a24      	ldr	r2, [pc, #144]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa22 f303 	lsr.w	r3, r2, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f47f aea9 	bne.w	8000a5c <HAL_GPIO_Init+0x10>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	371c      	adds	r7, #28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	40010400 	.word	0x40010400

08000d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d40:	787b      	ldrb	r3, [r7, #1]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d4c:	e002      	b.n	8000d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d70:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f001 b823 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 817d 	beq.w	8001096 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d9c:	4bbc      	ldr	r3, [pc, #752]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 030c 	and.w	r3, r3, #12
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d00c      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da8:	4bb9      	ldr	r3, [pc, #740]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 030c 	and.w	r3, r3, #12
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d15c      	bne.n	8000e6e <HAL_RCC_OscConfig+0x10e>
 8000db4:	4bb6      	ldr	r3, [pc, #728]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc0:	d155      	bne.n	8000e6e <HAL_RCC_OscConfig+0x10e>
 8000dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000dce:	fa93 f3a3 	rbit	r3, r3
 8000dd2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dd6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dda:	fab3 f383 	clz	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	095b      	lsrs	r3, r3, #5
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d102      	bne.n	8000df4 <HAL_RCC_OscConfig+0x94>
 8000dee:	4ba8      	ldr	r3, [pc, #672]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	e015      	b.n	8000e20 <HAL_RCC_OscConfig+0xc0>
 8000df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e10:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e14:	fa93 f3a3 	rbit	r3, r3
 8000e18:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e1c:	4b9c      	ldr	r3, [pc, #624]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e24:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e28:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e2c:	fa92 f2a2 	rbit	r2, r2
 8000e30:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e34:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e38:	fab2 f282 	clz	r2, r2
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	f042 0220 	orr.w	r2, r2, #32
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	f002 021f 	and.w	r2, r2, #31
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 811f 	beq.w	8001094 <HAL_RCC_OscConfig+0x334>
 8000e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 8116 	bne.w	8001094 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	f000 bfaf 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7e:	d106      	bne.n	8000e8e <HAL_RCC_OscConfig+0x12e>
 8000e80:	4b83      	ldr	r3, [pc, #524]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a82      	ldr	r2, [pc, #520]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e036      	b.n	8000efc <HAL_RCC_OscConfig+0x19c>
 8000e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x158>
 8000e9e:	4b7c      	ldr	r3, [pc, #496]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a7b      	ldr	r2, [pc, #492]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	4b79      	ldr	r3, [pc, #484]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a78      	ldr	r2, [pc, #480]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e021      	b.n	8000efc <HAL_RCC_OscConfig+0x19c>
 8000eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x184>
 8000eca:	4b71      	ldr	r3, [pc, #452]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a70      	ldr	r2, [pc, #448]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b6e      	ldr	r3, [pc, #440]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a6d      	ldr	r2, [pc, #436]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e00b      	b.n	8000efc <HAL_RCC_OscConfig+0x19c>
 8000ee4:	4b6a      	ldr	r3, [pc, #424]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a69      	ldr	r2, [pc, #420]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b67      	ldr	r3, [pc, #412]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a66      	ldr	r2, [pc, #408]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000efa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000efc:	4b64      	ldr	r3, [pc, #400]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	f023 020f 	bic.w	r2, r3, #15
 8000f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	495f      	ldr	r1, [pc, #380]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d059      	beq.n	8000fda <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fc4f 	bl	80007c8 <HAL_GetTick>
 8000f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2e:	e00a      	b.n	8000f46 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fc4a 	bl	80007c8 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b64      	cmp	r3, #100	; 0x64
 8000f3e:	d902      	bls.n	8000f46 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	f000 bf43 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8000f46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f52:	fa93 f3a3 	rbit	r3, r3
 8000f56:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f5a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5e:	fab3 f383 	clz	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	095b      	lsrs	r3, r3, #5
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <HAL_RCC_OscConfig+0x218>
 8000f72:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	e015      	b.n	8000fa4 <HAL_RCC_OscConfig+0x244>
 8000f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f90:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f94:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fa8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fb0:	fa92 f2a2 	rbit	r2, r2
 8000fb4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fb8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fbc:	fab2 f282 	clz	r2, r2
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	f042 0220 	orr.w	r2, r2, #32
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	f002 021f 	and.w	r2, r2, #31
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0ab      	beq.n	8000f30 <HAL_RCC_OscConfig+0x1d0>
 8000fd8:	e05d      	b.n	8001096 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fbf5 	bl	80007c8 <HAL_GetTick>
 8000fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe2:	e00a      	b.n	8000ffa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fbf0 	bl	80007c8 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b64      	cmp	r3, #100	; 0x64
 8000ff2:	d902      	bls.n	8000ffa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	f000 bee9 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8000ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001006:	fa93 f3a3 	rbit	r3, r3
 800100a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800100e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	095b      	lsrs	r3, r3, #5
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d102      	bne.n	800102c <HAL_RCC_OscConfig+0x2cc>
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	e015      	b.n	8001058 <HAL_RCC_OscConfig+0x2f8>
 800102c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001030:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001044:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001048:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001060:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001064:	fa92 f2a2 	rbit	r2, r2
 8001068:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800106c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001070:	fab2 f282 	clz	r2, r2
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	f042 0220 	orr.w	r2, r2, #32
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	f002 021f 	and.w	r2, r2, #31
 8001080:	2101      	movs	r1, #1
 8001082:	fa01 f202 	lsl.w	r2, r1, r2
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ab      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x284>
 800108c:	e003      	b.n	8001096 <HAL_RCC_OscConfig+0x336>
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 817d 	beq.w	80013a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010ac:	4ba6      	ldr	r3, [pc, #664]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00b      	beq.n	80010d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010b8:	4ba3      	ldr	r3, [pc, #652]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d172      	bne.n	80011aa <HAL_RCC_OscConfig+0x44a>
 80010c4:	4ba0      	ldr	r3, [pc, #640]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d16c      	bne.n	80011aa <HAL_RCC_OscConfig+0x44a>
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	095b      	lsrs	r3, r3, #5
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d102      	bne.n	8001100 <HAL_RCC_OscConfig+0x3a0>
 80010fa:	4b93      	ldr	r3, [pc, #588]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	e013      	b.n	8001128 <HAL_RCC_OscConfig+0x3c8>
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001118:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001124:	4b88      	ldr	r3, [pc, #544]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	2202      	movs	r2, #2
 800112a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800112e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001132:	fa92 f2a2 	rbit	r2, r2
 8001136:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800113a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800113e:	fab2 f282 	clz	r2, r2
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	f042 0220 	orr.w	r2, r2, #32
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	f002 021f 	and.w	r2, r2, #31
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00a      	beq.n	8001170 <HAL_RCC_OscConfig+0x410>
 800115a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d002      	beq.n	8001170 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	f000 be2e 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b75      	ldr	r3, [pc, #468]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800117c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	21f8      	movs	r1, #248	; 0xf8
 8001186:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800118e:	fa91 f1a1 	rbit	r1, r1
 8001192:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001196:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800119a:	fab1 f181 	clz	r1, r1
 800119e:	b2c9      	uxtb	r1, r1
 80011a0:	408b      	lsls	r3, r1
 80011a2:	4969      	ldr	r1, [pc, #420]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a8:	e0fd      	b.n	80013a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8088 	beq.w	80012cc <HAL_RCC_OscConfig+0x56c>
 80011bc:	2301      	movs	r3, #1
 80011be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	461a      	mov	r2, r3
 80011e4:	2301      	movs	r3, #1
 80011e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff faee 	bl	80007c8 <HAL_GetTick>
 80011ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff fae9 	bl	80007c8 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d902      	bls.n	8001208 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	f000 bde2 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800121a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	fab3 f383 	clz	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	095b      	lsrs	r3, r3, #5
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b01      	cmp	r3, #1
 8001230:	d102      	bne.n	8001238 <HAL_RCC_OscConfig+0x4d8>
 8001232:	4b45      	ldr	r3, [pc, #276]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	e013      	b.n	8001260 <HAL_RCC_OscConfig+0x500>
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001250:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800125c:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	2202      	movs	r2, #2
 8001262:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001266:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800126a:	fa92 f2a2 	rbit	r2, r2
 800126e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001272:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001276:	fab2 f282 	clz	r2, r2
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	f042 0220 	orr.w	r2, r2, #32
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	f002 021f 	and.w	r2, r2, #31
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0af      	beq.n	80011f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	21f8      	movs	r1, #248	; 0xf8
 80012a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012b0:	fa91 f1a1 	rbit	r1, r1
 80012b4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012bc:	fab1 f181 	clz	r1, r1
 80012c0:	b2c9      	uxtb	r1, r1
 80012c2:	408b      	lsls	r3, r1
 80012c4:	4920      	ldr	r1, [pc, #128]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
 80012ca:	e06c      	b.n	80013a6 <HAL_RCC_OscConfig+0x646>
 80012cc:	2301      	movs	r3, #1
 80012ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e2:	fab3 f383 	clz	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	461a      	mov	r2, r3
 80012f4:	2300      	movs	r3, #0
 80012f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fa66 	bl	80007c8 <HAL_GetTick>
 80012fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fa61 	bl	80007c8 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d902      	bls.n	8001318 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	f000 bd5a 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001318:	2302      	movs	r3, #2
 800131a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800132a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	095b      	lsrs	r3, r3, #5
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b01      	cmp	r3, #1
 8001340:	d104      	bne.n	800134c <HAL_RCC_OscConfig+0x5ec>
 8001342:	4b01      	ldr	r3, [pc, #4]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	e015      	b.n	8001374 <HAL_RCC_OscConfig+0x614>
 8001348:	40021000 	.word	0x40021000
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001364:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001370:	4bc8      	ldr	r3, [pc, #800]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	2202      	movs	r2, #2
 8001376:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800137a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800137e:	fa92 f2a2 	rbit	r2, r2
 8001382:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001386:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800138a:	fab2 f282 	clz	r2, r2
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	f042 0220 	orr.w	r2, r2, #32
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	f002 021f 	and.w	r2, r2, #31
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ad      	bne.n	8001302 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8110 	beq.w	80015dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d079      	beq.n	80014c0 <HAL_RCC_OscConfig+0x760>
 80013cc:	2301      	movs	r3, #1
 80013ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4bab      	ldr	r3, [pc, #684]	; (8001698 <HAL_RCC_OscConfig+0x938>)
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	461a      	mov	r2, r3
 80013f2:	2301      	movs	r3, #1
 80013f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff f9e7 	bl	80007c8 <HAL_GetTick>
 80013fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff f9e2 	bl	80007c8 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d902      	bls.n	8001416 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	f000 bcdb 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001430:	2202      	movs	r2, #2
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	fa93 f2a3 	rbit	r2, r3
 8001442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001454:	2202      	movs	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fa93 f2a3 	rbit	r2, r3
 8001466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800146e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001470:	4b88      	ldr	r3, [pc, #544]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001478:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800147c:	2102      	movs	r1, #2
 800147e:	6019      	str	r1, [r3, #0]
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fa93 f1a3 	rbit	r1, r3
 800148e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001492:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001496:	6019      	str	r1, [r3, #0]
  return result;
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	2101      	movs	r1, #1
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0a0      	beq.n	8001400 <HAL_RCC_OscConfig+0x6a0>
 80014be:	e08d      	b.n	80015dc <HAL_RCC_OscConfig+0x87c>
 80014c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014e2:	601a      	str	r2, [r3, #0]
  return result;
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ee:	fab3 f383 	clz	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b68      	ldr	r3, [pc, #416]	; (8001698 <HAL_RCC_OscConfig+0x938>)
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	461a      	mov	r2, r3
 80014fe:	2300      	movs	r3, #0
 8001500:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff f961 	bl	80007c8 <HAL_GetTick>
 8001506:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff f95c 	bl	80007c8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d902      	bls.n	8001522 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	f000 bc55 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001532:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	fa93 f2a3 	rbit	r2, r3
 800153c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001540:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800154e:	2202      	movs	r2, #2
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fa93 f2a3 	rbit	r2, r3
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001572:	2202      	movs	r2, #2
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fa93 f2a3 	rbit	r2, r3
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800158c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800159a:	2102      	movs	r1, #2
 800159c:	6019      	str	r1, [r3, #0]
 800159e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	fa93 f1a3 	rbit	r1, r3
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015b4:	6019      	str	r1, [r3, #0]
  return result;
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d197      	bne.n	800150c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 81a1 	beq.w	8001934 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d116      	bne.n	8001632 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	4a22      	ldr	r2, [pc, #136]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160e:	61d3      	str	r3, [r2, #28]
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800162a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800162c:	2301      	movs	r3, #1
 800162e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d11a      	bne.n	8001674 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a16      	ldr	r2, [pc, #88]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff f8bd 	bl	80007c8 <HAL_GetTick>
 800164e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001652:	e009      	b.n	8001668 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff f8b8 	bl	80007c8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b64      	cmp	r3, #100	; 0x64
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e3b1      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ef      	beq.n	8001654 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d10d      	bne.n	80016a0 <HAL_RCC_OscConfig+0x940>
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a02      	ldr	r2, [pc, #8]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	e03c      	b.n	800170c <HAL_RCC_OscConfig+0x9ac>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	10908120 	.word	0x10908120
 800169c:	40007000 	.word	0x40007000
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10c      	bne.n	80016ca <HAL_RCC_OscConfig+0x96a>
 80016b0:	4bc1      	ldr	r3, [pc, #772]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4ac0      	ldr	r2, [pc, #768]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	4bbe      	ldr	r3, [pc, #760]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4abd      	ldr	r2, [pc, #756]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016c2:	f023 0304 	bic.w	r3, r3, #4
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	e020      	b.n	800170c <HAL_RCC_OscConfig+0x9ac>
 80016ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x994>
 80016da:	4bb7      	ldr	r3, [pc, #732]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4ab6      	ldr	r2, [pc, #728]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	4bb4      	ldr	r3, [pc, #720]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4ab3      	ldr	r2, [pc, #716]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0x9ac>
 80016f4:	4bb0      	ldr	r3, [pc, #704]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4aaf      	ldr	r2, [pc, #700]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	4bad      	ldr	r3, [pc, #692]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4aac      	ldr	r2, [pc, #688]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 8001706:	f023 0304 	bic.w	r3, r3, #4
 800170a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8081 	beq.w	8001820 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7ff f853 	bl	80007c8 <HAL_GetTick>
 8001722:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff f84e 	bl	80007c8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e345      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001748:	2202      	movs	r2, #2
 800174a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	fa93 f2a3 	rbit	r2, r3
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800176c:	2202      	movs	r2, #2
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	fa93 f2a3 	rbit	r2, r3
 800177e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001782:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001786:	601a      	str	r2, [r3, #0]
  return result;
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001790:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0xa4c>
 80017a6:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	e013      	b.n	80017d4 <HAL_RCC_OscConfig+0xa74>
 80017ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017b4:	2202      	movs	r2, #2
 80017b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f2a3 	rbit	r2, r3
 80017c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	4b79      	ldr	r3, [pc, #484]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017dc:	2102      	movs	r1, #2
 80017de:	6011      	str	r1, [r2, #0]
 80017e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	fa92 f1a2 	rbit	r1, r2
 80017ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017f6:	6011      	str	r1, [r2, #0]
  return result;
 80017f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017fc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	fab2 f282 	clz	r2, r2
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f002 021f 	and.w	r2, r2, #31
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f202 	lsl.w	r2, r1, r2
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d084      	beq.n	8001728 <HAL_RCC_OscConfig+0x9c8>
 800181e:	e07f      	b.n	8001920 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7fe ffd2 	bl	80007c8 <HAL_GetTick>
 8001824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7fe ffcd 	bl	80007c8 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e2c4      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800184a:	2202      	movs	r2, #2
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001860:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001888:	601a      	str	r2, [r3, #0]
  return result;
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001892:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d102      	bne.n	80018ae <HAL_RCC_OscConfig+0xb4e>
 80018a8:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	e013      	b.n	80018d6 <HAL_RCC_OscConfig+0xb76>
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018de:	2102      	movs	r1, #2
 80018e0:	6011      	str	r1, [r2, #0]
 80018e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	fa92 f1a2 	rbit	r1, r2
 80018f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018f8:	6011      	str	r1, [r2, #0]
  return result;
 80018fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018fe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	fab2 f282 	clz	r2, r2
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	f002 021f 	and.w	r2, r2, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d184      	bne.n	800182a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001920:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 800192e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001932:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8242 	beq.w	8001dca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	f000 8213 	beq.w	8001d7a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b02      	cmp	r3, #2
 8001962:	f040 8162 	bne.w	8001c2a <HAL_RCC_OscConfig+0xeca>
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800196e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800198a:	601a      	str	r2, [r3, #0]
  return result;
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001994:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	461a      	mov	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7fe ff0c 	bl	80007c8 <HAL_GetTick>
 80019b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	e00c      	b.n	80019d0 <HAL_RCC_OscConfig+0xc70>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019bc:	f7fe ff04 	bl	80007c8 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1fd      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fa93 f2a3 	rbit	r2, r3
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019f4:	601a      	str	r2, [r3, #0]
  return result;
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d102      	bne.n	8001a1a <HAL_RCC_OscConfig+0xcba>
 8001a14:	4bb0      	ldr	r3, [pc, #704]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	e027      	b.n	8001a6a <HAL_RCC_OscConfig+0xd0a>
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a52:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fa93 f2a3 	rbit	r2, r3
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4b9c      	ldr	r3, [pc, #624]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a6e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a76:	6011      	str	r1, [r2, #0]
 8001a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a7c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	fa92 f1a2 	rbit	r1, r2
 8001a86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a8a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a8e:	6011      	str	r1, [r2, #0]
  return result;
 8001a90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a94:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	fab2 f282 	clz	r2, r2
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	f042 0220 	orr.w	r2, r2, #32
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f002 021f 	and.w	r2, r2, #31
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d182      	bne.n	80019bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab6:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	497f      	ldr	r1, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ae6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b02:	601a      	str	r2, [r3, #0]
  return result;
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b0c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2301      	movs	r3, #1
 8001b22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7fe fe50 	bl	80007c8 <HAL_GetTick>
 8001b28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2c:	e009      	b.n	8001b42 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7fe fe4b 	bl	80007c8 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e144      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b66:	601a      	str	r2, [r3, #0]
  return result;
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <HAL_RCC_OscConfig+0xe2c>
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	e027      	b.n	8001bdc <HAL_RCC_OscConfig+0xe7c>
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	fa93 f2a3 	rbit	r2, r3
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001be4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be8:	6011      	str	r1, [r2, #0]
 8001bea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	fa92 f1a2 	rbit	r1, r2
 8001bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bfc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c00:	6011      	str	r1, [r2, #0]
  return result;
 8001c02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c06:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	fab2 f282 	clz	r2, r2
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f042 0220 	orr.w	r2, r2, #32
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f002 021f 	and.w	r2, r2, #31
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d082      	beq.n	8001b2e <HAL_RCC_OscConfig+0xdce>
 8001c28:	e0cf      	b.n	8001dca <HAL_RCC_OscConfig+0x106a>
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c4e:	601a      	str	r2, [r3, #0]
  return result;
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7fe fdaa 	bl	80007c8 <HAL_GetTick>
 8001c74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7fe fda5 	bl	80007c8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e09e      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cb2:	601a      	str	r2, [r3, #0]
  return result;
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d104      	bne.n	8001cdc <HAL_RCC_OscConfig+0xf7c>
 8001cd2:	4b01      	ldr	r3, [pc, #4]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e029      	b.n	8001d2c <HAL_RCC_OscConfig+0xfcc>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	fa93 f2a3 	rbit	r2, r3
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_RCC_OscConfig+0x1078>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d30:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d38:	6011      	str	r1, [r2, #0]
 8001d3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	fa92 f1a2 	rbit	r1, r2
 8001d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d4c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d50:	6011      	str	r1, [r2, #0]
  return result;
 8001d52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d56:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d180      	bne.n	8001c7a <HAL_RCC_OscConfig+0xf1a>
 8001d78:	e027      	b.n	8001dca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e01e      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_RCC_OscConfig+0x1078>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d10b      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001db2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000

08001ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b09e      	sub	sp, #120	; 0x78
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e162      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b90      	ldr	r3, [pc, #576]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b8d      	ldr	r3, [pc, #564]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 0207 	bic.w	r2, r3, #7
 8001e0a:	498b      	ldr	r1, [pc, #556]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b89      	ldr	r3, [pc, #548]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e14a      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b82      	ldr	r3, [pc, #520]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	497f      	ldr	r1, [pc, #508]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80dc 	beq.w	8002008 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d13c      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xf6>
 8001e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d102      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xa6>
 8001e7c:	4b6f      	ldr	r3, [pc, #444]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	e00f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0xc6>
 8001e82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e94:	663b      	str	r3, [r7, #96]	; 0x60
 8001e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eaa:	fa92 f2a2 	rbit	r2, r2
 8001eae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001eb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eb2:	fab2 f282 	clz	r2, r2
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f042 0220 	orr.w	r2, r2, #32
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f002 021f 	and.w	r2, r2, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d17b      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0f3      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d13c      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x178>
 8001eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ede:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d102      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x128>
 8001efe:	4b4f      	ldr	r3, [pc, #316]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	e00f      	b.n	8001f24 <HAL_RCC_ClockConfig+0x148>
 8001f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	647b      	str	r3, [r7, #68]	; 0x44
 8001f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f16:	643b      	str	r3, [r7, #64]	; 0x40
 8001f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f20:	4b46      	ldr	r3, [pc, #280]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f28:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f2c:	fa92 f2a2 	rbit	r2, r2
 8001f30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f34:	fab2 f282 	clz	r2, r2
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f042 0220 	orr.w	r2, r2, #32
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f002 021f 	and.w	r2, r2, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d13a      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0b2      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
 8001f54:	2302      	movs	r3, #2
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d102      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x1a0>
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	e00d      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1bc>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	2302      	movs	r3, #2
 8001f8a:	623b      	str	r3, [r7, #32]
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	2202      	movs	r2, #2
 8001f9a:	61ba      	str	r2, [r7, #24]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	fa92 f2a2 	rbit	r2, r2
 8001fa2:	617a      	str	r2, [r7, #20]
  return result;
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	fab2 f282 	clz	r2, r2
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f042 0220 	orr.w	r2, r2, #32
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f002 021f 	and.w	r2, r2, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e079      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	491a      	ldr	r1, [pc, #104]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7fe fbf6 	bl	80007c8 <HAL_GetTick>
 8001fdc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7fe fbf2 	bl	80007c8 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e061      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d214      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4906      	ldr	r1, [pc, #24]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e040      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
 8002038:	40022000 	.word	0x40022000
 800203c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	491a      	ldr	r1, [pc, #104]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4912      	ldr	r1, [pc, #72]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800207e:	f000 f829 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002082:	4601      	mov	r1, r0
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208c:	22f0      	movs	r2, #240	; 0xf0
 800208e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	fa92 f2a2 	rbit	r2, r2
 8002096:	60fa      	str	r2, [r7, #12]
  return result;
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	fab2 f282 	clz	r2, r2
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	40d3      	lsrs	r3, r2
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x2ec>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	fa21 f303 	lsr.w	r3, r1, r3
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_RCC_ClockConfig+0x2f0>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_RCC_ClockConfig+0x2f4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fb44 	bl	8000740 <HAL_InitTick>
  
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3778      	adds	r7, #120	; 0x78
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08002a1c 	.word	0x08002a1c
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b08b      	sub	sp, #44	; 0x2c
 80020d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d002      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x30>
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d003      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x36>
 8002102:	e03c      	b.n	800217e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002106:	623b      	str	r3, [r7, #32]
      break;
 8002108:	e03c      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002110:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002114:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	fa92 f2a2 	rbit	r2, r2
 800211c:	607a      	str	r2, [r7, #4]
  return result;
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	fab2 f282 	clz	r2, r2
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	40d3      	lsrs	r3, r2
 8002128:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_RCC_GetSysClockFreq+0xc8>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	220f      	movs	r2, #15
 8002138:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	fa92 f2a2 	rbit	r2, r2
 8002140:	60fa      	str	r2, [r7, #12]
  return result;
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	fab2 f282 	clz	r2, r2
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	40d3      	lsrs	r3, r2
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800215c:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_RCC_GetSysClockFreq+0xc4>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	fbb2 f2f3 	udiv	r2, r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	e004      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	623b      	str	r3, [r7, #32]
      break;
 800217c:	e002      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002180:	623b      	str	r3, [r7, #32]
      break;
 8002182:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002184:	6a3b      	ldr	r3, [r7, #32]
}
 8002186:	4618      	mov	r0, r3
 8002188:	372c      	adds	r7, #44	; 0x2c
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	007a1200 	.word	0x007a1200
 800219c:	08002a2c 	.word	0x08002a2c
 80021a0:	08002a3c 	.word	0x08002a3c
 80021a4:	003d0900 	.word	0x003d0900

080021a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d001      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e040      	b.n	8002242 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <HAL_TIM_Base_Start_IT+0xa8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00e      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ea:	d009      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_TIM_Base_Start_IT+0xac>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a17      	ldr	r2, [pc, #92]	; (8002258 <HAL_TIM_Base_Start_IT+0xb0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d115      	bne.n	800222c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_TIM_Base_Start_IT+0xb4>)
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b06      	cmp	r3, #6
 8002210:	d015      	beq.n	800223e <HAL_TIM_Base_Start_IT+0x96>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002218:	d011      	beq.n	800223e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222a:	e008      	b.n	800223e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e000      	b.n	8002240 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40000400 	.word	0x40000400
 8002258:	40014000 	.word	0x40014000
 800225c:	00010007 	.word	0x00010007

08002260 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e097      	b.n	80023a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7fe f98f 	bl	80005ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80022a4:	f023 0307 	bic.w	r3, r3, #7
 80022a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f000 fa4f 	bl	8002758 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	4313      	orrs	r3, r2
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002300:	f023 030c 	bic.w	r3, r3, #12
 8002304:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800230c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	4313      	orrs	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	011a      	lsls	r2, r3, #4
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	031b      	lsls	r3, r3, #12
 8002330:	4313      	orrs	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800233e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002346:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	4313      	orrs	r3, r2
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d110      	bne.n	80023fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80023e2:	7b7b      	ldrb	r3, [r7, #13]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d001      	beq.n	80023ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e069      	b.n	80024c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023fc:	e031      	b.n	8002462 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b04      	cmp	r3, #4
 8002402:	d110      	bne.n	8002426 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002404:	7bbb      	ldrb	r3, [r7, #14]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d102      	bne.n	8002410 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800240a:	7b3b      	ldrb	r3, [r7, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d001      	beq.n	8002414 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e055      	b.n	80024c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002424:	e01d      	b.n	8002462 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d108      	bne.n	800243e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800242c:	7bbb      	ldrb	r3, [r7, #14]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d105      	bne.n	800243e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002432:	7b7b      	ldrb	r3, [r7, #13]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d102      	bne.n	800243e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002438:	7b3b      	ldrb	r3, [r7, #12]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d001      	beq.n	8002442 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e03e      	b.n	80024c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2202      	movs	r2, #2
 800245e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_TIM_Encoder_Start+0xc4>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b04      	cmp	r3, #4
 800246c:	d008      	beq.n	8002480 <HAL_TIM_Encoder_Start+0xd4>
 800246e:	e00f      	b.n	8002490 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2201      	movs	r2, #1
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f9e5 	bl	8002848 <TIM_CCxChannelCmd>
      break;
 800247e:	e016      	b.n	80024ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2201      	movs	r2, #1
 8002486:	2104      	movs	r1, #4
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f9dd 	bl	8002848 <TIM_CCxChannelCmd>
      break;
 800248e:	e00e      	b.n	80024ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f9d5 	bl	8002848 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	2104      	movs	r1, #4
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f9ce 	bl	8002848 <TIM_CCxChannelCmd>
      break;
 80024ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d122      	bne.n	8002524 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d11b      	bne.n	8002524 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0202 	mvn.w	r2, #2
 80024f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f905 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f8f7 	bl	8002706 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f908 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b04      	cmp	r3, #4
 8002530:	d122      	bne.n	8002578 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d11b      	bne.n	8002578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0204 	mvn.w	r2, #4
 8002548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2202      	movs	r2, #2
 800254e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f8db 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f8cd 	bl	8002706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f8de 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b08      	cmp	r3, #8
 8002584:	d122      	bne.n	80025cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b08      	cmp	r3, #8
 8002592:	d11b      	bne.n	80025cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0208 	mvn.w	r2, #8
 800259c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2204      	movs	r2, #4
 80025a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8b1 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 80025b8:	e005      	b.n	80025c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8a3 	bl	8002706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f8b4 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d122      	bne.n	8002620 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d11b      	bne.n	8002620 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0210 	mvn.w	r2, #16
 80025f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2208      	movs	r2, #8
 80025f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f887 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f879 	bl	8002706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f88a 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10e      	bne.n	800264c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0201 	mvn.w	r2, #1
 8002644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fd fdbe 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002656:	2b80      	cmp	r3, #128	; 0x80
 8002658:	d10e      	bne.n	8002678 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	d107      	bne.n	8002678 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f986 	bl	8002984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002686:	d10e      	bne.n	80026a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b80      	cmp	r3, #128	; 0x80
 8002694:	d107      	bne.n	80026a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800269e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f979 	bl	8002998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b40      	cmp	r3, #64	; 0x40
 80026b2:	d10e      	bne.n	80026d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d107      	bne.n	80026d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f838 	bl	8002742 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d10e      	bne.n	80026fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d107      	bne.n	80026fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f06f 0220 	mvn.w	r2, #32
 80026f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f939 	bl	8002970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a32      	ldr	r2, [pc, #200]	; (8002834 <TIM_Base_SetConfig+0xdc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d007      	beq.n	8002780 <TIM_Base_SetConfig+0x28>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002776:	d003      	beq.n	8002780 <TIM_Base_SetConfig+0x28>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a2f      	ldr	r2, [pc, #188]	; (8002838 <TIM_Base_SetConfig+0xe0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d108      	bne.n	8002792 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a27      	ldr	r2, [pc, #156]	; (8002834 <TIM_Base_SetConfig+0xdc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <TIM_Base_SetConfig+0x6a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d00f      	beq.n	80027c2 <TIM_Base_SetConfig+0x6a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a24      	ldr	r2, [pc, #144]	; (8002838 <TIM_Base_SetConfig+0xe0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00b      	beq.n	80027c2 <TIM_Base_SetConfig+0x6a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a23      	ldr	r2, [pc, #140]	; (800283c <TIM_Base_SetConfig+0xe4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d007      	beq.n	80027c2 <TIM_Base_SetConfig+0x6a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a22      	ldr	r2, [pc, #136]	; (8002840 <TIM_Base_SetConfig+0xe8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d003      	beq.n	80027c2 <TIM_Base_SetConfig+0x6a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a21      	ldr	r2, [pc, #132]	; (8002844 <TIM_Base_SetConfig+0xec>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d108      	bne.n	80027d4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <TIM_Base_SetConfig+0xdc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00b      	beq.n	8002818 <TIM_Base_SetConfig+0xc0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a0e      	ldr	r2, [pc, #56]	; (800283c <TIM_Base_SetConfig+0xe4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <TIM_Base_SetConfig+0xc0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <TIM_Base_SetConfig+0xe8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0xc0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a0c      	ldr	r2, [pc, #48]	; (8002844 <TIM_Base_SetConfig+0xec>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d103      	bne.n	8002820 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	615a      	str	r2, [r3, #20]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40000400 	.word	0x40000400
 800283c:	40014000 	.word	0x40014000
 8002840:	40014400 	.word	0x40014400
 8002844:	40014800 	.word	0x40014800

08002848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	2201      	movs	r2, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a1a      	ldr	r2, [r3, #32]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	43db      	mvns	r3, r3
 800286a:	401a      	ands	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a1a      	ldr	r2, [r3, #32]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	431a      	orrs	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	621a      	str	r2, [r3, #32]
}
 8002886:	bf00      	nop
 8002888:	371c      	adds	r7, #28
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e054      	b.n	8002956 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a24      	ldr	r2, [pc, #144]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d108      	bne.n	80028e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a17      	ldr	r2, [pc, #92]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00e      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d009      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a13      	ldr	r2, [pc, #76]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d004      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a11      	ldr	r2, [pc, #68]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d10c      	bne.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	4313      	orrs	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40000400 	.word	0x40000400
 800296c:	40014000 	.word	0x40014000

08002970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <__libc_init_array>:
 80029ac:	b570      	push	{r4, r5, r6, lr}
 80029ae:	4d0d      	ldr	r5, [pc, #52]	; (80029e4 <__libc_init_array+0x38>)
 80029b0:	4c0d      	ldr	r4, [pc, #52]	; (80029e8 <__libc_init_array+0x3c>)
 80029b2:	1b64      	subs	r4, r4, r5
 80029b4:	10a4      	asrs	r4, r4, #2
 80029b6:	2600      	movs	r6, #0
 80029b8:	42a6      	cmp	r6, r4
 80029ba:	d109      	bne.n	80029d0 <__libc_init_array+0x24>
 80029bc:	4d0b      	ldr	r5, [pc, #44]	; (80029ec <__libc_init_array+0x40>)
 80029be:	4c0c      	ldr	r4, [pc, #48]	; (80029f0 <__libc_init_array+0x44>)
 80029c0:	f000 f820 	bl	8002a04 <_init>
 80029c4:	1b64      	subs	r4, r4, r5
 80029c6:	10a4      	asrs	r4, r4, #2
 80029c8:	2600      	movs	r6, #0
 80029ca:	42a6      	cmp	r6, r4
 80029cc:	d105      	bne.n	80029da <__libc_init_array+0x2e>
 80029ce:	bd70      	pop	{r4, r5, r6, pc}
 80029d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d4:	4798      	blx	r3
 80029d6:	3601      	adds	r6, #1
 80029d8:	e7ee      	b.n	80029b8 <__libc_init_array+0xc>
 80029da:	f855 3b04 	ldr.w	r3, [r5], #4
 80029de:	4798      	blx	r3
 80029e0:	3601      	adds	r6, #1
 80029e2:	e7f2      	b.n	80029ca <__libc_init_array+0x1e>
 80029e4:	08002a4c 	.word	0x08002a4c
 80029e8:	08002a4c 	.word	0x08002a4c
 80029ec:	08002a4c 	.word	0x08002a4c
 80029f0:	08002a50 	.word	0x08002a50

080029f4 <memset>:
 80029f4:	4402      	add	r2, r0
 80029f6:	4603      	mov	r3, r0
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d100      	bne.n	80029fe <memset+0xa>
 80029fc:	4770      	bx	lr
 80029fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002a02:	e7f9      	b.n	80029f8 <memset+0x4>

08002a04 <_init>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr

08002a10 <_fini>:
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	bf00      	nop
 8002a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a16:	bc08      	pop	{r3}
 8002a18:	469e      	mov	lr, r3
 8002a1a:	4770      	bx	lr
